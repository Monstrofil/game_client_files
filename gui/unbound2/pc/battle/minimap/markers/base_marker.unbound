(def css $TextMinimapRangeDropShadowFilter ()
	(filters
		(dropShadow
			(distance = 0)
			(angle = 70)
			(color = 0x000000)
			(alpha = 1.0)
			(blurX = 2.0)
			(blurY = 2.0)
			(strength = 0.6)
			(quality = 1)
		)
	)
)

(def css $TextMinimapRange ()
	(extends $FontFamilyDefault)
	(extends $FontSizeSmall)
	
	(extends $TextMouseDisable)
	(extends $FontEnableReadability)
	(extends $TextMinimapRangeDropShadowFilter))

(def css $TextMinimapRangeBold ()
	(extends $TextMinimapRange)
	(extends $FontFamilyDefaultBold)
	(extends $FontSizeDefault))


(def constant MINIMAP_MARKERS_SETTINGS [
	{markerRenderer: 'MapShipMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapBuildingMarker',			disableUpdatePos: false, rotateBack: true,	hideOnDeath: false},
	{markerRenderer: 'MapCapturePointMarker',		disableUpdatePos: false, rotateBack: true,	hideOnDeath: false},
	{markerRenderer: 'MapEpicenterMarker',			disableUpdatePos: false, rotateBack: true,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapScenarioObjectMarker',		disableUpdatePos: false, rotateBack: true,	hideOnDeath: false},
	{markerRenderer: 'MapSquadronMarker',			disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapCameraMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapAimPositionMarker',		disableUpdatePos: true , rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapStubMarker',				disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapInteractiveZoneMarker',	disableUpdatePos: false, rotateBack: true,	hideOnDeath: false},
	{markerRenderer: 'MapWardFightersMarker',		disableUpdatePos: false, rotateBack: false,	hideOnDeath: false},
	{markerRenderer: 'MapNavpointMarker',			disableUpdatePos: true , rotateBack: false,	hideOnDeath: false}  
])


(def constant MASKED_MINIMAP_MARKERS_SETTINGS [
    {markerRenderer: 'MapShipMarkerHolder',			rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapBuildingMarker', 			rotateBack: true,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapCapturePointMarker', 		rotateBack: true,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapEpicenterMarker', 			rotateBack: true,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false}, 
    {markerRenderer: 'MapScenarioObjectMarker',		rotateBack: true,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapSquadronMarker', 			rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker',				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapCameraMarker',				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapAimPositionMarker', 		rotateBack: false,	disableUpdatePos: true,		hideOnDeath: false},
    {markerRenderer: 'MapStubMarker', 				rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapInteractiveZoneMarker', 	rotateBack: true,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapWardFightersMarker', 		rotateBack: false,	disableUpdatePos: false,	hideOnDeath: false},
    {markerRenderer: 'MapNavpointMarker',			rotateBack: false,	disableUpdatePos: true,		hideOnDeath: false}  
])

(def constant QUICK_COMMAND_ANIM_LIFETIME 6)
(def constant SUBMARINE_PING_ANIM_LIFETIME 3.15)
(def constant MIN_TEXT_OFSSET_ANGLE 1.7707)
(def constant ADDTIVE_TEXT_OFSSET_ANGLE 4.7123)
(def constant RANGES_TEXT_ANGLE 1.4)
(def constant MINIMAP_RANGES_SETTINGS "{
	shootMGRange:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	shootTARange:			{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	shootPingerRange:		{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	visibilityRange:		{ color: 0x6EE1F7, boldText: false, dashLength: 11, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 11 },
	visibilityPlaneRange:	{ color: 0x6EE1D8, boldText: false, dashLength: 13, drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 27 },
	aaRangeMax:				{ color: 0xF0A522, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	atbaRange:				{ color: 0xA9C272, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	rlsRange:				{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 1.5, spacing: 15.5 },
	sonarRange:				{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: true , forceEnabled: false, lineThickness: 2  , spacing: 21 },
	visDistance:			{ color: 0x00CCFF, boldText: false, dashLength: 0 , drawDotted: false, forceEnabled: true , lineThickness: 1  , spacing: 0 },
	shootDistance:			{ color: 0x00CCFF, boldText: false, dashLength: 11, drawDotted: false, forceEnabled: true , lineThickness: 1  , spacing: 11 },
	visibilityAfterPingByShipRange:	{ color: 0x00BBFF, boldText: false, dashLength: 16, drawDotted: false, forceEnabled: true , lineThickness: 1  , spacing: 40 },
	shootChargeLaserRange:	{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	shootImpulseLaserRange:	{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	shootAxisLaserRange:	{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 },
	shootWaveGunRange:	{ color: 0xBBBBBB, boldText: true , dashLength: 0 , drawDotted: false, forceEnabled: false, lineThickness: 1  , spacing: 0 }
}")

(def macro BASE_MAP_MARKER_PARAMS ()
	(var entity:gfx = "$datahub.getEntity(_entityId)")
	(var mapScale:number = "_mapScale")
	(var itemScale:number = "_itemScale")
	(var scaleRatio:number = "_scaleRatio")
)

(def element MapMarkerItem (_mapScale:number, _itemScale:number, _scaleRatio:number, _layerName:str, _markerSettingsMap:array = "MINIMAP_MARKERS_SETTINGS") layout=true
	(scope
		(var mapScale:number = "_mapScale")
		(var itemScale:number = "_itemScale")
		(var scaleRatio:number = "_scaleRatio")
		(var markerSettingsMap:array = "_markerSettingsMap")

		(var markerCollection:gfx = "$datahub.getCollection(CC.mapPosition)")
		(var layerCollection:gfx = "markerCollection.getChildByPath('byLayer.' + _layerName)")
		(var markerEntity:gfx = "layerCollection.items[$index]" watch=false)
		(var position:gfx = "markerEntity.mapPosition.position")

		(var type:number = "markerEntity.entityType.value")
		(var markerSettings:dict = "markerSettingsMap[type]")
		(var markerUpdatePos:bool = "!(markerSettings.disableUpdatePos)")
		(var rotateBack:bool = "markerSettings.rotateBack")

		(var target:gfx = "markerEntity.target" (event "markerEntity.evAdded") (event "markerEntity.evRemoved"))
		(var targetFlags:number = "target ? target.flags : 0" (event "target.evChanged") (event "target.evFlagsChanged"))
		(var isTargetLocked:bool = "(targetFlags & LOCKABLE_WEAPONS) > 0")

		(var mapVisible:bool = "markerEntity.visibility ? markerEntity.visibility.mapVisible : false" (event "markerEntity.visibility.evChanged"))

		(var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")
		(var angleToRotate:number = "minimapComponent.rotationAngleDeg" (event "minimapComponent.evRotationAngleDegChanged"))

		(var scenarioTag:gfx = "markerEntity.scenarioTag" (event "markerEntity.evAdded") (event "markerEntity.evRemoved"))

		(var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isAlive:bool = "avatarEntity && avatarEntity.health.isAlive" (event "avatarEntity.health.evIsAliveChanged"))
		(var hideOnDeath:bool = "markerSettings.hideOnDeath")
	)
	(style
		(position = "absolute")
		(bind left "scaleRatio * position.x" (event "evEnterFrame") (bind enabled "markerUpdatePos"))
		(bind top "scaleRatio * position.y" (event "evEnterFrame") (bind enabled "markerUpdatePos"))
		(bind rotation "-angleToRotate" (bind enabled "rotateBack"))
	)
	(macro BIND_FAIR_SCALE "markerUpdatePos ? mapScale : 1")
	
	(block
		(controller $Instance (renderer = 'MapMarkerScenarioTag')
			(bind enabled "scenarioTag != null")
			(args _entityId="markerEntity.id")
			(exprs
				(macro BIND_FAIR_SCALE "itemScale / mapScale")
			)
		)
	)

	
	(block
		(style (position = "absolute"))
		(controller $FxInstance renderer='MapMarkerItemQCAnim' lifetime="QUICK_COMMAND_ANIM_LIFETIME"
			(bindcall create (event "markerEntity.quickCommand.evPlay"))
			(args _type="$event[1]")
		)
	)
	(bind visible "isAlive" (bind enabled "hideOnDeath"))

	
	(block
		(controller $Instance (bind renderer "markerSettings.markerRenderer")
			(args _entityId="markerEntity.id" _mapScale="mapScale" _itemScale="itemScale" _scaleRatio="scaleRatio")
			(exprs
				(scope
					(bind mapScale "mapScale")
					(bind itemScale "itemScale")
					(bind scaleRatio "scaleRatio")
				)
			)
		)
	)

	
	(block
		(style (position = "absolute"))
		(controller $Instance (renderer = 'MapMarkerItemAimTargetLock')
			(bind enabled "isTargetLocked && mapVisible")
			(exprs
				(macro BIND_FAIR_SCALE "itemScale / mapScale")
			)
		)
	)
)

(def element MapMarkerItemQCAnim (_type:str) layout=true
	(scope
		(var lifetime:number = "_type == 'Submarine_Ping_CMD' ? SUBMARINE_PING_ANIM_LIFETIME : QUICK_COMMAND_ANIM_LIFETIME")
	)
	(style 
		(position = "absolute")
		(bind backgroundImage "isIn(_type, ['Target_CMD', 'Submarine_Ping_CMD']) ? 'symbol:TargetMinimap' : 'symbol:SenderMinimap'")
	)

	(controller $Animation
		(play
			duration=0.15
			from={alpha: 0}
			to={alpha: 1}
			easing="Easing.quint_in"
		)

		(play
			duration=0.15
			delay="lifetime-0.15"
			from={alpha: 1}
			to={alpha: 0}
			easing="Easing.quint_out"
		)
	)
)

(def element MapMarkerItemAimTargetLock () layout=true
	(style (position = "absolute"))
	(bind alpha 0.5)

	(block
		(style
			(position = "absolute")
			(bind backgroundImage "'symbol:minimap_target_lock'")
		)
				
		(controller $Animation
			(play 
				duration=0.2
				from={scaleX:2, scaleY:2, alpha:0}
				to={scaleX: 1, scaleY: 1, alpha:1}
			)
		)
	)
)

(def macro MINIMAP_MARKER_RANGES (_entityId:expression) layout=true
	(scope
		(var entity:gfx = "$datahub.getEntity(_entityId)")

		(var minimapRangesCollection:gfx = "$datahub.getCollection(CC.minimapRange)")
		(var minimapRanges:gfx = "minimapRangesCollection.getChildByPath('byEntity.' + entity.id + '.sorted')")
	)

	(controller $Repeat renderer='MapMarkerItemRange'
		(bind count "minimapRanges.items.length")
		(args _entityId="entity.id" _mapScale="mapScale")
		(exprs
			(scope
				(bind mapScale "mapScale")
			)
		)
	)
)

(def macro RANGE_CIRCLE (_rangeSettings:expression, _rangeRadius:expression)
    (block
        (macro BIND_FAIR_SCALE "_rangeRadius")
		(block
			(controller $Sector
				(bind arc "360")
				(bind radius "MINIMAP_ASSETS_SIZE")
				(bind innerRadius "MINIMAP_ASSETS_SIZE")
				(bind lineThickness "_rangeSettings.lineThickness")
				(bind lineAlpha "1")
				(bind lineColor "_rangeSettings.color")
				(bind dashLength "_rangeSettings.dashLength")
				(bind spacing "_rangeSettings.spacing")
				(bind drawDotted "_rangeSettings.drawDotted")
			)
		)
	)
)

(def element MapMarkerItemRange (_entityId:number, _mapScale:number) layout = true
	(scope
		(var ownerEntity:gfx = "$datahub.getEntity(_entityId)")

		(var mapScale:number = "_mapScale")
		(var rangesTextScale:number = "mapScale > 1 ? 1 / mapScale : 1")

		(var minimapRangesCollection:gfx = "$datahub.getCollection(CC.minimapRange)")
		(var minimapRanges:gfx = "minimapRangesCollection.getChildByPath('byEntity.' + ownerEntity.id + '.sorted')")

		(var rangeEntity:gfx = "minimapRanges.items[$index]")
		(var parameterKey:str = "rangeEntity.minimapRange.parameterKey")
		(var isConsumable:bool = "rangeEntity.minimapRange.isConsumable")
		(var isActive:bool = "rangeEntity.minimapRange.isActive || isConsumable" (event "rangeEntity.minimapRange.evIsActiveChanged"))
		(var rangeSettings:dict = "MINIMAP_RANGES_SETTINGS[parameterKey]")

		(var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
		(var angleToRotate:number = "minimapEntity.minimap.rotationAngleDeg" (event "minimapEntity.minimap.evRotationAngleDegChanged"))

		(var minimapOptions:gfx = "minimapEntity.minimapOptions")
		(var rangesAlpha:number = "minimapOptions.rangesAlpha / 100" (event "minimapOptions.evChanged"))
		(var distanceDisplayEnabled:bool = "minimapOptions.distanceDisplayEnabled" (event "minimapOptions.evChanged"))
		(var rangeOptionsEnabled:bool = "minimapOptions[parameterKey + 'Enabled']" (event "minimapOptions.evChanged"))
		(var rangeEnabled:bool = "rangeOptionsEnabled || rangeSettings.forceEnabled")

		(var range:number = "rangeEntity.circle.radius" (event "rangeEntity.circle.evRadiusChanged"))
		(var rangeRadius:number = "range" watch=false)
		(controller $Animation
			(bindcall play  duration=0.3
							easing="Easing.linear"
							to="{ rangeRadius: range }"
							watch=false
							(bind trigger "range")
							(bind enabled "rangeEnabled")
			)
		)

		
		(var rangeCurrentValue:number = "rangeEntity.parameter.currentValue" (event "rangeEntity.parameter.evChanged"))
		(var rangeValue:str = "formatFloatingPoint(round(rangeCurrentValue * 10) / 10, 1)")
		(var position:gfx = "ownerEntity.mapPosition.position")

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var posX:number = "position.x" (event "timer.evInfrequent"))
		(var posY:number = "position.y" (event "timer.evInfrequent"))

		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))

		(var offsetAngle:number = "RANGES_TEXT_ANGLE / minimapRanges.items.length" watch=false)
		(var rangeRotation:number = "(distanceDisplayEnabled || altVision) ? (offsetAngle * (0 - minimapRanges.items.length / 2 + $index)) + atan2(0.5 - posY, 0.5 - posX) : 0")
	)
	(bind name "parameterKey")
	(bind visible "rangeEnabled && rangeRadius > 0")

	
	(block
		(style (bind alpha "rangesAlpha")) 
		(block
			(style (bind alpha "isActive ? 1 : 0.65")) 
			(macro RANGE_CIRCLE "rangeSettings" "rangeRadius")

			
			(block
				(style
					(alpha = "0")
					(filters
						(dropShadow
							(distance = 0)
							(angle = 90)
							(color = 0xFFFFFF)
							(alpha = 1.0)
							(blurX = 3.5)
							(blurY = 3.5)
							(strength = 1.2)
							(quality = 2)
						)
					)
				)
				(macro RANGE_CIRCLE "rangeSettings" "rangeRadius")

				(controller $Animation
					(bindcall play duration=0.2
							easing="Easing.linear"
							from="{ alpha: 0 }"
							to="{ alpha: 1 }"
							(bind enabled "isActive")
							(event "rangeEntity.minimapRange.evIsActiveChanged")
					)
					(bindcall play duration=0.4
							delay=0.2
							easing="Easing.linear"
							from="{ alpha: 1 }"
							to="{ alpha: 0 }"
							(bind enabled "isActive")
							(event "rangeEntity.minimapRange.evIsActiveChanged")
					)
				)
			)

			(controller $Animation
				(bindcall play duration=0.6
						easing="Easing.linear"
						from="{ alpha: 0.65 }"
						to="{ alpha: 1 }"
						(bind enabled "isActive")
						(event "rangeEntity.minimapRange.evIsActiveChanged")
				)
				(bindcall play duration=0.6
						easing="Easing.linear"
						from="{ alpha: 1 }"
						to="{ alpha: 0.65 }"
						(bind enabled "!(isActive)")
						(event "rangeEntity.minimapRange.evIsActiveChanged")
				)
			)
		)
	)

	
	(block
		(style (bind rotation "radToGrad(rangeRotation)"))
		(bind visible "distanceDisplayEnabled || altVision")
		(block
			(style
				(position = "absolute")
				(bind left "rangeRadius * MINIMAP_ASSETS_SIZE")
			)
			(block
				(style (bind rotation "-radToGrad(rangeRotation) - angleToRotate"))
				(macro BIND_FAIR_SCALE "rangesTextScale")
				(tf
					(style
						(position = "absolute")
						(width = "38px") (height = "20px")
						(left = "-19px") (top = "-10px")
						(textAlign = "center")
						(textColor = "rangeSettings.color")
					)
					(bind class "rangeSettings.boldText ? '$TextMinimapRangeBold' : '$TextMinimapRange'")
					(bind text "rangeValue")
				)
			)
		)
	)
)


(def element MapStubMarker (_entityId:number, _mapScale:number, _itemScale:number, _scaleRatio:number) layout=true
	(scope
		(macro BASE_MAP_MARKER_PARAMS)
	)

	(macro BIND_FAIR_SCALE "itemScale / mapScale")

	(macro trace "entity.entityType.value")
)
