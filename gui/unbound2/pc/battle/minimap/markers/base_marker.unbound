(def css $TextMinimapRangeDropShadowFilter ()
    (dropShadowFilter = { distance: 0, angle: 70, color: 0x000000, alpha: 1.0, blurX: 2, blurY: 2, strength: 0.6, quality: 1 }))

(def css $TextMinimapRange ()
	(extends $FontFamilyDefault)
	(extends $FontSizeSmall)
	(extends $FontColorDefault)
	(extends $TextMouseDisable)
    (extends $FontEnableReadability)
    (extends $TextMinimapRangeDropShadowFilter))

(def css $TextMinimapRangeBold ()
	(extends $TextMinimapRange)
    (extends $FontFamilyDefaultBold)
	(extends $FontSizeDefault))


(def constant MINIMAP_MARKERS_SETTINGS [
    {markerRenderer: 'MapShipMarker'},
    {markerRenderer: 'MapBuildingMarker', rotateBack: true},
    {markerRenderer: 'MapCapturePointMarker', rotateBack: true},
    {markerRenderer: 'MapEpicenterMarker', rotateBack: true},
    {markerRenderer: 'MapNavpointMarker', disableUpdatePos: true},
    {markerRenderer: 'MapScenarioObjectMarker', rotateBack: true},
    {markerRenderer: 'MapSquadronMarker'},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapCameraMarker'},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapAimPositionMarker', disableUpdatePos: true},
    {markerRenderer: 'MapStubMarker'},
    {markerRenderer: 'MapInteractiveZoneMarker', rotateBack: true},
    {markerRenderer: 'MapWardFightersMarker'}
])

(def constant MIN_TEXT_OFSSET_ANGLE 1.7707)
(def constant ADDTIVE_TEXT_OFSSET_ANGLE 4.7123)
(def constant RANGES_TEXT_ANGLE 1.4)
(def constant MINIMAP_RANGES_SETTINGS "{
    shootMGRange: {
        symbolName: 'minimap_shoot_range_circle',
        txtColor: 0xBBBBBB,
        boldText: true
    },
    shootTARange: {
        symbolName: 'minimap_shoot_range_circle',
        txtColor: 0xBBBBBB,
        boldText: true
    },

    visibilityRange: {
        symbolName: 'minimap_visibility_range_circle',
        txtColor: 0x6EE1F7
    },
    visibilityPlaneRange: {
        symbolName: 'minimap_visibility_plane_range_circle',
        txtColor: 0x6EE1D8
    },

    aaRangeMax: {
        symbolName: 'minimap_aa_range_circle',
        txtColor: 0xF0A522
    },

    atbaRange: {
        symbolName: 'minimap_atba_range_circle',
        txtColor: 0xA9C272
    },

    rlsRange: {
        symbolName: 'minimap_rls_range_circle',
        txtColor: 0x00CCFF
    },
    sonarRange: {
        symbolName: 'minimap_sonar_range_circle',
        txtColor: 0x00CCFF
    },
    visDistance: {
        symbolName: 'minimap_visDistance_range_circle',
        txtColor: 0x00CCFF,
        forceEnabled: true,
        addRelation: true
    },
    shootDistance: {
        symbolName: 'minimap_shootDistance_range_circle',
        txtColor: 0x00CCFF,
        forceEnabled: true,
        addRelation: true
    }
}")

(def macro BASE_MAP_MARKER_PARAMS ()
    (var entity:gfx = "$datahub.getEntity(_entityId)")
    (var mapScale:number = "_mapScale")
    (var itemScale:number = "_itemScale")
    (var scaleRatio:number = "_scaleRatio")    
)

(def element MapMarkerItem (_mapScale:number, _itemScale:number, _scaleRatio:number, _layerName:str) layout=true
    (scope
        (var mapScale:number = "_mapScale")
        (var itemScale:number = "_itemScale")
        (var scaleRatio:number = "_scaleRatio")

        (var markerCollection:gfx = "$datahub.getCollection(CC.mapPosition)")
        (var layerCollection:gfx = "markerCollection.getChildByPath('byLayer.' + _layerName)")
        (var markerEntity:gfx = "layerCollection.items[$index]" watch=false)
        (var position:gfx = "markerEntity.mapPosition.position")

        (var type:number = "markerEntity.entityType.value")
        (var markerSettings:dict = "MINIMAP_MARKERS_SETTINGS[type]")
        (var markerUpdatePos:bool = "!(markerSettings.disableUpdatePos)")
        (var rotateBack:bool = "markerSettings.rotateBack")

        (var target:gfx = "markerEntity.target" (event "markerEntity.evAdded") (event "markerEntity.evRemoved"))
        (var targetFlags:number = "target.flags" (event "target.evChanged") (event "target.evFlagsChanged"))
		(var isTargetLocked:bool = "(targetFlags & (1 << WeaponType.ARTILLERY | 1 << WeaponType.TORPEDO)) > 0")

        (var mapVisible:bool = "markerEntity.visibility.mapVisible" (event "markerEntity.visibility.evChanged"))

        (var minimapComponent:gfx = "$datahub.getSingleComponent(CC.minimap)")
        (var angleToRotate:number = "minimapComponent.rotationAngleDeg" (event "minimapComponent.evRotationAngleDegChanged"))

        (var scenarioTag:gfx = "markerEntity.scenarioTag" (event "markerEntity.evAdded") (event "markerEntity.evRemoved"))
    )

    (style (position = "absolute"))
    (bind x "scaleRatio * position.x" (event "evEnterFrame") (bind enabled "markerUpdatePos"))
    (bind y "scaleRatio * position.y" (event "evEnterFrame") (bind enabled "markerUpdatePos"))
    (macro BIND_FAIR_SCALE "markerUpdatePos ? mapScale : 1")

    (bind rotation "-angleToRotate" (bind enabled "rotateBack"))

    
    (block
        (controller $Instance (renderer = 'MapMarkerScenarioTag')
            (bind enabled "scenarioTag != null")
            (args _entityId="markerEntity.id")
            (exprs
                (macro BIND_FAIR_SCALE "itemScale / mapScale")
            )
        )    
    )
    
    
    (block 
        (style (position = "absolute"))
        (controller $FxInstance renderer='MapMarkerItemQCAnim' lifetime="6"
            (bindcall create (event "markerEntity.quickCommand.evPlay"))
            (args _type="$event[1]" _lifetime="6")
        )
    )

    
    (block
        (controller $Instance (bind renderer "markerSettings.markerRenderer")
            (args _entityId="markerEntity.id" _mapScale="mapScale" _itemScale="itemScale" _scaleRatio="scaleRatio")
            (exprs
                (scope
                    (bind mapScale "mapScale")
                    (bind itemScale "itemScale")
                    (bind scaleRatio "scaleRatio")
                )
            )
        )
    )

    
    (block
        (style (position = "absolute"))
        (controller $Instance (renderer = 'MapMarkerItemAimTargetLock')
            (bind enabled "isTargetLocked && mapVisible")
            (exprs
                (macro BIND_FAIR_SCALE "itemScale / mapScale")
            )
        )    
    )
)

(def element MapMarkerItemQCAnim (_type:str, _lifetime:number) layout=true
	(style 
		(position = "absolute")
		(bind backgroundImage "_type == 'Target_CMD' ? 'symbol:TargetMinimap' : 'symbol:SenderMinimap'")
	)

	(controller $Animation
		(play
			duration=0.15
			from={alpha: 0}
			to={alpha: 1}
			easing="Easing.quint_in"
		)

		(play
			duration=0.15
			delay="_lifetime-0.15"
			from={alpha: 1}
			to={alpha: 0}
			easing="Easing.quint_out"
		)
	)
)

(def element MapMarkerItemAimTargetLock () layout=true
	(style (position = "absolute"))
    (bind alpha 0.5)

	(block
		(style
			(position = "absolute")
			(bind backgroundImage "'symbol:minimap_target_lock'")
		)
				
		(controller $Animation
			(play 
                duration=0.2
                from={scaleX:2, scaleY:2, alpha:0} 
                to={scaleX: 1, scaleY: 1, alpha:1} 
			)
		)
	)
)

(def macro MINIMAP_MARKER_RANGES (_entityId:expression) layout=true
    (scope
        (var entity:gfx = "$datahub.getEntity(_entityId)")

        (var minimapRangesCollection:gfx = "$datahub.getCollection(CC.minimapRange)")
        (var minimapRanges:gfx = "minimapRangesCollection.getChildByPath('byEntity.' + entity.id + '.sorted')")
    )
    
    (controller $Repeat renderer='MapMarkerItemRange' 
        (bind count "minimapRanges.items.length")
        (args _entityId="entity.id" _mapScale="mapScale")
        (exprs
            (scope
                (bind mapScale "mapScale")
            )
        )
    )
)

(def element MapMarkerItemRange (_entityId:number, _mapScale:number) layout = true
    (scope
        (var ownerEntity:gfx = "$datahub.getEntity(_entityId)")

        (macro VAR_RELATION "ownerEntity")

        (var mapScale:number = "_mapScale")
        (var rangesTextScale:number = "mapScale > 1 ? 1 / mapScale : 1")
        
        (var minimapRangesCollection:gfx = "$datahub.getCollection(CC.minimapRange)")
        (var minimapRanges:gfx = "minimapRangesCollection.getChildByPath('byEntity.' + ownerEntity.id + '.sorted')")

        (var rangeEntity:gfx = "minimapRanges.items[$index]")
        (var parameterKey:str = "rangeEntity.minimapRange.parameterKey")
        (var isConsumable:bool = "rangeEntity.minimapRange.isConsumable")
        (var isActive:bool = "rangeEntity.minimapRange.isActive || isConsumable" (event "rangeEntity.minimapRange.evIsActiveChanged"))
        (var rangeSettings:dict = "MINIMAP_RANGES_SETTINGS[parameterKey]")

        (var relationPostfix:str = "rangeSettings.addRelation ? '_' + relation : ''")
        
        (var minimapEntity:gfx = "$datahub.getSingleEntity(CC.minimap)")
        (var angleToRotate:number = "minimapEntity.minimap.rotationAngleDeg" (event "minimapEntity.minimap.evRotationAngleDegChanged"))

        (var minimapOptions:gfx = "minimapEntity.minimapOptions")
        (var rangesAlpha:number = "minimapOptions.rangesAlpha / 100" (event "minimapOptions.evChanged"))
        (var distanceDisplayEnabled:bool = "minimapOptions.distanceDisplayEnabled" (event "minimapOptions.evChanged"))
        (var rangeOptionsEnabled:bool = "minimapOptions[parameterKey + 'Enabled']" (event "minimapOptions.evChanged"))
        (var rangeEnabled:bool = "rangeOptionsEnabled || rangeSettings.forceEnabled")

        (var range:number = "rangeEntity.circle.radius" (event "rangeEntity.circle.evRadiusChanged"))
        (var rangeRadius:number = "range" watch=false)
        (controller $Animation
            (bindcall play  duration=0.3
                            easing="Easing.linear"
                            to="{ rangeRadius:range }"
                            watch=false
                            (bind trigger "range")
                            (bind enabled "rangeEnabled")                      
            )
        )

        (var rangeSize:number = "rangeRadius * 2 * MINIMAP_ASSETS_SIZE")

        
        (var rangeCurrentValue:number = "rangeEntity.parameter.currentValue" (event "rangeEntity.parameter.evChanged"))
        (var rangeValue:str = "abs(rangeCurrentValue - round(rangeCurrentValue)) > 0 ? formatFloatingPoint(rangeCurrentValue, 1) : round(rangeCurrentValue)")
        (var position:gfx = "ownerEntity.mapPosition.position")

        (var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var posX:number = "position.x" (event "timer.evInfrequent"))
        (var posY:number = "position.y" (event "timer.evInfrequent"))

        (var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
    	(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))
        
        
        
        
        (var offsetAngle:number = "RANGES_TEXT_ANGLE / minimapRanges.items.length" watch=false)
        (var rangeRotation:number = "(distanceDisplayEnabled || altVision) ? (offsetAngle * (0 - minimapRanges.items.length / 2 + $index)) + atan2(0.5 - posY, 0.5 - posX) : 0")
    )

    (bind visible "rangeEnabled && range > 0")

    
    (block
        (bind alpha "rangesAlpha") 

        (block
            (bind alpha "isActive ? 1 : 0.65") 
            (style 
                (position = "absolute")
                (bind width "rangeSize")
                (bind height "rangeSize")
                (backgroundSize = "fill")
                (backgroundImage = "'symbol:' + rangeSettings.symbolName + relationPostfix")
            )

            
            (block
                (alpha = "0")
                (class $FullsizeAbsolute)
                (style
                    (backgroundSize = "fill") (backgroundImage = "'symbol:' + rangeSettings.symbolName + relationPostfix")
                    (dropShadowFilter = { distance: 0, angle: 90, color: 0xFFFFFF, alpha: 1.0, blurX: 3.5, blurY: 3.5, strength: 1.2, quality: 2 })
                )

                (controller $Animation
                    (bindcall play duration=0.2                            
                            easing="Easing.linear"
                            from="{ alpha: 0 }"
                            to="{ alpha: 1 }"
                            (bind enabled "isActive")
                            (event "rangeEntity.minimapRange.evIsActiveChanged")
                    )
                    (bindcall play duration=0.4
                            delay=0.2              
                            easing="Easing.linear"
                            from="{ alpha: 1 }"
                            to="{ alpha: 0 }"
                            (bind enabled "isActive")
                            (event "rangeEntity.minimapRange.evIsActiveChanged")
                    )
                )
            )

            (controller $Animation
                (bindcall play duration=0.6                            
                        easing="Easing.linear"
                        from="{ alpha: 0.65 }"
                        to="{ alpha: 1 }"
                        (bind enabled "isActive")
                        (event "rangeEntity.minimapRange.evIsActiveChanged")
                )
                (bindcall play duration=0.6                            
                        easing="Easing.linear"
                        from="{ alpha: 1 }"
                        to="{ alpha: 0.65 }"
                        (bind enabled "!(isActive)")
                        (event "rangeEntity.minimapRange.evIsActiveChanged")
                )
            )
        )
    )

    
    (block
        (bind visible "distanceDisplayEnabled || altVision")
        (bind rotation "radToGrad(rangeRotation)")
        (block
            (style 
                (position = "absolute") 
                (bind left "rangeRadius * MINIMAP_ASSETS_SIZE")
            )

            (block
                (bind rotation "-radToGrad(rangeRotation) - angleToRotate")
                (macro BIND_FAIR_SCALE "rangesTextScale")
                (tf              
                    (style
                        (position = "absolute")
                        (width = "38px") (height = "20px")
                        (left = "-19px") (top = "-10px")                        
                        (textAlign = "center")
                        (textColor = "rangeSettings.txtColor")
                    )
                    (bind class "rangeSettings.boldText ? '$TextMinimapRangeBold' : '$TextMinimapRange'")
                    (bind text "rangeValue")
                )
            )
        )
    )
)


(def element MapStubMarker (_entityId:number, _mapScale:number, _itemScale:number, _scaleRatio:number) layout=true
    (scope
        (macro BASE_MAP_MARKER_PARAMS)
    )

    (macro BIND_FAIR_SCALE "itemScale / mapScale")

    (macro trace "entity.entityType.value")
)