(def constant SETTINGS_CONTROL_TYPE {
    CHECKBOX: 0,
    RANGE_CHECKBOX: 1,
    SLIDER: 2,
    DIVIDER: 3
})

(def constant MINIMAP_OPTIONS_SETTINGS [
    {
        optionName: 'visibilityRangeEnabled',
        parameterName: 'currentVisibilityRange', 
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'visibilityRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'visibilityPlaneRangeEnabled',
        parameterName: 'currentVisibilityPlaneRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'visibilityPlaneRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'visibilityAfterPingByShipRangeEnabled',
        parameterName: 'visibilityAfterPingByShipRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'visibilityAfterPingByShipRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'atbaRangeEnabled',
        parameterName: 'atbaRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'atbaRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'aaRangeMaxEnabled',
        parameterName: 'aaRangeMax',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'aaRangeMaxStyle',
        isReadOnly: false
    },
    {
        optionName: 'sonarRangeEnabled',
        parameterName: 'sonarRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'sonarRlsRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'rlsRangeEnabled',
        parameterName: 'rlsRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'sonarRlsRangeStyle',
        isReadOnly: false
    },
    {
        optionName: 'rangeCircles_divider',
        parameterName: '',
        controlType: 3,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },


    {
        optionName: 'shootMGRangeEnabled',
        parameterName: 'shootMGRange', 
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'activeEquipmentStyle',
        isReadOnly: true
    },
    {
        optionName: 'shootTARangeEnabled',
        parameterName: 'currentShootTARange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'activeEquipmentStyle',
        isReadOnly: true
    },
    {
        optionName: 'shootPingerRangeEnabled',
        parameterName: 'shootPingerRange',
        controlType: 1,
        minValue: 0, maxValue: 0,
        controlStyle: 'activeEquipmentStyle',
        isReadOnly: true
    },
    {
        optionName: 'shootCircles_divider',
        parameterName: 'shootRangesSummary',
        controlType: 3,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },


    {
        optionName: 'rangesAlpha',
        parameterName: '', 
        controlType: 2,
        minValue: 20, maxValue: 100,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },
    {
        optionName: 'waterAlpha',
        parameterName: '',
        controlType: 2,
        minValue: 0, maxValue: 100,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },
    {
        optionName: 'alphas_divider',
        parameterName: '',
        controlType: 3,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },


    {
        optionName: 'distanceDisplayEnabled',
        parameterName: '', 
        controlType: 0,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },
    {
        optionName: 'shipNamesDisplayEnabled',
        parameterName: '',
        controlType: 0,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    },
    {
        optionName: 'minimapRotationEnabled',
        parameterName: '',
        controlType: 0,
        minValue: 0, maxValue: 0,
        controlStyle: 'defaultStyle',
        isReadOnly: false
    }
])

(def constant MINIMAP_OPTIONS_STYLES {
    'defaultStyle' : { strokeClip: 'MGRangeStroke', textColor: 0xEEEEEE, textClass: '$TextDefaultNM' },

    'visibilityRangeStyle' : { strokeClip: 'VisibilityRangeStroke', textColor: 0x6EE1F7, textClass: '$TextDefaultNM' },
    'visibilityPlaneRangeStyle' : { strokeClip: 'VisibilityPlaneRangeStroke', textColor: 0x6EE1D8, textClass: '$TextDefaultNM' },
    'visibilityAfterPingByShipRangeStyle'  : { strokeClip: 'VisibilityPlaneRangeStroke', textColor: 0x00BBFF, textClass: '$TextDefaultNM' },
    'atbaRangeStyle' : { strokeClip: 'ATBARangeStroke', textColor: 0xA9C272, textClass: '$TextDefaultNM' },
    'aaRangeMaxStyle' : { strokeClip: 'AARangeStroke', textColor: 0xF0A522, textClass: '$TextDefaultNM' },
    'sonarRlsRangeStyle' : { strokeClip: 'SonarRangeStroke', textColor: 0x00CDFF, textClass: '$TextDefaultBoldNM' },

    'activeEquipmentStyle' : { strokeClip: 'MGRangeStroke', textColor: 0xCCCCCC, textClass: '$TextDefaultBoldNM' }
})

(def element MinimapOptions (_isTooltip:bool=false) layout=true
    (scope
        (var isTooltip:bool = "_isTooltip")
        (var paddings:number = "isTooltip ? 10 : 20")
    )

    (style (width = "380px"))

    (mc notification_panel
        (class $FullsizeAbsolute)
        (bind visible "isTooltip")
    )

    (mc dock_panel
        (class $FullsizeAbsolute)
        (bind visible "!(isTooltip)")
    )

    (block
        (style
            (bind paddingLeft "paddings")
            (bind paddingTop "paddings")
            (bind paddingRight "paddings")
            (bind paddingBottom "paddings")
            (width = 100%)
        )

        (controller $Repeat renderer='MinimapOptionsItemAdapter'
            (bind count "MINIMAP_OPTIONS_SETTINGS.length")
            (args _isTooltip = "isTooltip")
            (exprs
                (scope
                    (bind isTooltip "isTooltip")
                )
            )
        )

        (block
            (bind visible "isTooltip")
            (style (width = 100%))
            (element HorizontalDivider
                (style (marginTop = "6px") (marginBottom = "6px"))
            )
            (controller $Instance renderer='MouseInstruction'
                (args
                    _type = 'left'
                    _instructionText = 'IDS_MINIMAP_OPTIONS_HINT'
                    _maxWidth = 270
                    _leading = 0
                )
            )
        )
    )
)

(def element MinimapOptionsItemAdapter (_isTooltip:bool) layout=true
    (scope
        (var isTooltip:bool = "_isTooltip")

        (var itemSetting:dict = "MINIMAP_OPTIONS_SETTINGS[$index]")

        (var itemType:number = "itemSetting.controlType")
        (var itemEnabled:bool = "itemSetting.isReadOnly ? false : !(isTooltip)")
        (var itemText:str = "'IDS_MINIMAP_OPTIONS_'+toUpper(itemSetting.optionName)")
        
        (var itemVisualIndex:str = "itemSetting.controlStyle")
        (var itemVisual:dict = "MINIMAP_OPTIONS_STYLES[itemVisualIndex]")
    )

    (style (width = 100%))

    (controller $Instance (renderer = 'MinimapOptionsRangeCheckBox')
        (bind enabled "itemType == SETTINGS_CONTROL_TYPE.RANGE_CHECKBOX")
        (args   _setProp="itemSetting.optionName" _textProp="itemSetting.parameterName" _enabled="itemEnabled" _strokeClip="itemVisual.strokeClip"
                _textClass="itemVisual.textClass" _textColor="itemVisual.textColor" _text="itemText")
        (exprs
            (scope
                (bind enabled "itemEnabled")    
            )
        )
    )

    (controller $Instance (renderer = 'MinimapOptionsCheckBox')
        (bind enabled "itemType == SETTINGS_CONTROL_TYPE.CHECKBOX")
        (args _setProp="itemSetting.optionName" _enabled="itemEnabled" _text="itemText")
        (exprs
            (scope
                (bind enabled "itemEnabled")    
            )
        )
    )

    (controller $Instance (renderer = 'MinimapOptionsSlider')
        (bind enabled "itemType == SETTINGS_CONTROL_TYPE.SLIDER")
        (args _setProp="itemSetting.optionName" _min="itemSetting.minValue" _max="itemSetting.maxValue" _enabled="itemEnabled" _text="itemText")
        (exprs
            (scope
                (bind enabled "itemEnabled")    
            )
        )
    )

    (controller $Instance (renderer = 'MinimapOptionsDivider')
        (bind enabled "itemType == SETTINGS_CONTROL_TYPE.DIVIDER")
        (args _textProp="itemSetting.parameterName")
    )
)

(def element MinimapOptionsDivider (_textProp:str = '') layout=true
    (scope

        (var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
        (var textPropEntity:gfx = "$datahub.getPrimaryEntity(CC.parameter, '' + avatarEntity.id + '_' + _textProp)")
        (var textPropParameter:number = "textPropEntity.parameter.currentValue" (event "textPropEntity.parameter.evChanged"))

        (var textProp:str = "textPropParameter ? formatFloatingPoint(textPropParameter, 1) : ''")

        (var isAvailable:bool = "_textProp == '' || textPropParameter > 0")
    )

    (style (width = 100%) (marginTop = "6px") (marginBottom = "6px"))

    (bind visible "isAvailable")

    (element HorizontalDivider)
)

(def element MinimapOptionsSlider (_setProp:str, _min:number, _max:number, _text:str, _enabled:bool=true) layout=true
    (scope
        (var enabled:bool = "_enabled")

        (event evValueChanged)
        (var minimapOptions:gfx = "$datahub.getSingleComponent(CC.minimapOptions)")
        (var propValue:number = "minimapOptions[_setProp]" (event "minimapOptions.evChanged"))
    )

    (bindcall externalCall 'direct.action' "['battle.saveMinimapOptions', [_setProp, $event.value]]" init=false watch=false (event "evValueChanged"))

    (style (height = "55px") (align = "middle") (marginLeft = "27px"))

    (block
        (tf
            (class $TextDefaultNM)
            (alpha = "0.8")
            (style (marginBottom = "8px"))
            (bind text "_text")
        )
        (controller $Instance (renderer = 'Slider')
            (args _value="propValue" _min="_min" _max="_max" _enabled="enabled")
            (exprs
                (scope
                    (bind enabled "enabled")
                )
            )
        )
    )
)

(def element MinimapOptionsCheckBox (_setProp:str, _enabled:bool=true, _text:str='') layout=true
    (scope
        (var enabled:bool = "_enabled")

        (var minimapOptions:gfx = "$datahub.getSingleComponent(CC.minimapOptions)")
        (var propValue:bool = "minimapOptions[_setProp]" (event "minimapOptions.evChanged"))

        (macro MOUSE_HANDLER_SCOPE)
    )

    (macro SOUND_HANDLER "'default_checkbox'")

    (bindcall externalCall 'direct.action' "['battle.saveMinimapOptions', [_setProp, !(propValue)]]" init=false watch=false (event "evMouseDown"))

    (style (height = "32px") (width = "100%"))

    (hblock
        (style (height ="100%") (align = "middle"))

        (controller $Instance (renderer = 'CheckBoxNoLabel') 
            (args _selected="propValue" _enabled="enabled" _rollOver="rollOver" _interactive="enabled")
            (exprs
                (scope                    
                    (bind selected "propValue")
                    (bind enabled "enabled")
                    (bind rollOver "rollOver")
                    (bind interactive "enabled")
                )
            )
        )

        (tf
            (class $TextDefaultNM)
            (bind alpha "enabled ? (rollOver && !(mouseDown) ? 1 : 0.8) : 0.6")
            (style (textColor = "0xFFFFFF") (marginLeft = "4px"))
            (bind text "_text")
        )

        (macro MOUSE_HANDLER "enabled")
    )
)

(def element MinimapOptionsRangeCheckBox (_setProp:str, _textProp:str, _enabled:bool=true, _strokeClip:str='size', _textClass:str='$TextDefaultNM', _textColor:number=0, _text:str='') layout=true
    (scope
        (var enabled:bool = "_enabled")

        (var minimapOptions:gfx = "$datahub.getSingleComponent(CC.minimapOptions)")
        (var propValue:bool = "minimapOptions[_setProp]" (event "minimapOptions.evChanged"))

        (var avatarEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")

        (var textPropEntity:gfx = "$datahub.getPrimaryEntity(CC.parameter, '' + avatarEntity.id + '_' + _textProp)")
        (var textPropParameter:number = "textPropEntity.parameter.currentValue" (event "textPropEntity.parameter.evChanged"))

        (var textProp:str = "textPropParameter ? formatFloatingPoint(textPropParameter, 1) : ''")

        (var isAvailable:bool = "textPropParameter > 0")

        (macro MOUSE_HANDLER_SCOPE)
    )

    (macro SOUND_HANDLER "'default_checkbox'")

    (bindcall externalCall 'direct.action' "['battle.saveMinimapOptions', [_setProp, !(propValue)]]" init=false watch=false (event "evMouseDown"))

    (bind visible "isAvailable")

    (style (height = "32px") (width = "100%"))

    (hblock
        (style (height ="100%") (align = "middle"))

        (controller $Instance (renderer = 'CheckBoxNoLabel') 
            (args _selected="propValue" _enabled="enabled" _rollOver="rollOver" _interactive="enabled")
            (exprs
                (scope                    
                    (bind selected "propValue")
                    (bind enabled "enabled")
                    (bind rollOver "rollOver")
                    (bind interactive "enabled")
                )
            )
        )

        (block
            (bind visible "textProp != ''")
            (style (width = "86px") (align = "center|middle"))
            (block
                (tf
                    (bind class "_textClass")
                    (style (bind textColor "_textColor"))
                    (bind text "textProp + ' ' + tr('IDS_KILOMETER')")
                )
                (mc "_strokeClip"
                    (style (position = "absolute") (bottom = "-6px") (width = "100%"))
                ) 
            )
        )

        (tf
            (class $TextDefaultNM)
            (bind alpha "enabled ? (rollOver && !(mouseDown) ? 1 : 0.8) : 0.6")
            (style (textColor = "0xFFFFFF") (marginLeft = "4px"))
            (bind text "_text")
        )

        (macro MOUSE_HANDLER "enabled")
    )
)