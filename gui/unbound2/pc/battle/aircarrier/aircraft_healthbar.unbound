
(def css $ColorStatePlaneLowHP()
	(backgroundColor = 0xFFFF3300)
)
(def css $ColorStatePlaneHalfHP()
	(backgroundColor = 0xFFFF9900)
)
(def css $ColorStatePlaneFullHP()
	(backgroundColor = 0xFF4CE8AA)
)
(def css $ColorStatePlaneDamage()
	(backgroundColor = 0xFFFFFFFF)
)

(def css $TextColorHUDPositivePC ()
	(textColor = 0xFF4CE8AA)
)

(def css $TextColorHUDWarningPC ()
	(textColor = 0xFFFF9933)
)

(def css $TextColorHUDCriticalPC ()
	(textColor = 0xFFFE4D2A)
)

(def css $TextColorHUDDeadPC ()
	(textColor = 0xFF111111)
)

(def css $AirplanesHealthBarAttackerText ()
	(extends $TextDefaultWhiteBold)
	(fontSize = 12)
)

(def constant AircraftHealthbarSettings {
		TOTAL_BAR_WIDTH: 314,
		
		PLANE_ICON_NAMES: [
			'plane_fighter_own_bg',
			'plane_bomber_own',
			'plane_bomber_own_AP',
			'plane_torpedo_own',
			'plane_torpedo_own_deepwater',
			'plane_fighter_own_AP'
		],
		PLANE_ICON_WIDTHS: [19px, 9px, 9px, 15px, 19px, 19px],
		PLANE_ICON_HEIGHTS: [19px, 21px, 21px, 21px, 21px, 19px],
		PLANE_ICON_TOP_OFFSETS: [-4px, -5px, -5px, -5px, -5px, -4px],
		HP_ATTACKER_PADDING: 22
})

(def element AircraftHealthbar () layout=true
	(scope
		(var ownCarrierEntity:gfx = "$datahub.getSingleEntity(CC.aircarrier)")
		(var aircarrier:gfx = "ownCarrierEntity.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
		(var ownSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, activeSquadron)")
		(var maxPlanes:number = "ownSquadronEntity.health.max" (event "ownSquadronEntity.health.evValueChanged"))
		(var currentHP_points:number = "ownSquadronEntity.squadron.currentHP" (event "ownSquadronEntity.squadron.evCurrentHPChanged"))
		(var maxHP_points:number = "ownSquadronEntity.squadron.maxHP" (event "ownSquadronEntity.squadron.evMaxHPChanged"))
		(var healthPercent:number = "maxHP_points ? currentHP_points / maxHP_points : 0")
		(var planeNameIDS:str = "ownSquadronEntity.plane.planeNameIDS")
		(var levelRome:str = "ownSquadronEntity.plane.levelRome")
		(var ammoType:number = "ownSquadronEntity.plane.ammoType")
		(var aircraftCol:gfx = "$datahub.getCollection(CC.aircraft)")
		(var subColName:str = "'bySquadron.'+ownSquadronEntity.squadron.id" (event "aircarrier.evStateChanged"))
		(var hpCollection:gfx = "aircraftCol.getChildByPath(subColName)" (event "aircraftCol.evAdded") (event "aircraftCol.evRemoved"))
		(var hpCount:number = "hpCollection.items.length" (event "hpCollection.evAdded") (event "hpCollection.evRemoved"))
		(var attackerSize:number = "ownSquadronEntity.ownSquadron.attackerSize")
		(var notchesNum:number = "attackerSize ? floor(maxPlanes/attackerSize) : 0")
		(var healthPointWidth:number = "ceil((AircraftHealthbarSettings.TOTAL_BAR_WIDTH - AircraftHealthbarSettings.HP_ATTACKER_PADDING * notchesNum)/maxPlanes)")
	)

	(style
		(bottom = 128px) (paddingLeft = "-AircraftHealthbarSettings.TOTAL_BAR_WIDTH/2")
	)

	(class $MiddleAlignedAbsolutely)

	(controller $Animation layout=false
		(bindcall play duration=0.1 delay=1 from={alpha:0, visible:0} to={alpha:1, visible:1} killAll=true (bind enabled "currentHP_points > 0"))
		(bindcall play duration=0.1 delay=0.1 from={alpha:1, visible:1} to={alpha:0, visible:0} killAll=true (bind enabled "!(currentHP_points > 0)"))
	)

	(hblock
		(controller $Repeat renderer='AirplanesHealthPointBg' layout=false
			(bind count "maxPlanes")
			(args
				hpWidth = "healthPointWidth"
				attackerSize = "attackerSize"
				maxPlanes = "maxPlanes"
			)
		)
	)

	(block
		(style (position = "absolute"))
		(controller $Repeat renderer='AirplanesHealthBarAttackerId' layout=false
			(bind count "notchesNum")
			(exprs
				(scope
					(bind _healthPointWidth "healthPointWidth")
					(bind _attackerSize "attackerSize")
					(bind _isFullAttacker "hpCount > attackerSize * $index")
				)
			)
		)
	)

	(hblock
		(style (position = "absolute") (left = 1px) (top = 1px))
		(controller $Repeat renderer='AirplanesHealthPoint' layout=false
			(bind count "hpCount")
			(args
				col = "hpCollection"
				hpWidth = "healthPointWidth"
				attackerSize = "attackerSize"
			)
		)
	)

	
	(hblock
		(bind visible "currentHP_points ? true : false")
		(style (position = "absolute") (width = 100%) (top = 12px))

		
		(block
			(style
				(marginLeft = 1px)
				(marginRight = "S")
				(bind width "AircraftHealthbarSettings.PLANE_ICON_WIDTHS[ammoType]")
				(bind height "AircraftHealthbarSettings.PLANE_ICON_HEIGHTS[ammoType]")
				(bind marginTop "AircraftHealthbarSettings.PLANE_ICON_TOP_OFFSETS[ammoType]")
				(bind backgroundImage "'bitmap:' + AircraftHealthbarSettings.PLANE_ICON_NAMES[ammoType]")
			)
		)

		
		(tf
			(style (marginTop = -6px) (width = 200px) (multiline = "false"))
			(class $TextDefaultBoldNM)
			(macro TFMouseEnabled value=false)
			(bind text "levelRome + ' ' + planeNameIDS")
		)
		
		(hblock
			(style (position = "absolute") (right = 1px))
			(tf
				(style (marginRight = 0px))
				(class $TextDefaultBoldNM)
				(macro TFMouseEnabled value=false)
				(bind class "	healthPercent >= 0.75	? '$TextColorHUDPositivePC' :
								healthPercent >= 0.25	? '$TextColorHUDWarningPC' :
								healthPercent > 0		? '$TextColorHUDCriticalPC'
														: '$TextColorHUDDeadPC'"
				)
				(bind text "formatSeparator(currentHP_points)")
			)
			(tf
				(class $TextDefaultNM)
				(macro TFMouseEnabled value=false)
				(bind text "'/' + formatSeparator(maxHP_points)")
			)
		)
	)
)

(def element AirplanesHealthPointBg (hpWidth:number, attackerSize:number, maxPlanes:number) layout=true
	(style
		(marginRight = "($index+1)%attackerSize == 0 && $index < maxPlanes-1 ? AircraftHealthbarSettings.HP_ATTACKER_PADDING: 0")
	)
	(mc hud_bar_bg_sliced
		(style
			(bind width "hpWidth")
		)
	)
)


(def element AirplanesHealthPoint (col:gfx, hpWidth:number,attackerSize:number) layout=true
	(scope
		(event evUpdatePrevState)
		(event evPlayAnimationBlink)
		(event emptyEventHack) 

		(var entity:gfx = "col.items[$index]" (event "col.evUpdated") (event "col.evMoved") (event "col.evAdded") (event "col.evRemoved"))

		(var healthComponent:gfx = "entity.health")
		(var aircraftAnim:gfx = "entity.aircraftAnimation")
		(var currentState:number = "healthComponent.value" (event "healthComponent.evValueChanged"))

		(var airplaneColorStatus:str ="	(currentState	==	0)		? '$ColorStatePlaneFullHP' :
										(currentState	==	1)		? '$ColorStatePlaneHalfHP'
																	: '$ColorStatePlaneLowHP'"
		)

		(var prevState:number = "currentState" watch=false (event "evUpdatePrevState")) 
	)
	(dispatch evPlayAnimationBlink (event "prevState < currentState ? healthComponent.evValueChanged : emptyEventHack"))
	(dispatch evUpdatePrevState (event "evPlayAnimationBlink"))


	(bind class "airplaneColorStatus")

	
	(style
		(height = 2)
		(marginRight = "($index+1)%attackerSize == 0 && $index < col.items.length - 1 ? AircraftHealthbarSettings.HP_ATTACKER_PADDING + 2: 2")
		(bind width "hpWidth-2")
	)

	
	(block
		(class $FullsizeAbsolute)
		(class $ColorStatePlaneDamage)
		(bind alpha 0)
		(controller $Animation layout=false
			(bindcall play duration=0.25 delay=0.0 from={alpha:0} to={alpha:1} killAll=true (event "evPlayAnimationBlink")) 
			(bindcall play duration=0.25 delay=0.3 from={alpha:1} to={alpha:0} (event "evPlayAnimationBlink"))
		)
	)
)

(def element AirplanesHealthBarAttackerId () layout=true
	(scope
		(var _healthPointWidth:number = 0)
		(var _attackerSize:number = 0)
		(var _isFullAttacker:bool = false)
	)
	(style
		(position = "absolute")
		(top = -8px)
		(bind left "(_healthPointWidth * _attackerSize + AircraftHealthbarSettings.HP_ATTACKER_PADDING) * $index - 10")
	)
	(tf
		(class $AirplanesHealthBarAttackerText)
		(style (align = "right"))
		(bind text "$index + 1")
	)
	(bind alpha "_isFullAttacker ? 0.7 : 0.3")
)


