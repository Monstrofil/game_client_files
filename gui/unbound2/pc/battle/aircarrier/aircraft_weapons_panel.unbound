
(def constant SLOT_WIDTH 60)
(def constant SLOT_HEIGHT 60)

(def css $TextColorReloadFx ()
	(textColor = 0xFFFCE389)
)


(def element AircraftCarrierWeaponsPanel() layout=true
	(scope
		(var ownCarrierEntity:gfx = "$datahub.getSingleEntity(CC.aircarrier)")
		(var aircarrier:gfx = "ownCarrierEntity.aircarrier")
		(var activeSquadron:number = "aircarrier.activeSquadron" (event "aircarrier.evStateChanged"))
	)

	(style (position = "absolute") (bottom = 20px) (marginLeft = -50%) (height = 58px))

	(element CarrierControlPanel carrierEntity="ownCarrierEntity"
		(scope
			(bind _activeSquadron "activeSquadron")
		)
	)
	(block
		(style (position="absolute"))
		(element SquadronControlPanel
			(scope
				(bind _activeSquadron "activeSquadron")
			)
		)
	)
)

(def element ATBAOffIndicator()  layout=true
	(scope
		(var controlEntity:gfx = "$datahub.getPrimaryEntity(CC.simpleControl, 1)")	
    	(var atbaSwitchedOn:bool =  "controlEntity.simpleControl.enabled" (event "controlEntity.simpleControl.evChanged"))
	)
	(style (position = "absolute") (paddingLeft = -29px) (paddingTop = -3px) )
	(mc atbaOffIndicator
		(bind isShown "atbaSwitchedOn == false")
	)
)


(def element CarrierControlPanel (carrierEntity:gfx) layout=true
	(scope
		(var _activeSquadron:number = -1)
		(var ownSquadronCollection:gfx = "$datahub.getCollection(CC.ownSquadron)")
		(var consumablesCollection:gfx = "$datahub.getCollection(CC.battleConsumable)")
		(var shipConsumablesSubCollection:gfx = "consumablesCollection.getChildByPath('shipConsumables')")
	)
	(style (flow = "Flow.HORISONTAL") (marginLeft = -50%) (paddingBottom = 140px))

	(visible = "_activeSquadron == ActiveSquadron.NONE ? 1 : 0")
	(alpha = "_activeSquadron == ActiveSquadron.NONE ? 1 : 0")
	(y = "_activeSquadron == ActiveSquadron.NONE ? 0 : 5")

	(controller $Animation layout=false
		(bindcall play duration=0.2 delay=0.00 from={alpha:0, visible:0, y:5} to={alpha:1, visible:1, y:0} killAll=true (bind enabled "(_activeSquadron == ActiveSquadron.NONE)"))
		(bindcall play duration=0.2 delay=0.00 from={alpha:1, visible:1, y:0} to={alpha:0, visible:0, y:5} killAll=true (bind enabled "!(_activeSquadron == ActiveSquadron.NONE)"))
	)

	(element ATBAOffIndicator)

	(hblock
		(controller $Repeat renderer='CarrierControlItem' layout=false
			(bind count "ownSquadronCollection.items.length" (event "ownSquadronCollection.evAdded") (event "ownSquadronCollection.evRemoved"))
			(args
				col = "ownSquadronCollection"
				carrierEntity = "carrierEntity"
			)
		)
	)

	(hblock
		(style (marginLeft = 16px))
		(controller $Repeat renderer='ConsumableControlItem' layout=false
			(bind count "shipConsumablesSubCollection.items.length" (event "shipConsumablesSubCollection.evAdded") (event "shipConsumablesSubCollection.evRemoved"))
			(args
				isAircarrier = true
			)
			(exprs
				(scope
					(bind col "shipConsumablesSubCollection")
				)
			)
		)
	)
)

(def element SquadronControlPanel() layout=true

	(scope
		(var selfAvatarEntity:gfx =  "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isAlive:bool = "selfAvatarEntity.health.isAlive"  (event "selfAvatarEntity.health.evIsAliveChanged"))
		(var _activeSquadron:number = -1)
		(var currentSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, _activeSquadron)")
		(var squadronComponent:gfx = "currentSquadronEntity.squadron")
		(var battleConsumableCol:gfx = "$datahub.getCollection(CC.battleConsumable)")
		(var squadronConsumablesCol:gfx = "battleConsumableCol.getChildByPath('bySquadron.' + squadronComponent.id)")
		(var ownSquadronCol:gfx = "$datahub.getCollection(CC.ownSquadron)")
	)

	(style (flow = "Flow.HORISONTAL") (marginLeft = -50%) (paddingBottom = 140px))

	(visible = "_activeSquadron != ActiveSquadron.NONE ? 1 : 0")
	(alpha = "_activeSquadron != ActiveSquadron.NONE ? 1 : 0")
	(y = "_activeSquadron != ActiveSquadron.NONE ? 0 : 5")

	(controller $Animation layout=false
		(bindcall play duration=0.2 delay=0.00 from={alpha:0, visible:0, y:5} to={alpha:1, visible:1, y:0} killAll=true (bind enabled " (_activeSquadron != ActiveSquadron.NONE)"))
		(bindcall play duration=0.2 delay=0.00 from={alpha:1, visible:1, y:0} to={alpha:0, visible:0, y:5} killAll=true (bind enabled " (_activeSquadron == ActiveSquadron.NONE)"))
	)

	(hblock
		(element SquadronControlWeapon
			(scope
				(bind _activeSquadron "_activeSquadron")
			)
		)
	)
	(hblock
		(style (marginLeft = 16px))
		(controller $Repeat renderer='ConsumableControlItem' layout=false
			(bind count "squadronConsumablesCol.items.length" (event "squadronConsumablesCol.evAdded") (event "squadronConsumablesCol.evRemoved"))
			(exprs
				(scope
					(bind col "squadronConsumablesCol")
				)
			)
		)
	)

	(hblock
		(element SquadronControlItemReturn
			(scope
				(bind _activeSquadron "_activeSquadron")
			)
		)
	)
	
	(hblock
		(style (position = "absolute")(left = 100%) (bottom = "SLOT_HEIGHT/2") (paddingLeft = 10px) ) 
		(bind visible "isAlive")
		(controller $Repeat renderer='PlanePullItem' layout=false
			(bind count "ownSquadronCol.items.length" (event "ownSquadronCol.evAdded") (event "ownSquadronCol.evRemoved"))
			(args
				col = "ownSquadronCol"
			)
		)
	)
)

(def element CarrierControlItem (col:gfx, carrierEntity:gfx) layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)
		
		(var squadronEntity:gfx = "col.items[$index]" (event "col.evUpdated") (event "col.evMoved") (event "col.evAdded") (event "col.evRemoved"))
		(var aircarrier:gfx = "carrierEntity.aircarrier")
		(var isSelected:bool = "aircarrier.selectedSquadron == squadronEntity.ownSquadron.id" (event "aircarrier.evSelectedSquadronChanged"))
		(var ammoType:str = "squadronEntity.plane.ammoType")
		(var squadronID:number = "squadronEntity.ownSquadron.id")
		(var curPlanesInHangar:number = "squadronEntity.hangar.planeCount" (event "squadronEntity.hangar.evChanged"))
		(var maxSquadPlanes:number = "squadronEntity.health.max")
		(var curSquadPlanes:number = "squadronEntity.health.value" (event "squadronEntity.health.evValueChanged"))

		(var consumePostfix:str = "curSquadPlanes == 0 ? '_empty' : ''")
		(var itemImageUrl:str = "'../aircraft/planetype_' + ammoType + consumePostfix + '.png'")

		(var cmdEntity:gfx =  "$datahub.getPrimaryEntity(CC.commandMappingCommandName, 'CMD_SQUADRON_' + $index)")
		(var commandId:number = "cmdEntity.commandMappingCommand.id" (event "cmdEntity.commandMappingCommand.evChanged"))

		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var canLaunchSquadrons:bool = "aircarrier.canLaunchSquadrons" (event "aircarrier.evCanLaunchSquadronsChanged"))
		(var canLaunchRemainTimestamp:number = "aircarrier.canLaunchTimestamp - timerEntity.timer.currentTime" (event "aircarrier.evCanLaunchTimestampChanged"))

		(var battleStateComponent:gfx = "$datahub.getSingleComponent(CC.battleState)")
		(var battleState:number = "battleStateComponent.battleState" (event "battleStateComponent.evBattleStateChanged"))
	)

	(bindcall externalCall 'direct.action' "['aircarrier.selectSquadron', [squadronID]]" on='click' init=false)
	(dispatch evMouseOver on='rollOver' init=false)
	(dispatch evMouseOut on='rollOut' init=false)

	(mc 'lesta.libs.unbound2.BattleHintBridgeMC'
		(bindcall showBattleTooltip "BattleHintType.SQUADRON" "$index" init=false (event "evMouseOver"))
		(bindcall hideBattleTooltip init=false (event "evMouseOut"))
	)

	(element SlotItem
		(scope
			(bind _itemImageUrl "itemImageUrl")
			(bind _charges "curSquadPlanes")
			(bind _cmd "commandId")
			(bind _hideCharges true)
		)
	)


	
	(block
 		(style (position = "absolute") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT") (left = 6px))
 		(bind visible "!canLaunchSquadrons")
 		(block
 			(style (position = "absolute") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT"))
 			(element SlotReloadFX
 				(scope
 					(bind _reloadEntityId "carrierEntity.id")
 					(bind _atWork false)
 					(bind _percentPassed 0)
 					(bind _timeRemainStamp "canLaunchRemainTimestamp")
 				)
 			)
 		)
 	)

 	
	(block
		(style
			(position = "absolute")
			(left = 2px)
			(top = -4px)
			(backgroundImage = 'url:../aircraft/isSelected.png')
		)
		(mouseEnabled = false)
		(mouseChildren = false)
		(bind visible "isSelected")
	)


	
	(block
		(style (position = "absolute") (bottom = -28px) (left = 36px))

		(mc HotkeyAnimation
			(style (height = 21px))

			(bind commandId "commandId")
			(bind active "curSquadPlanes != 0")
		)
	)

	(block
		(style (position = "absolute") (top = -6px) (left = 5px))
		(element PlaneReloadProgress
			(scope
				(bind _squadronEntityId "squadronEntity.id")
				(bind _width "SLOT_WIDTH")
			)
		)
	)

)

(def element ConsumableControlItem(isAircarrier:bool = false) layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)

		(var col:gfx = "null") 
		(var itemsList:array = "col.items" (event "col.evUpdated"))
		(var consumableEntity:gfx = "itemsList[$index]" (event "col.evUpdated"))
		(var battleConsumable:gfx = "consumableEntity.battleConsumable")
		(var consumableName:str = "battleConsumable.ident")
		(var consumableCmd:str = "battleConsumable.cmd")
		(var consumableIndex:number = "battleConsumable.index"  (event "battleConsumable.evStateChanged"))
		(var consumableNum:number = "battleConsumable.consumeNum" (event "battleConsumable.evConsumeNumChanged"))
		(var consumableState:number = "battleConsumable.state" (event "battleConsumable.evStateChanged"))
		(var ownerSquadronId:number = "battleConsumable.ownerSquadronId" (event "battleConsumable.evStateChanged"))

		(var atWork:bool = "consumableState == 1")
		(var isReloading:bool = "consumableState == 2")
		(var isEmpty:bool = "consumableState == 3")

		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "consumableEntity ? consumableEntity.countDown : null"  (event "consumableEntity.battleConsumable.evStateChanged"))
		(var timeRemainStamp:number = "countdown && countdown.endTime ? countdown.endTime - timerEntity.timer.currentTime : 0" (event "countdown.evEndTimeChanged"))

		(var consumePostfix:str = "consumableNum == 0 && !atWork ? '_empty' : ''")
		(var itemImageUrl:str = "'../consumables/' + consumableName + consumePostfix + '.png'")

		
		(var percentPassedTemp:number = "countdown && countdown.duration ? timeRemainStamp/countdown.duration : 0" (event "countdown.evDurationChanged"))
		(var percentPassedTemp2:number = "atWork ? percentPassedTemp : 1-percentPassedTemp")
		(var percentPassed:number = "percentPassedTemp2 > 1 ? 1 : (percentPassedTemp2 < 0) ? 0 : percentPassedTemp2")

		(var cmdEntity:gfx =  "$datahub.getPrimaryEntity(CC.commandMappingCommandName, consumableCmd)")
		(var commandId:number = "isAircarrier ? 0 : cmdEntity.commandMappingCommand.id" (event  "cmdEntity.commandMappingCommand.evChanged"))
	)

	(bindcall externalCall 'direct.action' "['battle.useConsumable', [{consumableIndex: consumableIndex, squadronId: ownerSquadronId}]]" on='click' watch=false init=false (enabled = "!isAircarrier"))
	(dispatch evMouseOver on='rollOver')
	(dispatch evMouseOut on='rollOut')

	(mc 'lesta.libs.unbound2.BattleHintBridgeMC'
		(bindcall showBattleTooltip "BattleHintType.CONSUME" "consumableEntity.id" init=false watch=false (event "evMouseOver"))
		(bindcall hideBattleTooltip init=false (event "evMouseOut"))
	)

	(element SlotItem
		(scope
			(bind _itemImageUrl "itemImageUrl")
			(bind _charges "consumableNum")
			(bind _cmd "commandId")
		)
	)

	
	(block
		(style (position = "absolute") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT") (left = 6px))
		(bind visible "isReloading || atWork")
		(block
			(style (position = "absolute") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT"))
 			(element SlotReloadFX
 				(scope
 					(bind _reloadEntityId "consumableEntity.id")
 					(bind _atWork "atWork")
					(bind _percentPassed "percentPassed")
 					(bind _timeRemainStamp "timeRemainStamp")
 				)
 			)
		)
	)

	
	(block
		(style
			(position = "absolute")
			(width = "SLOT_WIDTH")
			(height = "SLOT_HEIGHT")
			(left = 6)
			(bottom = 0)
		)
		(controller $FxInstance lifetime=0.5
			(bind renderer 'SlotReloadCountdownEndFX')
			(args _width="SLOT_WIDTH" _height="SLOT_HEIGHT")
			(bindcall create (event "consumableEntity.battleConsumable.evWorkStarted"))
		)
	)

	(block
		(style
			(backgroundImage = 'url:../aircraft/isSelected.png')
			(position = "absolute")
			(bind width "SLOT_WIDTH")
			(bind height "SLOT_HEIGHT")
			(left = 2)
			(top = -4)
		)

		(bind visible "atWork")

		(controller $Animation
			(play duration=1.0
							from={alpha: 1}
							to={alpha: 0.3}
							repeatCount=-1
							killAll = "true"
			)
			(bind enabled "atWork")
		)
	)

	
	(mc HotkeyAnimation
		(style (position = "absolute") (bottom = -28px) (left = 36px) (height = 21px))
		(bind visible "commandId")
		(bind commandId "commandId")
		(bind active "!(atWork || isReloading || consumableNum == 0)")
	)
	(block
		(style
			(position = "absolute") (width = 46px) (height = 16px) (left = 13px) (bottom = -16px)
			(backgroundImage = 'url:../aircraft/key_auto_label.png')
		)
		(alpha = 0.8)
		(bind visible "commandId == 0")
	)
)

(def element SquadronControlWeapon() layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)

		(var _activeSquadron:number = -1)
		(var currentSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, _activeSquadron)")
		(var planeComponent:gfx = "currentSquadronEntity.plane")
		(var healthComponent:gfx = "currentSquadronEntity.health")
		(var ownSquadronComponent:gfx = "currentSquadronEntity.ownSquadron")
		(var ammoType:number = "planeComponent.ammoType")
		(var numPlanes:number = "healthComponent.value" (event "healthComponent.evValueChanged"))
		(var attackState:number = "ownSquadronComponent.attackState" (event "ownSquadronComponent.evAttackStateChanged"))
		(var flightState:number = "ownSquadronComponent.state" (event "ownSquadronComponent.evStateChanged"))

		(var cmdEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommandName, 'CMD_WEAPON_0')")
		(var commandId:number = "cmdEntity.commandMappingCommand.id" (event "cmdEntity.commandMappingCommand.evChanged"))

		(var weaponImageUrl:str ="'../aircraft/planetype_weapon_' + ammoType + '.png'")

		(var atWork:bool = "attackState == SquadronAttackState.AIMING")
		(var isLocked:bool = "flightState == AIRPLANE_FLIGHT_STATE_LAUNCHING")

		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var countdown:gfx = "currentSquadronEntity.countDown" (event "ownSquadronComponent.evAttackStateChanged"))
		(var timeRemainStamp:number = "currentSquadronEntity && currentSquadronEntity.countDown? currentSquadronEntity.countDown.endTime - timerEntity.timer.currentTime : 0" (event "ownSquadronComponent.evAttackStateChanged") (event "currentSquadronEntity.countDown.evEndTimeChanged"))
		(var showReload:bool =  "currentSquadronEntity.countDown.endTime ? (timeRemainStamp > 0 && (currentSquadronEntity.countDown.endTime - timerEntity.timer.currentTime > 0)) : false" (event "timerEntity.timer.evFrequent"))

		
		(var percentPassedTemp:number = "countdown && countdown.duration ? timeRemainStamp/countdown.duration : 0" (event "countdown.evDurationChanged"))
		(var percentPassedTemp2:number = "atWork ? percentPassedTemp : 1-percentPassedTemp")
		(var percentPassed:number = "percentPassedTemp2 > 1 ? 1 : (percentPassedTemp2 < 0) ? 0 : percentPassedTemp2")
	)

	(dispatch evMouseOver on='rollOver' init=false)
	(dispatch evMouseOut on='rollOut' init=false)

	(mc 'lesta.libs.unbound2.BattleHintBridgeMC'
		(bindcall showBattleTooltip "BattleHintType.SQUADRON_WEAPON" "_activeSquadron" init=false watch=false (event "evMouseOver"))
		(bindcall hideBattleTooltip init=false (event "evMouseOut"))
	)

	(element SlotItem
		(scope
			(bind _itemImageUrl "weaponImageUrl")
			(bind _isLocked "isLocked")
			(bind _cmd "commandId")
			(bind _hideCharges true)
		)
	)

	
	(block
		(style (position = "absolute") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT") (left = 6px))
		(bind visible "showReload")
		(element SlotReloadFX
			(scope
				(bind _reloadEntityId "currentSquadronEntity.id")
				(bind _atWork "atWork")
				(bind _percentPassed "percentPassed")
				(bind _timeRemainStamp "timeRemainStamp")
			)
		)
	)

	
	(block
		(style (position = "absolute") (bottom = -29px) (left = 36px))

		(mc HotkeyAnimation
			(style (height = 21px))
			(bind commandId "commandId")
			(bind active "!(isLocked || atWork || showReload || numPlanes == 0)")
			(.item
				(gotoAndStop 'toggle')
			)
		)
	)

	
	(block
		(style
			(position = "absolute")
			(left = 2px)
			(top = -4px)
			(backgroundImage = 'url:../aircraft/isSelected.png')
		)
		(mouseEnabled = false)
		(mouseChildren = false)
	)

)

(def element SquadronControlItemReturn() layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)

		(var _activeSquadron:number = -1)
		(var currentSquadronEntity:gfx = "$datahub.getPrimaryEntity(CC.ownSquadron, _activeSquadron)")
		(var ownSquadronComponent:gfx = "currentSquadronEntity.ownSquadron")

		(var attackState:number = "ownSquadronComponent.attackState"	(event "ownSquadronComponent.evAttackStateChanged"))
		(var flightState:number = 	"ownSquadronComponent.state"	(event "ownSquadronComponent.evStateChanged"))

		(var cmdEntity:gfx =  "$datahub.getPrimaryEntity(CC.commandMappingCommandName, 'CMD_LAND')")
		(var commandId:number = "cmdEntity.commandMappingCommand.id" (event "cmdEntity.commandMappingCommand.evChanged"))

		(var selfAvatarEntity:gfx =  "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isAlive:bool = "selfAvatarEntity.health.isAlive"  (event "selfAvatarEntity.health.evIsAliveChanged"))

		(var itemImageUrl:str ='../aircraft/plane_return.png')
		(var isLocked:bool = "(attackState != 0) || !isAlive || (flightState == AIRPLANE_FLIGHT_STATE_LAUNCHING)")
	)

	(mc 'lesta.libs.unbound2.BattleHintBridgeMC'
		(bindcall showBattleTooltip "BattleHintType.SIMPLE" 'IDS_BATTLE_HINT_SQUADRON_CONTROL_RETURN' init=false (event "evMouseOver"))
		(bindcall hideBattleTooltip init=false (event "evMouseOut"))
	)
	(dispatch evMouseOver on='rollOver')
	(dispatch evMouseOut on='rollOut')

	(element SlotItem
		(scope
			(bind _itemImageUrl "itemImageUrl")
			(bind _isLocked "isLocked")
			(bind _cmd "commandId")
		)
		
		(block
			(style (width="SLOT_WIDTH")(height="SLOT_HEIGHT")(backgroundColor=0x00FFFFFF)(position="absolute"))
			(bind mouseEnabled "!isLocked")
			(bind mouseChildren "!isLocked")
			(bindcall externalCall 'direct.action' "['aircarrier.landPlane', []]" on='click' init=false)
		)
	)

	
	(block
		(style (position = "absolute") (bottom = -28px) (left = 36px))
		(mc HotkeyAnimation
			(style (height = 21px))
			(bind commandId "commandId")
			(bind active "!isLocked")
		)
	)


)

(def element SlotItem() layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)

		(var _itemImageUrl:str = '')
		(var _charges:number = 0)
		(var _cmd:number = 0)
		(var _hideCharges:bool = false)
		(var isSelectable:bool = "_cmd")
		(var _isLocked:bool = false)
		(var hoverItemImageUrl:str = "_isLocked	? 'url:../aircraft/isDisabled.png' : 'url:../aircraft/isHovered.png'")
	)

	(style (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT") (marginRight = 6px) (marginLeft = 6px))

	(bind mouseEnabled "isSelectable")
	(bind mouseChildren "isSelectable")
	(dispatch evMouseOver on='rollOver')
	(dispatch evMouseOut on='rollOut')

	
	(block
		(style
			(position = "absolute")
			(bind backgroundImage "'url:' + _itemImageUrl")
		)
	)

	
	(block
		(style
			(position = "absolute")
			(bind backgroundImage "hoverItemImageUrl")
		)
		(alpha = 0)
		(visible = 0)

		(controller $Animation layout=false
			(bindcall play duration=0.15 delay=0.0 from={alpha:0, visible:0} to={alpha:1, visible:1} killAll=true init=false (event "evMouseOver"))
			(bindcall play duration=0.15 delay=0.0 from={alpha:1, visible:1} to={alpha:0, visible:0} killAll=true  init=false (event "evMouseOut"))
		)
	)

	
	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = 0x80000000))
		(alpha = 0)
		(visible = 0)
		(block
			(style
				(backgroundImage = 'url:../aircraft/icon_lock.png')
			)
			(class $FullsizeAbsolute)
		)
		(controller $Animation layout=false
			(bindcall play duration=0.1 delay=0.0 from={alpha:0, visible:0} to={alpha:1, visible:1} killAll=true (bind enabled "_isLocked"))
			(bindcall play duration=0.1 delay=0.0 from={alpha:1, visible:1} to={alpha:0, visible:0} (bind enabled "!_isLocked"))
		)
	)

	
	(tf
		(style (position = "absolute") (textAlign = "right") (top = -1px) (right = 3px))
		(bind visible "(_charges > 0 && !_hideCharges)")
		(class $TextDefaultBoldNM)
		(bind text "_charges")
	)
)

(def element SlotReloadFX()  layout=true
	(scope
		(var _reloadEntityId:number = -1)
		(var _atWork:bool = false)
		(var _timeRemainStamp:number = 0)
		(var _percentPassed:number = 0)

		(var reloadEntity:gfx = "_reloadEntityId > -1 ? $datahub.getEntity(_reloadEntityId) : null")
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")

		
		(var timeRemainForTextTemp:number = "reloadEntity && reloadEntity.countDown ? reloadEntity.countDown.endTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent"))
		(var timeRemainForText:number = "timeRemainForTextTemp < 0 ? 0 : (timeRemainForTextTemp > 10 ? round(timeRemainForTextTemp) : timeRemainForTextTemp)")

		(var formatDigitsNumber:number = "timeRemainForText < 10 ? 1 : 0")
		(var isShowMinutes:bool = "timeRemainForText >= 60")
	)

	(style (align ="center|middle") (width = "SLOT_WIDTH") (height = "SLOT_HEIGHT"))

	(mouseChildren = false)
	(mouseEnabled = false)

	
	
	
	
	
	
	
	
	
	
	
	
	

	(block
		(class $FullsizeAbsolute)
		(style
			(position = "absolute")
			(bind backgroundImage "_atWork ? 'bitmap:gun_keycontrol_ready_tint' : 'bitmap:gun_keycontrol_reload_tint'")
			(backgroundSize = "cover")
		)
		
		(bind alpha "_atWork ? 1 : 0")
		(controller $Animation layout=false
			(bindcall play duration="_timeRemainStamp" delay=0.0 from="{alpha: _atWork ? 1 : 0.5 + (1 - _percentPassed) * 0.5}" to="{alpha: _atWork ? 1 : 0.5}" killAll=true (bind enabled "_timeRemainStamp > 0"))
		)
	)

	(block
		(class $FullsizeAbsolute)

		(block
			(style
				(position = "absolute")
				(width = 100%)
				(backgroundColor = 0xFF000000)
				(height = "SLOT_HEIGHT")
			)
			(controller $Animation layout=false
				(bindcall play duration="_timeRemainStamp" delay=0.0 from="{scaleY: 1 - _percentPassed}" to="{scaleY: _atWork ? 1 : 0}" killAll=true (bind enabled "_timeRemainStamp > 0"))
			)
			(isMask = true)
		)

		(block
			(style
				(position = "absolute")
				(backgroundImage = "'bitmap:gun_keycontrol_bg'")
				(backgroundSize = "cover")
				(width = "SLOT_WIDTH + 6")
				(height = "SLOT_HEIGHT + 6")
				(hcenter = 0px)
				(vcenter = 0px)
			)
		)
	)
	(block
		(style
			(bind backgroundColor "_atWork ? 0xDD4CE8AA : 0xFFCC9933")
			(position = "absolute")
			(width = "SLOT_WIDTH-2")
			(height = 1px)
			(left = 1px)
		)
		(controller $Animation layout=false
			(bindcall play duration="_timeRemainStamp" delay=0.0 from="{top: (1 - _percentPassed) * (SLOT_HEIGHT) }" to="{top: _atWork ? SLOT_HEIGHT - 1: 0}" killAll=true (bind enabled "_timeRemainStamp > 0"))
		)
	)

	(tf
		(class $ActionPanelTimerCountdown)
		(macro TFMouseEnabled value=false)
		(bind class "_atWork ? '$TextColorHUDPositivePC' : '$TextColorReloadFx'")
		(bind text "countdownFormat(timeRemainForText, formatDigitsNumber, isShowMinutes)")
	)
)


(def element PlaneReloadProgress() layout=true
	(scope
		
		(var _squadronEntityId:number = -1)
		(var _width:number = 0)
		
		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))

		(var squadronEntity:gfx = "$datahub.getEntity(_squadronEntityId)")

		(var curPlanesInHangar:number = "squadronEntity.hangar.planeCount" (event "squadronEntity.hangar.evChanged"))
		(var maxPlanesInHangar:number = "squadronEntity.hangar.maxPlaneCount" (event "squadronEntity.hangar.evChanged"))

		
		
		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var timeToRestore:number = "squadronEntity.hangar.timeToRestore" (event "squadronEntity.hangar.evChanged"))
		(var timeRemainAny:number = "squadronEntity.hangar ? squadronEntity.hangar.restoreTime - timerEntity.timer.currentTime : 0" (event "timerEntity.timer.evFrequent"))
		(var timeRemain:number = "timeRemainAny > 0 ? timeRemainAny : 0")
		(var timePassed:number = "timeToRestore - timeRemain")
		(var timeRemainForText:number = "timeRemain > 10 ? round(timeRemain) : timeRemain")

		(var reloadPercentAny:number = "timeToRestore ? timePassed/timeToRestore : 0")
		(var reloadPercent:number = "reloadPercentAny > 1 ? 1 : (reloadPercentAny < 0 ? 0 : reloadPercentAny)")

		(var maxSquadPlanes:number = "squadronEntity.health.max"	(event "squadronEntity.health.evValueChanged"))
		(var curSquadPlanes:number = "squadronEntity.health.value"	(event "squadronEntity.health.evValueChanged"))

		(var attackerSize:number = "squadronEntity.ownSquadron.attackerSize")

		(var numAttackers:number = "attackerSize ? maxSquadPlanes/attackerSize : 0")
		(var squadPlanesReady:number = "curPlanesInHangar < maxSquadPlanes ? curPlanesInHangar : maxSquadPlanes")

		(var planesInNotFullAttacker:number = "attackerSize ? (squadPlanesReady % attackerSize) : 0")
		(var fullAttakers:number = "attackerSize ? floor(squadPlanesReady / attackerSize) : 0")

		(var attackerStatusBarSize:number = "numAttackers ? round(_width / numAttackers) : 0")
		(var hangarStatusBarSize:number =  "maxPlanesInHangar ? (curPlanesInHangar / maxPlanesInHangar) * (_width - 2) : 0")

		(var restoreAnimation:bool = "curPlanesInHangar < maxPlanesInHangar && timeRemain > 0 ")
		(var formatDigitsNumber:number = "timeRemainForText < 10 ? 1 : 0")
		(var isShowMinutes:bool = "timeRemainForText >= 60")
	)

	(style (marginLeft = 1px) (align = "center"))

	(hblock
		(bind visible "!altVision")
		
		(style (marginTop = -11px) (paddingLeft = 4px) (paddingBottom=2px))

		(tf
			(style (paddingTop=2px))
			(alpha = 0.8)
			(macro TFMouseEnabled value=false)
			(bind class "curPlanesInHangar >= maxSquadPlanes	? '$TextDefaultBold13NM'
																: '$TextDefault13NM'")

			(bind text "squadPlanesReady")
		)
		(block
			(style (marginTop = 1px) (marginLeft = -3px))
			(tf
				(alpha = 0.8)
				(macro TFMouseEnabled value=false)
				(class $TextDefault12NM)
				(bind text "'/' + maxSquadPlanes")
			)
		)
	)
	(hblock
		(bind visible "altVision")
		
		(style (marginTop = -11px) (paddingLeft = 4px) (paddingBottom=2px))
		(tf
			(style (paddingTop=2px))
			(alpha = 0.8)
			(class $TextDefault13NM)
			(macro TFMouseEnabled value=false)
			(bind class "curPlanesInHangar >= maxSquadPlanes	? '$TextDefaultBold13NM'
																: '$TextDefault13NM'"
																)

			(bind text "curPlanesInHangar")
		)
		(block
			(style (marginTop = 1px) (marginLeft = -3px))
			(tf
				(alpha = 0.8)
				(class $TextDefault12NM)
				(macro TFMouseEnabled value=false)
				(bind text "'/' + maxPlanesInHangar")
			)
		)
	)

	(mc hud_bar_bg_sliced
		(style
			(height = 4px)
			(bind width "_width")
		)
	)

	(block
		(bind visible "altVision && restoreAnimation")
		(style
			(position = "absolute")
			(backgroundColor = 0xcc000000)
			(top = 6px)
			(bind  width "_width")
            (bind  height "_width")
            (align = "center|middle")
		)
		(block
			(tf
				(style (marginRight = 1px) (marginLeft = 2px))
				(alpha = 0.8)
				(macro TFMouseEnabled value=false)
				(bind class "_width == 60 ? '$TextDefault27NM' : '$TextDefaultBold13NM'")
				(bind text "countdownFormat(timeRemainForText, formatDigitsNumber, isShowMinutes)")
			)
		)
	)


	(hblock
		(bind visible "!altVision")
		(style (position = "absolute") (paddingTop = 1px))
		(controller $Repeat renderer='AttackerStatusBar' layout=false
			(bind count "numAttackers")
			(exprs
				(scope
					(bind _healthPointWidth "attackerStatusBarSize")
					(bind _fullAttakers "fullAttakers")
					(bind _numAttackers "numAttackers")
					(bind _attackerSize "attackerSize")
					(bind _planesInNotFullAttacker "planesInNotFullAttacker")
					(bind _totalWidth "_width")
				)
			)
		)
	)
	(block
		(bind visible "altVision")
		(style
			(position = "absolute") (height = 2px) (left = 1) (top = 1)
			(backgroundColor = 0xFFD7D7D7)
			(bind width "hangarStatusBarSize")
		)
		
	)
)


(def element AttackerStatusBar() layout=true
	(scope
		(var _healthPointWidth:number = 0)
		(var _fullAttakers:number = 0)
		(var _numAttackers:number = 0)
		(var _totalWidth:number = 0)
		(var _attackerSize:number = 0)
		(var _planesInNotFullAttacker:number = 0)

		(var aircarrierEntity:gfx = "$datahub.getSingleEntity(CC.aircarrier)")
		(var canLaunchSquadrons:bool = "aircarrierEntity.aircarrier.canLaunchSquadrons" (event "aircarrierEntity.aircarrier.evCanLaunchSquadronsChanged"))

		
		(var airplaneColorStatus:str = "canLaunchSquadrons ? ($index < _fullAttakers ? '$ColorStatePlaneFullHP' : '$ColorStatePlaneHalfHP') : '$ColorStatePlaneHalfHP'")
		(var delta:number = "($index == _numAttackers - 1) ? _totalWidth - _numAttackers * _healthPointWidth : 0")
		(var barWidth:number = "_healthPointWidth - 2 + delta")
		(var percentNotFullAttacker:number = "(_attackerSize && _planesInNotFullAttacker) ? _planesInNotFullAttacker / _attackerSize : 0")
	)

	
	
	(style
		(height = 2px) (marginLeft = 1px) (marginRight = 1px)
		(bind width "barWidth")
	)
	(block
		(style
			(position = "absolute")
			(height = 2px)
			(bind width "$index == _fullAttakers  ? percentNotFullAttacker * barWidth :
                    	$index > _fullAttakers    ? 0% :
                    	$index < _fullAttakers    ? 100%
                    	                          : 0%"
            )
		)
		(bind visible "$index <= _fullAttakers")
		(bind class "airplaneColorStatus")


	)
)

(def element SlotReloadCountdownEndFX(_width:number, _height:number) layout=true

	(pivotX = "_width/2")
	(pivotY = "_height/2")

	(style
		(position = "absolute")
		(bind width "_width")
		(bind height "_height")
		(backgroundColor = 0xFFF1F1F1)
		(backgroundSize = "cover")
	)
	(controller $Animation
		(play duration=0.5
						from={scaleX:0.8, scaleY:0.8, alpha: 1}
						to={scaleX:1.5, scaleY:1.5, alpha: 0.0}
						killAll = "true"
		)
	)
)

(def element PlanePullItem(col:gfx) layout=true
	(scope
		(event evMouseOver)
		(event evMouseOut)
		(var squadronEntity:gfx = "col.items[$index]" (event "col.evAdded") (event "col.evRemoved") (event "col.evUpdated"))
		(var ammoType:number = "squadronEntity.plane.ammoType")
		(var curPlanesInHangar:number = "squadronEntity.hangar.planeCount" 	(event "squadronEntity.hangar.evChanged"))

		(var planeIconNames:array = " [	'planes_hangar_rocket_HE',
										'planes_hangar_bomb_HE',
										'planes_hangar_bomb_AP',
										'planes_hangar_torpedo',
										'planes_hangar_torpedo_deepwater']")

		(var planeIconPath:str = "'url:../aircraft/hangar_icons/' + planeIconNames[ammoType] + '.png'")

		(var isRollOver:bool = false)
		(bind isRollOver true  init=false (event "evMouseOver"))
		(bind isRollOver false init=false (event "evMouseOut"))
	)

	(style
		(width = 32px) (top = 26px)
		(bind marginLeft "$index == 0 ? 16 : 14")
	)

	(block
		(style (position = "absolute") (left = -129) (bottom = 24px))
		(bind alpha "isRollOver ? 0 : 0")
		(bind visible "isRollOver")
		(controller $Animation layout=false
			(bindcall play duration=0.1 delay=0.1 to={alpha:1} killAll=true (bind enabled "isRollOver"))
			
		)
		(controller $Instance renderer='PlanePullItemHint'
			(bind enabled "isRollOver")
			(exprs
				(scope
					(bind _squadronEntityId  "squadronEntity.id")
					(bind _planeIconPath  "planeIconPath")
				)
			)
		)
	)

	(block
		(style
			(position = "absolute") (width = 30px) (height = 30px) (left = 1px)
			(bind backgroundImage "planeIconPath")
		)

		(bind alpha "(curPlanesInHangar > 0 ? 1 : 0.5)")
	)

	(block
		(style (position = "absolute") (top = -6px))
		(element PlaneReloadProgress
			(scope
				(bind _squadronEntityId "squadronEntity.id")
				(bind _width 30)
			)
		)
	)

	
	(block
		(style (position = "absolute") (width = 30) (height = 50)(backgroundColor = 0x00FFFFFF) (bottom = -30))
		(dispatch evMouseOver on='rollOver')
		(dispatch evMouseOut on='rollOut')
	)
)

(def element PlanePullItemHint() layout=true
	(scope
		(var _squadronEntityId:number = -1)
		(var _planeIconPath:str = '')
		(var squadronEntity:gfx = "_squadronEntityId > -1 ? $datahub.getEntity(_squadronEntityId) : null")
		(var hangar:gfx = "squadronEntity.hangar")
		(var planeCount:number = "hangar.planeCount")
		(var maxPlanesInSquadron:number = "squadronEntity.health.max")
		(var maxPlaneCount:number = "hangar.maxPlaneCount")
		(var timeToRestore:number = "hangar.timeToRestore")
		(var ammoType:number = "squadronEntity.plane.ammoType")
		(var planesInAttacker:number = "squadronEntity.ownSquadron.attackerSize")
		(var numAttakers:number = "maxPlanesInSquadron ? floor(maxPlanesInSquadron / planesInAttacker) : 0")


		(var squadronType:str = " 		ammoType == SquadronAmmoType.FIGHTER			?  tr('IDS_DOCK_AMMO_TITLE_FIGHTER'):
										ammoType == SquadronAmmoType.BOMBER 			?  tr('IDS_DOCK_AMMO_TITLE_DIVE'):
										ammoType == SquadronAmmoType.BOMBER_AP			?  tr('IDS_DOCK_AMMO_TITLE_DIVE_AP'):
										ammoType == SquadronAmmoType.TORPEDO			?  tr('IDS_DOCK_AMMO_TITLE_BOMBER'):
										ammoType == SquadronAmmoType.TORPEDO_DEEPWATER	?  tr('IDS_DOCK_AMMO_TITLE_BOMBER_DEEPWATER')
																						:  ''"
																						)

		(var attributesNeutral:array ="[	{attributeIDS: 'IDS_HANGAR_SQUADRON_PLANES_CURRENT',		measuredValue: planeCount,			measure: ''},
											{attributeIDS: 'IDS_HANGAR_SQUADRON_PLANES_MAX',			measuredValue: maxPlanesInSquadron,	measure: ''},
											{attributeIDS: 'IDS_HANGAR_SQUADRON_PLANES_TIME_RESTORE',	measuredValue: timeToRestore,		measure: 'IDS_SECOND'},
											{attributeIDS: 'IDS_HANGAR_SIZE',							measuredValue: maxPlaneCount,		measure: ''},
											{attributeIDS: 'IDS_HANGAR_SQUADRON_NUM_ATTACKERS',			measuredValue: numAttakers,			measure: ''},
											{attributeIDS: 'IDS_HANGAR_SQUADRON_PLANES_IN_ATTACKER',	measuredValue: planesInAttacker,	measure: ''}]"
											)
	)
	(style (width = 290px))
	(mouseChildren = false)
	(mouseEnabled = false)

	(block
		(class $FullsizeAbsolute)
		(element HangarTooltipBackground _isInBattle = true)
	)

	
	(block
		(style (width = 100%) (marginTop = 14px) (marginLeft = 2px) (marginRight = 2px) (marginBottom = 2px))
		(hblock
			(style (marginLeft = "SXS") (marginRight = "SXS") (width = 100%) (marginBottom = "S"))
			(block
				(style
					(width = 30px) (height = 30px)
					(bind backgroundImage "_planeIconPath")
				)
			)
			(tf
				(style (marginLeft = "SXS") (width = 100%)(marginTop = 2px))
				(alpha = 1)
				(class $TextDefaultBold18NM)
				(macro TFMouseEnabled value=false)
				(bind text "squadronType")
			)
		)
		(block
			(style (width = 100%))
			(element HorizontalDivider)
		)
		(block
			(style (width = 100%))
			
			(mc inner_panel
				(alpha = 1)
				(class $FullsizeAbsolute)
			)
			(block
				(style (width = 100%) (paddingLeft = "SXS") (paddingRight = "SXS") (paddingTop = 18px) (paddingBottom = "-XS"))
				
				(controller $Repeat renderer='ParamsModifierItem' layout=false
					(bind count "attributesNeutral.length")
					(args
						_shrinkHeight = true
					)
					(exprs
						(scope
							(bind _dataItem "attributesNeutral[$index]")
						)
					)
				)
			)
		)
	)
)

(def element HangarTooltipBackground(_isInBattle:bool = false) layout=true
	(scope
		(var optionDataEntity:gfx = "$datahub.getsingleEntity(CC.optionData)")
		(var blurEnabled:bool = "optionDataEntity.optionData.blurEnabled" (event "optionDataEntity.optionData.evBlurEnabledChanged"))
		(var contrast:bool = "optionDataEntity.optionData.contrast" (event "optionDataEntity.optionData.evContrastChanged"))
	)
	(class $FullsizeAbsolute)
	(block
		(class $FullsizeAbsolute)
		
		
		
	)
	(mc contrast_panel
		(class $FullsizeAbsolute)
		(alpha = 1)
		(bind visible "(contrast == true || _isInBattle == true)")
	)
	(block
		(class $FullsizeAbsolute)
		(bind visible "!_isInBattle")
		(mc hint_panel
			(class $FullsizeAbsolute)
		)
	)
)