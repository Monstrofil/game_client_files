(def constant GunMarkerStateMap {
	'0': 'warning',
	'1': 'ready',
	'2': 'warning',
	'3': 'alert',
	'4': 'dead',
	'5': 'crit'
})

(def constant MIN_GUN_MARKER_SCALE 0.5)

(def css $TextGunMarkerStyle()
	(extends $FontEnableReadability)
	(extends $FontFamilyDefaultBold)
	(extends $BlockDropShadowFilter3)
	(fontSize = 12)
	(textColor = 0xC5C5C5)
	(extends $TextMouseDisable)
)

(def element GunMarkerArtillery(_gunId:number) layout=true
	(scope
		(var gunId:number = "_gunId")
		(var gunEntity:gfx = "$datahub.getEntity(gunId)")
		(var gun:gfx = "gunEntity.gun")
		(var positionID:number = "gun.positionID")

		(var gunScreenX:number = "gunEntity.gun.screenX" (event "evEnterFrame"))
		(var gunAimDiffAngle:number = "gunEntity.gun.aimDiff" (event "evEnterFrame"))
		(var percentAiming:number = "gunEntity.gun.percentAiming" (event "evEnterFrame"))

		(var markerScale:number = "1 - abs(gunAimDiffAngle) * (1 - MIN_GUN_MARKER_SCALE) / 180")

		(var markerState:number = "gun.markerState" (event "gun.evMarkerStateChanged"))
		(var isReloading:bool = "gunEntity.hasComponent(CC.countDown)" (event "gun.evReloadStateChanged"))
		(var reloadPercent:number = "isReloading ? gunEntity.countDown.reloadPercent : 1" watch=false (event "evEnterFrame"))
	)

	(name = "'GunMarker_' + (positionID + 1)")

	(bind visible "gunAimDiffAngle != 0 && markerState != GunMarkerState.DEAD")

	(style (position = "absolute"))

	(bind x "gunScreenX")

	(element GunMarker _hasText=true _stateAnimations=false
		(scope
            (bind _positionID "positionID")
            (bind _gunAimDiffAngle "gunAimDiffAngle")
            (bind _markerState "markerState")
            (bind _reloadPercent "reloadPercent")
        )
	)
)

(def element GunMarker(_hasText:bool, _stateAnimations:bool=true, _backgroundMC:str='crosshair_gun_marker_background', _markerMC:str='crosshair_gun_marker', _shootAnimMC:str='crosshair_gun_marker_shoot_anim') layout=true
	(scope
		(event evShoot)

		(var _positionID:number = 0)
		(var _gunAimDiffAngle:number = 0)
		(var _markerState:number = 0)
		(var _reloadPercent:number = 1)

		(var markerScale:number = "1 - abs(_gunAimDiffAngle) * (1 - MIN_GUN_MARKER_SCALE) / 180")


		(var d:number = "25") 
		(var reloadAngle:number = "_reloadPercent*(90-d)*4") 
		(var startArcOffset:number = "-90-d/2")
		(var customAngle:number = "min(360, 0
									+d
									+(reloadAngle >= (90-d) ? d : 0)
									+(reloadAngle >= (90-d)*2 ? d : 0)
									+(reloadAngle >= (90-d)*3 ? d : 0)
									+ reloadAngle
								 )")

		(var mappedMarkerState:str = "GunMarkerStateMap[_markerState]")

	)
	(style (position = "absolute"))

	(tf $enabled="_hasText"
		(style
			(width = 26)
			(height = 19)
			(position="absolute")
			(left = -13) (top = 4)
			(textAlign="center")
		)
		(class $TextGunMarkerStyle)
		(alpha = 0.6)

		(bind text "_positionID + 1")
	)

	(mc "_backgroundMC"
		(style (position = "absolute"))
		(bind scaleX "markerScale")
		(bind scaleY "markerScale")

		(bindcall setState "mappedMarkerState" "!_stateAnimations" init=true)
	)

	
	(block
		(style (position = "absolute"))

		(mc "_markerMC"
			(style (position = "absolute"))
			(bind scaleX "markerScale")
            (bind scaleY "markerScale")
			(bindcall setState "mappedMarkerState" "!_stateAnimations" init=true)
		)

		(block
			(style (position = "absolute"))
			(isMask = true)
			(bind scaleX "markerScale")
            (bind scaleY "markerScale")

			(controller $Sector
				(color = 0xFF000000)
				(offset = "startArcOffset")
				(bind arc "customAngle" )
				(radius = 20)
			)
		)
	)
	
	(block
		(style (position = "absolute"))

		(mc "_shootAnimMC"
			(style (position = "absolute"))
			(bind scaleX "markerScale")
			(bind scaleY "markerScale")
			(bindcall playAnim "'shoot'" init=false (event "evShoot"))
		)
	)
)