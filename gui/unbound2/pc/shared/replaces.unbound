(def element nullLayout() layout=true)

(def macro VAR_RELATION (entity:expression)
	(var relation:str = "entity.relation.value == 0	? RELATION_NAMES.OWN		:
						(entity.relation.value == 1 ? RELATION_NAMES.ALLY	:
						(entity.relation.value == 2 ? RELATION_NAMES.ENEMY	: RELATION_NAMES.NEUTRAL))" (event "entity.relation.evChanged"))
)

(def macro SHIP_CLASS_STR (shipComponent:expression)
	(var shipClass:str =    "(shipComponent.subtype == SHIP_TYPE.CRUISER) 	? tr('IDS_CRUISER') :
	                        (shipComponent.subtype == SHIP_TYPE.AIR_CARRIER)	? tr('IDS_AIRCARRIER') :
	                        (shipComponent.subtype == SHIP_TYPE.BATTLESHIP) ? tr('IDS_BATTLESHIP') : 
	                        (shipComponent.subtype == SHIP_TYPE.AUXILIARY) 	? tr('IDS_AUXILIARY')
	                                                            : tr('IDS_DESTROYER')"
    )			
)

#отображает текст с результатом выражения в верстке
(def macro trace(expr:expression)
	(block
		(style 
			(backgroundColor = "0xFF000000")
		)
		(tf
			(class $TextDefault)
			(autoSize='left')
			(bind text "expr")
		)
	)
)

#создает видимый список всех измененных значений выражения и обновляет его при каждом изменении результата выражения
(def macro traceChange(expr:expression)
	(scope
		(var traceChangeCount:number = 0)
		(bind traceChangeCount "traceChangeCount + 1" watch=false init=false (bind trigger "expr"))
	)
	(block
		(controller $Repeat layout=true
			(bind count "traceChangeCount")
			(exprs
					(style
						(backgroundColor = "0x88FFFFFF")
					)
					(tf
						(class $TextHUD16Bold)
						(style (textColor = "0xFFFF00FF"))
						(autoSize='left')
						(text = "expr")
					)
			)
		)
	)
)

#отображает счетчик того, сколько раз выстрелило конкретное событие
(def macro eventChecker (eventName:expression = "'eventName'")
	(scope
		(event eventName)

		(var test:number = 0)
		(bind test "test+1" watch=false init=false (event "eventName"))
	)

	(block
		(style
			(padding = 8)
			(bind backgroundColor "test%2 == 0 ? C_WARNING : C_POSITIVE")
		)
		(tf
			(class $TextHUDBold)
			(bind text "test")
		)

		(controller $Animation
					(bindcall play duration=0.1 to={scaleX:1.5, scaleY:1.5} (bind trigger "test"))
					(bindcall play delay=0.1 duration=0.1 to={scaleX:1, scaleY:1} (bind trigger "test"))
		)
	)


)

#выводит результат выражения в лог
(def macro log(expr:expression)
	(scope
		(var logVar:str = "log(expr)")
	)

	(block
		(visible = false)
		(style
			(position = "absolute")
		)
		(tf
			(bind text "logVar")
		)
	)
)

(def macro DRAW_RECT (x:expression = 0, y:expression = 0, w:expression = 0, h:expression = 0, c:expression = 0xFFFFFF, a:expression = 1)
	(.graphics
		(beginFill "c" "a")
		(drawRect "x" "y" "w" "h")
		(endFill)
	)
)

(def macro DRAW_GRADIENT_RECT ( w:expression = 0, h:expression = 0, 
	type:expression = "'linear'", colors:expression = "[0xffffff,0x0]", alphas:expression="[1,1]", ratios:expression="[0,255]" )
	(.graphics
		(beginGradientFill "type" "colors" "alphas" "ratios")
		(drawRect 0 0 "w" "h")
		(endFill)
	)
)

(def macro BLUR_LAYER()
	(rendererString = blurLayer)
)

(def macro BLUR_MAP()
	(rendererString = blurMeBaby)
)

(def macro FAIR_SCALE (scale:expression)
    (scaleX = "scale")
    (scaleY = "scale")
    (style
        (ubScaleX = "scale")
        (ubScaleY = "scale")
    )
)

(def macro HIDE_UI_CMD ()
	(scope
        (var cmdEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommandName, 'CMD_HIDE_INTERFACE')")
		(var hudVisible:bool = "true")
		(bind hudVisible "!hudVisible" init=false (event "cmdEntity.commandMappingCommand.evCall"))
	)

	(bind visible "hudVisible")
)

(def macro MOUSE_OVER_SCOPE ()
	(scope
		(var isMouseOver:bool = false)
	    (event evMouseOver)
	    (event evMouseOut)
	    (bind isMouseOver true on='evMouseOver' init=false )
	    (bind isMouseOver false on='evMouseOut' init=false )
    )
)

(def macro MOUSE_LMB_EXTERNAL_CALL (externalMethod:str, methodArgs:expression)
	(bindcall externalCall "$event.buttonIdx == 0 ? externalMethod : ''" "methodArgs" init=false watch=false on='click')
)


(def macro PULL_SHIP (shipId:expression)
    (scope
        (var shipEntity:gfx = "$datahub.getPrimaryEntity(CC.ship, shipId)")
        (var shipComponent:gfx = "shipEntity.ship" (event "shipEntity.ship.evUpdate") (event "shipEntity.ship.evCurrentSkinChanged"))
        (var shipComponentSlim:gfx = "shipEntity.slimClientComponent" (event "shipEntity.slimClientComponent.evUpdate"))
    )
)

(def macro PULL_SHIP_PLAYER (shipId:expression)
    (scope
        (var playerShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")
        (var playerShipComponent:gfx = "playerShipEntity.ownShip" (event "playerShipEntity.ownShip.evUpdate") (event "playerShipEntity.ownShip.evCrewChanged"))
    )
)

(def macro PULL_USI (entity:expression)
    (scope
        (var upgradableShipInfo:gfx = "entity.upgradableShipInfo" (event "entity.upgradableShipInfo.evUpdate"))
    )
)

(def macro PULL_EXTERIOR (exteriorId:expression)
	(scope
		(var exteriorEntity:gfx = "$datahub.getPrimaryEntity(CC.exteriorConfig, exteriorId)")
		(var exteriorConfig:gfx = "exteriorEntity.exteriorConfig")
	)
)
