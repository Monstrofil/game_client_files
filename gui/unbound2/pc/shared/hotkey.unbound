(def css $HotkeyText ()
	(fontFamily = $WWSDefaultFontBold)
	(extends $FontSizeDefault)
	(extends $FontColorBlack)
	(extends $TextMouseDisable)
	(extends $FontEnableReadability)
	(marginLeft = -3px)
	(marginRight = -3px)
	(marginTop = -6px)
	(marginBottom = -5px))

(def css $HotkeyTextBig ()
	(extends $TextDefaultBold23NM)
	(extends $FontColorBlack)
	(extends $FontEnableReadability))

(def constant HOTKEY_BUTTON_SIZE 20)

(def constant NOT_LOCALIZE_KEYS
	{	F1: true,
		F2: true,
		F3: true,
		F4: true,
		F5: true,
		F6: true,
		F7: true,
		F8: true,
		F9: true,
		F10: true,
		F11: true,
		F12: true
	}
)

(def constant HotkeyState {
	INVALID: -1,
	DEFAULT: 0,
	WARNING: 1,
	CRITICAL: 2,
	POSITIVE: 3
})

(def element HotkeyBackground (_hotkeyState:number) layout=true
	(scope
		(var hotkeyState:number = "_hotkeyState")
	)
	(class $FullsizeAbsolute)
	(style
		(bind backgroundImage "'symbol:hotkey_holder_' + 	(hotkeyState == HotkeyState.DEFAULT		? 'white' :
															hotkeyState == HotkeyState.WARNING		? 'orange' :
															hotkeyState == HotkeyState.CRITICAL		? 'red'
																									: 'green') + '_9slice'")
		(backgroundSize = "fill")
	)
)

(def element HotkeyIndicator (_commandId:number, toggle:bool=false, fxOnDown:bool=true) layout=true
	(scope
		(var commandId:number = "_commandId")
		(var enabled:bool = "true")
		(var toggled:bool = "false")
		(var overwriteState:number = "HotkeyState.INVALID")
		(var hotkeySize:number = "HOTKEY_BUTTON_SIZE")
		(var hotkeyTextStyle:str = "'$HotkeyText'")

		(var command:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommand, commandId)")
		(var deviceMap:dict = "command.commandKeyList.deviceMap" (event "command.commandKeyList.evChanged"))
		(var isCmdDown:bool = "command.commandMappingCommand.isDown" (event "command.commandMappingCommand.evIsDownChanged"))

		(var keyId:number = "(deviceMap[0] != null) ? deviceMap[0] : -1")	
		(var keyEntity:gfx = "$datahub.getEntity(keyId)")
		(var keyCode:number = "keyEntity.commandMappingKey.keyId")
		(var mods:number = "keyEntity.commandMappingKey.mods")
		(var inputKeyEntity:gfx = "$datahub.getPrimaryEntity(CC.inputKey, keyCode)")
		(var keyPureName:str = "inputKeyEntity.inputKey.pureName")

		(var cmModKeyEntity:gfx = "$datahub.getPrimaryEntity(CC.commandMappingMod, '0_' + mods)") 
		(var modKeyCode:number = "mods ? cmModKeyEntity.commandMappingModKey.keyCode : 0")

		(var isKeyActive:bool = "toggled || enabled && (isCmdDown && !(toggle))")
		(var hotkeyState:number = "overwriteState != HotkeyState.INVALID	? overwriteState
																			: toggled 	? HotkeyState.POSITIVE 
																						: HotkeyState.DEFAULT")

		(event evIsKeyActiveChanged)

		(var useDefaultWidth:bool = "(keyPureName.length == 1) && (modKeyCode == 0)")
	)

	(dispatch evIsKeyActiveChanged args="{ cmdId: commandId, isKeyActive: isKeyActive }" dir="EventDirection.UP" (bind trigger "isKeyActive"))
	
	(style
		(bind minWidth "hotkeySize")
		(bind minHeight "hotkeySize")
		(align = "center|middle")
		(bind maxWidth "useDefaultWidth ? hotkeySize : 999")
	)

	(block
		(class $FullsizeAbsolute)

		(bind alpha "isKeyActive ? 1 : 0.5")

		(element HotkeyBackground "hotkeyState"
			(scope (bind hotkeyState "hotkeyState"))
		)

		(block $enabled = "toggle || fxOnDown"
			(class $FullsizeAbsolute)
			(style
				(top = 50%)
				(left = 50%)
			)

			(block
				(class $FullsizeAbsolute)
				(style
					(top = -50%)
					(left = -50%)			
				)
				(element HotkeyBackground "hotkeyState"
					(scope (bind hotkeyState "hotkeyState"))
				)
			)

			(visible = false)
			(controller $Animation
				(bindcall play 	from="{scaleX:1, scaleY:1, alpha:1.0, visible:true} "
								to="{scaleX:1.5, scaleY:1.5, alpha:0.0, visible:false} "
								duration=0.25
								$enabled = "fxOnDown"
								(event "command.commandMappingCommand.evCall")
				)

				(bindcall play 	from="{scaleX:1, scaleY:1, alpha:1.0, visible:true} "
								to="{scaleX:1.5, scaleY:1.5, alpha:0.0, visible:false} "
								duration=0.25 
								(bind enabled "toggled")
				)
			)
		)
	)

	(hblock
		(bind alpha "isKeyActive ? 1 : 0.75")
		(style 
			(marginLeft = "6px")
			(marginRight = "6px")
		)
		(element KeyRenderer "modKeyCode" "hotkeyTextStyle"
			(scope
				(bind keyCode "modKeyCode")
				(bind hotkeyTextStyle "hotkeyTextStyle")
			)
			(bind visible "modKeyCode")
		)
		(tf
			(bind visible "modKeyCode")
			(style
				(marginLeft = "0px")
				(marginRight = "0px")
			)
			(bind class "hotkeyTextStyle")
			(text = '+')
		)
		(element KeyRenderer "keyCode" "hotkeyTextStyle"
			(scope
				(bind keyCode "keyCode")
				(bind hotkeyTextStyle "hotkeyTextStyle")
			)
		)
	)
)

(def element KeyRenderer (_keyCode:number, _hotkeyTextStyle:str) layout=true
	(scope
		(var keyCode:number = "_keyCode")
		(var hotkeyTextStyle:str = "_hotkeyTextStyle")
		(var inputKeyEntity:gfx = "$datahub.getPrimaryEntity(CC.inputKey, keyCode)")	
		(var keyPureName:str = "inputKeyEntity.inputKey.pureName")
		(var keyName:str = "inputKeyEntity.inputKey.name") 
	)

	(tf
		(bind class "hotkeyTextStyle")
		(bind text "inputKeyEntity	? (keyPureName.length == 1 || NOT_LOCALIZE_KEYS[keyPureName]) 	? keyPureName 
																									: ('IDS_' + keyName)
									: '-'")
	)
)

(def element HotkeyIndicatorLarge(commandId:number, toggle:bool=false) layout=true
	(scope
		(var command:gfx = "$datahub.getPrimaryEntity(CC.commandMappingCommand, commandId)")
		(var deviceMap:dict = "command.commandKeyList.deviceMap" (event "command.commandKeyList.evChanged"))
		(var keyId:number = "(deviceMap[0] != null) ? deviceMap[0] : -1")
		(var keyEntity:gfx = "$datahub.getEntity(keyId)")
		(var keyCode:number = "keyEntity.commandMappingKey.keyId")
		(var inputKeyEntity:gfx = "$datahub.getPrimaryEntity(CC.inputKey, keyCode)")
		(var keyPureName:str = "inputKeyEntity.inputKey.pureName")
		(var keyName:str = "inputKeyEntity.inputKey.name")

		(var isCmdDown:bool = "$event[1]" init=false watch=false (event "command.commandMappingCommand.evCall"))
	)
	(style
		(minWidth = "42") (minHeight = "42") (align = "center|middle")
	)

	(block
		(class $FullsizeAbsolute)
		(style
			(bind backgroundImage "'symbol:hotkey_holder_simple_white'")
			(backgroundSize = "fill") (align = "center|middle") (padding = [4, 4, 4, 4])
		)

		(block
			(class $FullsizeAbsolute)
			(alpha = 0)

			(block
				(class $FullsizeAbsolute)
				(style
					(bind backgroundImage "'symbol:hotkey_holder_simple_green'")
					(backgroundSize = "fill") (align = "center|middle")
				)
			)

			(controller $Animation
				(bindcall play 	from="{alpha:0.0}"
								to="{alpha:1.0}"
								duration=0.05
								(event "command.commandMappingCommand.evCall")
				)
			)
			(controller $Animation
				(bindcall play 	from="{alpha:1.0}"
								to="{alpha:0.0}"
								duration=0.05
								delay=0.1
								(event "command.commandMappingCommand.evCall")
				)
			)
		)
	)

	(block
		(style (marginLeft = "12px") (marginRight = "12px"))
		(tf
			(class $HotkeyTextBig)
			(class $DropShadowDisabler)
			(bind text "keyId == -1 	? '-'
										: (keyPureName.length == 1 || NOT_LOCALIZE_KEYS[keyPureName]) ? keyPureName : ('IDS_' + keyName)")
		)
	)
)
