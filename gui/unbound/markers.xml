
<ui>
	<css name="$TextHUD">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFont"/>
		<fontSize value="18"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUDBold">
		<fontFamily value="$WWSDefaultFontBold"/>
		<mouseEnabled value="false"/>
		<mouseChildren value="false"/>
		<fontSize value="18"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD24Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="24"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD22Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="22"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD16Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="16"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD16">
		<fontFamily value="$WWSDefaultFont"/>
		<mouseEnabled value="false"/>
		<mouseChildren value="false"/>
		<fontSize value="16"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextColorHUDAlly">
		<textColor value="0xFF80c0ff"/>
	</css>
	<css name="$TextColorHUDDivision">
		<textColor value="0xFFFFCC66"/>
	</css>
	<css name="$TextColorHUDTK">
		<textColor value="0xFFFF96CA"/>
	</css>
	<css name="$TextColorHUDAllyInvert">
		<textColor value="0xFF001b33"/>
	</css>
	<css name="$TextColorHUDEnemy">
		<textColor value="0xFFe75153"/>
	</css>
	<css name="$TextColorHUDEnemyInvert">
		<textColor value="0xFF330012"/>
	</css>
	<css name="$TextColorHUDNeutral">
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextColorHUDPositive">
		<textColor value="0xFF4CE8AA"/>
	</css>
	<css name="$TextColorHUDWarning">
		<textColor value="0xFFFF9933"/>
	</css>
	<css name="$TextColorHUDCritical">
		<textColor value="0xFFe75153"/>
	</css>
	<css name="$TextColorHUDDead">
		<textColor value="0xFF111111"/>
	</css>
	<css name="$TextColorHUDDark">
		<textColor value="0xFF000000"/>
	</css>
	<css name="$CapsTracking">
		<letterSpacing value="1.4"/>
	</css>
	<block className="CapturePointMarker">
		<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'bothInside'; ['entity.capturePoint.evBothInsideChanged']; entity.capturePoint.bothInside"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<style>
			<width value="0px"/>
			<height value="0px"/>
			<position value="absolute"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-50px"/>
			</style>
			<bind name="visible" value="!(_minimap)"/>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<width value="0px"/>
				<height value="0px"/>
				<align value="center|middle"/>
			</style>
			<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
			<block>
				<style>
					<width value="32px"/>
					<height value="32px"/>
					<backgroundColor value="0xFF000000"/>
					<alpha value="0.15"/>
				</style>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<width value="0px"/>
				<height value="0px"/>
				<align value="center|middle"/>
			</style>
			<block type="text">
				<bind name="visible" value="entity.capturePoint.type != 5"/>
				<styleClass value="$TextHUD24Bold"/>
				<style>
					<paddingTop value="2px"/>
				</style>
				<bind name="class" value="relation == 'ally' ? '$TextColorHUDAlly' : relation == 'enemy' ? '$TextColorHUDEnemy' : '$TextColorHUDNeutral'"/>
				<bind name="text" value="entity.capturePoint.label"/>
			</block>
			<block>
				<bind name="visible" value="entity.capturePoint.type == 5"/>
				<bind name="style" value="'backgroundSprite'; 'capture_flag_' + relation + '_c'"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
			<block className="mask_rhomb_c" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="isMask" value="true"/>
				<block>
					<style>
						<position value="absolute"/>
						<width value="100px"/>
						<height value="100px"/>
						<top value="-50px"/>
						<left value="-50px"/>
						<backgroundColor value="0xFFFFFFFF"/>
					</style>
					<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
					<bind name="alpha" value="isCaptureInProgress ? 0.5 : (relation == 'neutral') ? 0.15 : 1.0"/>
				</block>
				<block className="lesta.display.Sector" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
					<bind name="alpha" value="1"/>
					<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
					<bind name="offset" value="-135"/>
					<bind name="radius" value="23"/>
					<bind name="innerRadius" value="0"/>
				</block>
			</block>
		</block>
		<block>
			<bind name="fade" value="showTextContested &amp;&amp; bothInside; 0.15; {alpha: 0, top: -10}; {alpha: 1, top: 0}"/>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<style>
					<position value="absolute"/>
					<marginLeft value="-50%"/>
					<top value="22px"/>
				</style>
				<bind name="text" value="toUpperCase(tr('IDS_CONTESTED'))"/>
			</block>
		</block>
	</block>
	<block className="EpicenterMarker">
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-60px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<bind name="repeat" value="entity.epicenter.points.ref.items; 'EpicenterCircle'"/>
	</block>
	<block className="EpicenterCircle">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<bind name="watchDH" value="'circleRadius'; ['']; 10 * (entity.capturePoint.epicenterIndex + 1)"/>
		<bind name="watchDH" value="'circleInnerRadius'; ['']; 10 * entity.capturePoint.epicenterIndex + 2"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
		<block className="EpicenterCircleItem">
			<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
				<bind name="alpha" value="isCaptureInProgress ? 0.3 : (relation == 'neutral') ? 0.1 : (_minimap ? 0.4 : 1)"/>
				<bind name="arc" value="_minimap ? 360*(1-captureProgress) * (invaderRelation == 'ally' ? -1 : 1) : 360"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
				<bind name="alpha" value="_minimap ? 0.3 : 1"/>
				<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="alpha" value="0.3"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="radius" value="circleRadius+2"/>
				<bind name="innerRadius" value="circleRadius"/>
			</block>
		</block>
	</block>
	<block className="EpicenterCircleItem">
		<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
			<bind name="alpha" value="isCaptureInProgress ? 0.3 : (relation == 'neutral') ? 0.1 : (_minimap ? 0.4 : 1)"/>
			<bind name="arc" value="_minimap ? 360*(1-captureProgress) * (invaderRelation == 'ally' ? -1 : 1) : 360"/>
			<bind name="offset" value="-90"/>
			<bind name="radius" value="circleRadius"/>
			<bind name="innerRadius" value="circleInnerRadius"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
			<bind name="alpha" value="_minimap ? 0.3 : 1"/>
			<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
			<bind name="offset" value="-90"/>
			<bind name="radius" value="circleRadius"/>
			<bind name="innerRadius" value="circleInnerRadius"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="cacheAsBitmap" value="true"/>
			<bind name="color" value="0xFFF1F1F1"/>
			<bind name="alpha" value="0.3"/>
			<bind name="arc" value="360"/>
			<bind name="offset" value="0"/>
			<bind name="radius" value="circleRadius+2"/>
			<bind name="innerRadius" value="circleRadius"/>
		</block>
	</block>
	<block className="ShipMarker">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="changeDispatch" value="isAlive; 'evShipDeadDisappear'; {}; 1; false"/>
		<bind name="appear" value="'evShipDeadDisappear'; 0.5; 1.5; {alpha: 1}; {alpha: 0}; 2"/>
		<bind name="name" value="'bssMarker_'+$index"/>
		<bind name="watchDH" value="'nickName'; []; entity.avatar.pureName"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'altVision'; ['cameraEntity.camera.evAltVisionChanged']; cameraEntity.camera.altVision"/>
		<bind name="watchDH" value="'appearingTime'; []; entity.dissolve.timeLeft"/>
		<bind name="watch" value="'isSelf'; entity.relation.value == 0"/>
		<bind name="watch" value="'isExtended'; altVision || isTargetLocked || isInFocus"/>
		<bind name="childParentScope" value="tacticalMap ? 1 : 0; {}; 'ShipMarkerContentDefault'; 'ShipMarkerContentTactical'"/>
	</block>
	<block className="ShipMarkerContentDefault">
		<bind name="visible" value="!isSelf"/>
		<style>
			<marginTop value="-100%"/>
			<marginBottom value="30px"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<top value="-36px"/>
				<left value="13px"/>
			</style>
			<bind name="style" value="'top'; isTargetLocked ? '-36px' : '-20px'"/>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<height value="20px"/>
				<align value="middle"/>
			</style>
			<block>
				<style>
					<left value="12px"/>
					<marginTop value="12px"/>
				</style>
				<bind name="instance" value="'ShipMarkerIconCentered'; !isSelf 	? 	{
																		_entityId: entity.id,
																		_rotate: false,
																		_defaultCamera: true
																	}
																: null;"/>
			</block>
			<block>
				<style>
					<marginLeft value="1px"/>
				</style>
				<bind name="fade" value="isExtended; 0.15; {scaleX: 0, alpha: 0}; {scaleX: 1, alpha: 1}; {scaleX: 0, alpha: 0}; 1"/>
				<block type="text">
					<styleClass value="$TextHUDBold"/>
					<style>
						<marginBottom value="2px"/>
						<letterSpacing value="1.5"/>
					</style>
					<bind name="pureText" value="toUpperCase(tr(entity.avatar.ship.ref.ship.nameIDS))"/>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<style>
				<height value="3px"/>
			</style>
			<bind name="transition" value="isExtended; 0.15; { height: 3 }; { height: 10 }; { height: 3 }; 2"/>
			<bind name="instance" value="'ShipSegmentedHealthBar'; {
												_entityId: entity.id,
												_isExtended: isExtended
												}"/>
		</block>
		<block>
			<style>
				<width value="0px"/>
				<height value="24px"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD16Bold"/>
				<style>
					<marginLeft value="-2px"/>
					<marginTop value="-1px"/>
				</style>
				<bind name="text" value="distance + ' ' + distancePostfix"/>
			</block>
		</block>
		<block type="text">
			<bind name="fade" value="isExtended; 0.15; {ubScaleY: 0, scaleX: 0, alpha: 0}; {ubScaleY: 1, scaleX: 1, alpha: 0.6}; {ubScaleY: 0, scaleX: 0, alpha: 0}; 1"/>
			<styleClass value="$TextHUD16Bold"/>
			<style>
				<position value="absolute"/>
				<left value="-2px"/>
				<bottom value="-16px"/>
				<alpha value="0.6"/>
			</style>
			<bind name="pureText" value="nickName"/>
		</block>
		<block>
			<bind name="fade" value="isATBAFocused; 0.1; {alpha: 0, top: -10}; {alpha: 1, top: 0}; null; 2"/>
			<style>
				<position value="absolute"/>
				<bottom value="14px"/>
				<left value="-32px"/>
			</style>
			<block className="atba_focus" type="native"/>
		</block>
	</block>
	<block className="ShipMarkerContentTactical">
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-40px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
			<bind name="scaleX" value="0.75"/>
			<bind name="scaleY" value="0.75"/>
		</block>
		<block>
			<bind name="instance" value="'ShipMarkerIconCentered'; !isSelf ? 	{
																	_entityId: entity.id,
																	_rotate: true
																}
															: null;"/>
			<bind name="instance" value="'OwnShipMarkerIcon'; 	isSelf ? 	{
																_entityId: entity.id
															}
														: null;"/>
		</block>
		<block>
			<bind name="fade" value="isATBAFocused; 0.1; {alpha: 0}; {alpha: 1}; null; 2"/>
			<bind name="scaleX" value="0.7"/>
			<bind name="scaleY" value="0.7"/>
			<style>
				<position value="absolute"/>
				<top value="12px"/>
				<left value="-22px"/>
			</style>
			<block className="atba_focus" type="native"/>
		</block>
	</block>
	<block className="ShipMarkerIconCentered">
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'isInSameDivision'; ['entity.avatar.evDivisionChanged']; entity.avatar.isInSameDivision"/>
		<bind name="watchDH" value="'yaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(entity.mapPosition.yaw)"/>
		<bind name="watchDH" value="'lastVisible'; ['entity.visibility.evChanged']; !(entity.visibility.mapVisible) &amp;&amp; !(entity.visibility.visible)"/>
		<bind name="watchDH" value="'alliesVisible'; ['entity.visibility.evChanged']; entity.visibility.mapVisible &amp;&amp; !(entity.visibility.visible)"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'tkStatus'; []; entity.teamKiller.status &amp;&amp; (relation == 'ally')"/>
		<bind name="watchDH" value="'shipSubtype'; []; entity.avatar.ship.ref.ship.subtype"/>
		<bind name="watchDH" value="'targetFlags'; ['entity.target.evChanged']; entity.target ? entity.target.flags : 0"/>
		<bind name="watch" value="'isTargetLocked'; (targetFlags &amp; (1 &lt;&lt; WeaponType.ARTILLERY | 1 &lt;&lt; WeaponType.TORPEDO)) &gt; 0"/>
		<bind name="watch" value="'isAlly'; entity.relation.value == 1"/>
		<bind name="scaleX" value="_minimap ? 0.75 : 1"/>
		<bind name="scaleY" value="_minimap ? 0.75 : 1"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="scaleX" value="_defaultCamera ? 0.9 : 0.6"/>
			<bind name="scaleY" value="_defaultCamera ? 0.9 : 0.6"/>
			<block className="AimTargetLock">
				<block>
					<bind name="style" value="'backgroundSprite'; _defaultCamera ? 'target_locked_dark_c' : 'target_locked_c' "/>
					<bind name="fade" value="isTargetLocked; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:1, scaleY:1, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2; isTargetLocked ? 0.15 : 0.05"/>
				</block>
			</block>
		</block>
		<block>
			<bind name="watch" value="'iconRelation'; isAlive 	? (lastVisible ? '' : (isInSameDivision ? '_division' : tkStatus ? '_tk' : ('_' + relation)))
												: (isAlly ? '_ally' : '_enemy')"/>
			<bind name="watch" value="'iconClass'; toLowerCase(shipSubtype) + (isAlive ? (lastVisible ? '_lastvis' : alliesVisible ? '_invis' : '') : '_dead') + iconRelation + '_c'"/>
			<block>
				<style>
					<width value="24px"/>
					<height value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; iconClass"/>
				<bind name="rotation" value="_rotate ? (yaw + (90 * (isAlly || lastVisible ? -1 : 1))) : 0"/>
			</block>
		</block>
	</block>
	<block className="ShipMarkerIconSimple">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'isInSameDivision'; ['entity.avatar.evDivisionChanged']; entity.avatar.isInSameDivision"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'tkStatus'; []; entity.teamKiller.status &amp;&amp; (relation == 'ally')"/>
		<bind name="watchDH" value="'shipSubtype'; []; entity.avatar.ship.ref.ship.subtype"/>
		<bind name="watch" value="'isAlly'; entity.relation.value &lt;= 1"/>
		<block>
			<bind name="watch" value="'iconRelation'; isAlive 	? (isInSameDivision ? '_division' : tkStatus ? '_tk' : ('_' + relation))
												: (isAlly ? '_ally' : '_enemy')"/>
			<bind name="watch" value="'iconClass'; toLowerCase(shipSubtype) + (isAlive || _ignoreDead ? '' : '_dead') + iconRelation + '_c'"/>
			<block>
				<style>
					<width value="24px"/>
					<height value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; iconClass"/>
			</block>
		</block>
	</block>
	<block className="OwnShipMarkerIcon">
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'yaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(entity.mapPosition.yaw)"/>
		<bind name="scaleX" value="_minimap ? 0.5 : 1"/>
		<bind name="scaleY" value="_minimap ? 0.5 : 1"/>
		<block className="ship_own_c" type="native">
			<bind name="rotation" value="(yaw - 90)"/>
		</block>
		<block className="animation_own_ship" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="(yaw - 90)"/>
			<bind name="visible" value="_minimap != true"/>
		</block>
	</block>
	<block className="AimTargetLock">
		<block>
			<bind name="style" value="'backgroundSprite'; _defaultCamera ? 'target_locked_dark_c' : 'target_locked_c' "/>
			<bind name="fade" value="isTargetLocked; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:1, scaleY:1, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2; isTargetLocked ? 0.15 : 0.05"/>
		</block>
	</block>
	<block className="ShipSegmentedHealthBar">
		<bind name="var" value="{ barWidth: 40, barHeight: 3, barExtHeight: 10 }"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watch" value="'segmentCount'; math.round(maxHealth/5000)"/>
		<bind name="watch" value="'segmentWidth'; 80/segmentCount &lt; 7 ? 7 : math.round(80/segmentCount)"/>
		<bind name="watch" value="'barExtWidth'; segmentWidth * segmentCount"/>
		<bind name="var" value="{fxDelay: 0.01}"/>
		<bind name="var" value="{fxDelay: fxDelay}"/>
		<bind name="catch" value="'set'+'newHealth'"/>
		<bind name="var" value="{newHealth: -1}"/>
		<bind name="catch" value="'set'+'prevHealth'"/>
		<bind name="var" value="{prevHealth: -1}"/>
		<bind name="dispatch" value="'addedToStage'; 'set'+'prevHealth'; {prevHealth: health}"/>
		<bind name="changeDispatch" value="health; 'set'+'newHealth'; {newHealth: health}; 1"/>
		<bind name="changeDispatch" value="health; 'dispatchSet'+'prevHealth'"/>
		<bind name="watch" value="'isUpChange'; newHealth &gt; prevHealth"/>
		<bind name="dispatch" value="'dispatchSet'+'prevHealth'; 'set'+'prevHealth'; {prevHealth: health}; 0; isUpChange ? 0 : fxDelay"/>
		<style>
			<position value="absolute"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<width value="40px"/>
				<height value="3px"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<bind name="style" value="'width'; (_isExtended ? barExtWidth : barWidth) + 'px'"/>
			<bind name="style" value="'height'; (_isExtended ? barExtHeight : barHeight) + 'px'"/>
		</block>
		<bind name="watch" value="'damageWidth'; ((prevHealth-newHealth)/maxHealth)*(_isExtended ? barExtWidth : barWidth)"/>
		<bind name="watch" value="'damageHeight'; _isExtended ? barExtHeight : barHeight"/>
		<bind name="watch" value="'damagePositionX'; (newHealth/maxHealth)*(_isExtended ? barExtWidth : barWidth)"/>
		<bind name="changeDispatch" value="damageWidth; damageWidth &gt; 0 ? 'evPreHealthChanged' : ''"/>
		<bind name="dispatch" value="'evPreHealthChanged'; 'evHealthChanged'; {}; 2; 0.01"/>
		<bind name="changeDispatch" value="_isExtended; 'evHideDamageFX'; {}; 1"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evHealthChanged'; 'ShipHealthBarFXItem'; {lifetime: 1.2, _damagePositionX: damagePositionX, _damageWidth: math.ceil(damageWidth), _damageHeight: damageHeight}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="scaleX" value="prevHealth / maxHealth"/>
			<block>
				<style>
					<position value="absolute"/>
					<width value="40px"/>
					<height value="3px"/>
				</style>
				<bind name="style" value="'width'; (_isExtended ? barExtWidth : barWidth) + 'px'"/>
				<bind name="style" value="'height'; (_isExtended ? barExtHeight : barHeight) + 'px'"/>
				<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff :
											relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			</block>
		</block>
		<block>
			<bind name="visible" value="_isExtended"/>
			<bind name="repeat" value="segmentCount - 1; 'ShipHealthBarDivider'; { 	_segmentWidth: 	segmentWidth,
																	_barHeight: 	barExtHeight,
																	_isExtended: _isExtended }"/>
		</block>
	</block>
	<block className="ShipHealthBarDivider">
		<style>
			<position value="absolute"/>
			<height value="10px"/>
			<width value="2px"/>
			<alpha value="0.35"/>
			<backgroundColor value="0xFF000000"/>
		</style>
		<bind name="transition" value="_isExtended; 0.15; { alpha: 0 }; { alpha: 0.35 }; { alpha: 0 }; 2; 0.1"/>
		<bind name="x" value="($index+1) * _segmentWidth - 1"/>
	</block>
	<block className="ShipHealthBarFXItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="appear" value="'evHideDamageFX'; 0.1; 0; {alpha: 1}; {alpha: 0}"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="10px"/>
				<height value="10px"/>
				<backgroundColor value="0xFFF1F1F1"/>
			</style>
			<bind name="style" value="'height'; _damageHeight + 'px'"/>
			<bind name="style" value="'width'; _damageWidth + 'px'"/>
			<bind name="x" value="_damagePositionX"/>
			<bind name="appear" value="'addedToStage'; lifetime-0.9; 0.9; {alpha: 1, scaleY: 1, y: 0 }; {alpha: 0, scaleY: 2, y: -(_damageHeight/2)}; 2"/>
		</block>
	</block>
	<block className="ShipHealthIndicator">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="var" value="{fxDelay: 0.6}"/>
		<bind name="var" value="{fxDelay: fxDelay}"/>
		<bind name="catch" value="'set'+'newHealth'"/>
		<bind name="var" value="{newHealth: -1}"/>
		<bind name="catch" value="'set'+'prevHealth'"/>
		<bind name="var" value="{prevHealth: -1}"/>
		<bind name="dispatch" value="'addedToStage'; 'set'+'prevHealth'; {prevHealth: health}"/>
		<bind name="changeDispatch" value="health; 'set'+'newHealth'; {newHealth: health}; 1"/>
		<bind name="changeDispatch" value="health; 'dispatchSet'+'prevHealth'"/>
		<bind name="watch" value="'isUpChange'; newHealth &gt; prevHealth"/>
		<bind name="dispatch" value="'dispatchSet'+'prevHealth'; 'set'+'prevHealth'; {prevHealth: health}; 0; isUpChange ? 0 : fxDelay"/>
		<style>
			<width value="1px"/>
			<height value="1px"/>
			<marginTop value="0px"/>
			<align value="center|middle"/>
		</style>
		<bind name="style" value="'width'; _width"/>
		<bind name="style" value="'height'; _height"/>
		<bind name="style" value="'marginTop'; _isExtended ? 0 : '8px'"/>
		<block className="health_bar_track" type="native">
			<style>
				<position value="absolute"/>
				<width value="1px"/>
				<height value="1px"/>
			</style>
			<bind name="style" value="'width'; _width"/>
			<bind name="style" value="'height'; _height"/>
			<bind name="gotoAndStop!" value="relation"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="newHealth == 0 ? 0.1 : newHealth; 0.3; {scaleX: prevHealth / maxHealth}; {scaleX: newHealth / maxHealth}; null; 1; fxDelay - 0.05"/>
			<block className="health_bar_damage" type="native">
				<style>
					<width value="1px"/>
					<height value="1px"/>
					<alpha value="0.8"/>
				</style>
				<bind name="visible" value="newHealth != prevHealth"/>
				<bind name="style" value="'width'; _width"/>
				<bind name="style" value="'height'; _height"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="newHealth == 0 ? 0.1 : newHealth; 0.15; {scaleX: prevHealth / maxHealth}; {scaleX: newHealth / maxHealth}; null; 1; 0.05"/>
			<block className="health_bar" type="native">
				<style>
					<width value="1px"/>
					<height value="1px"/>
				</style>
				<bind name="style" value="'width'; _width"/>
				<bind name="style" value="'height'; _height"/>
				<bind name="gotoAndStop!" value="relation"/>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<marginTop value="-1px"/>
			</style>
			<bind name="style" value="'fontSize'; maxHealth &gt;= 100000 ? 15 : 17"/>
			<bind name="class" value="relation == 'ally' ? '$TextColorHUDAllyInvert' : '$TextColorHUDEnemyInvert'"/>
			<bind name="text" value="format(health) + ' / ' + format(maxHealth)"/>
		</block>
	</block>
	<block className="PlaneMarker">
		<bind name="watchDH" value="'targetFlags'; ['entity.target.evChanged']; entity.target ? entity.target.flags : 0"/>
		<bind name="watch" value="'isAAFocused'; (targetFlags &amp; (1 &lt;&lt; WeaponType.AIRDEFENSE)) &gt; 0"/>
		<bind name="watchDH" value="'planeIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<style>
			<position value="absolute"/>
			<top value="-30px"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<left value="19px"/>
				<top value="-20px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<width value="36px"/>
				<height value="44px"/>
				<align value="center|middle"/>
			</style>
			<bind name="style" value="'marginBottom'; planeIsSelected ? '4px' : '-4px'"/>
			<block className="PlaneMarkerIcon">
				<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
				<bind name="watch" value="'planeType'; planeTypes[entity.plane.planeType]"/>
				<bind name="watch" value="'isConsumable'; entity.plane.isConsumable"/>
				<bind name="watchDH" value="'hasBomb'; ['entity.ownSquadron.evBombChanged']; entity.ownSquadron.hasBomb"/>
				<bind name="watchDH" value="'ammo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.ammo"/>
				<bind name="watchDH" value="'maxAmmo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.maxAmmo"/>
				<bind name="watch" value="'planeIconClass'; (isConsumable ? 'catapult_' : '') + planeType + (isInSameDivision 	? '_division' :
																					tkStatus 			? '_tk' :  '_' + relation )"/>
				<bind name="watch" value="'isNotFull'; entity.ownSquadron &amp;&amp; (	(planeType == 'bomber' || planeType == 'torpedobomber') ? !hasBomb :
														 planeType == 'fighter' 								? ammo &lt; maxAmmo : false	)"/>
				<bind name="watch" value="'fighterEmptyStatus'; ammo == 0 ? '_empty' :
										(ammo / maxAmmo) &lt; 0.33 ? '_2of3_empty' : '_1of3_empty'"/>
				<block>
					<bind name="visible" value="!isNotFull"/>
					<bind name="style" value="'backgroundSprite'; planeIconClass  + '_c'"/>
				</block>
				<block>
					<bind name="visible" value="isNotFull"/>
					<bind name="style" value="'backgroundSprite'; planeIconClass  + (planeType == 'fighter' ? fighterEmptyStatus : '_empty') + '_c'"/>
				</block>
				<bind name="scaleX" value="planeIsSelected ? 2 : 1"/>
				<bind name="scaleY" value="planeIsSelected ? 2 : 1"/>
				<bind name="ubScaleX" value="planeIsSelected ? 2 : 1"/>
				<bind name="ubScaleY" value="planeIsSelected ? 2 : 1"/>
			</block>
		</block>
		<block>
			<bind name="instance" value="'PlaneHealthBar'; { _barWidth: 48, _entityId: entity.id }"/>
		</block>
		<block>
			<style>
				<width value="0px"/>
				<height value="24px"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD16Bold"/>
				<style>
					<marginBottom value="2px"/>
				</style>
				<bind name="text" value="distance + ' ' + distancePostfix"/>
			</block>
		</block>
		<block>
			<bind name="fade" value="isAAFocused; 0.1; {alpha: 0, top: -10}; {alpha: 1, top: 0}; null; 2"/>
			<style>
				<position value="absolute"/>
				<bottom value="14px"/>
				<left value="-32px"/>
			</style>
			<block className="aa_focus" type="native"/>
		</block>
	</block>
	<block className="PlaneMarkerIcon">
		<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
		<bind name="watch" value="'planeType'; planeTypes[entity.plane.planeType]"/>
		<bind name="watch" value="'isConsumable'; entity.plane.isConsumable"/>
		<bind name="watchDH" value="'hasBomb'; ['entity.ownSquadron.evBombChanged']; entity.ownSquadron.hasBomb"/>
		<bind name="watchDH" value="'ammo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.ammo"/>
		<bind name="watchDH" value="'maxAmmo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.maxAmmo"/>
		<bind name="watch" value="'planeIconClass'; (isConsumable ? 'catapult_' : '') + planeType + (isInSameDivision 	? '_division' :
																					tkStatus 			? '_tk' :  '_' + relation )"/>
		<bind name="watch" value="'isNotFull'; entity.ownSquadron &amp;&amp; (	(planeType == 'bomber' || planeType == 'torpedobomber') ? !hasBomb :
														 planeType == 'fighter' 								? ammo &lt; maxAmmo : false	)"/>
		<bind name="watch" value="'fighterEmptyStatus'; ammo == 0 ? '_empty' :
										(ammo / maxAmmo) &lt; 0.33 ? '_2of3_empty' : '_1of3_empty'"/>
		<block>
			<bind name="visible" value="!isNotFull"/>
			<bind name="style" value="'backgroundSprite'; planeIconClass  + '_c'"/>
		</block>
		<block>
			<bind name="visible" value="isNotFull"/>
			<bind name="style" value="'backgroundSprite'; planeIconClass  + (planeType == 'fighter' ? fighterEmptyStatus : '_empty') + '_c'"/>
		</block>
		<bind name="scaleX" value="planeIsSelected ? 2 : 1"/>
		<bind name="scaleY" value="planeIsSelected ? 2 : 1"/>
		<bind name="ubScaleX" value="planeIsSelected ? 2 : 1"/>
		<bind name="ubScaleY" value="planeIsSelected ? 2 : 1"/>
	</block>
	<block className="PlaneHealthBar">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<style>
			<backgroundColor value="0x80000000"/>
			<height value="3px"/>
			<width value="40px"/>
			<marginLeft value="2px"/>
			<marginRight value="2px"/>
		</style>
		<bind name="width" value="_barWidth"/>
		<block>
			<style>
				<position value="absolute"/>
				<height value="3px"/>
				<width value="40px"/>
			</style>
			<bind name="width" value="_barWidth"/>
			<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			<bind name="scaleX" value="health/maxHealth"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<height value="3px"/>
				<width value="0px"/>
			</style>
			<bind name="repeat" value="maxHealth-1; 'PlaneHealthBarDivider'; { _sectorWidth: _barWidth / maxHealth }"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="PlaneHealthBarDivider">
		<style>
			<backgroundColor value="0x80000000"/>
			<width value="2px"/>
			<height value="3px"/>
		</style>
		<bind name="style" value="'marginLeft'; _sectorWidth-2 + 'px'"/>
	</block>
	<block className="ModulesState">
		<bind name="firstEntityDH" value="'entity'; CC.selfVehicle"/>
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<bottom value="0%"/>
			<paddingBottom value="358px"/>
			<left value="0%"/>
			<paddingLeft value="558px"/>
			<flow value="horizontal"/>
		</style>
		<bind name="repeat" value="entity.damageModuleList.value; 'ModuleItem'"/>
	</block>
	<block className="ModuleItem">
		<style>
			<width value="60px"/>
			<height value="60px"/>
		</style>
		<bind name="transition" value="moduleState &gt; 1; 0.15; {ubScaleX: 0}; {ubScaleX: -1}; {ubScaleX: 0}; 2; moduleState &gt; 1 ? 0 : 0.3"/>
		<bind name="var" value="{moduleNames:
							[
								'engine',
								'maingun',
								'atba',
								'aviation',
								'airdefence',
								'none',
								'torpedoes',
								'wheel',
								'none',
								'none',
								'fire',
								'flood'
							]
}"/>
		<bind name="entityDH" value="'moduleEntity'; $value"/>
		<bind name="watchDH" value="'moduleId'; []; moduleEntity.damageModule.moduleId"/>
		<bind name="watchDH" value="'moduleName'; []; moduleNames[moduleEntity.damageModule.moduleId]"/>
		<bind name="watchDH" value="'showTimer'; []; moduleEntity.damageModule.showTimer"/>
		<bind name="watchDH" value="'moduleState'; ['moduleEntity.damageModuleState.evStateChanged']; moduleEntity.damageModuleState.state"/>
		<bind name="watchDH" value="'timeLeft'; ['moduleEntity.damageModuleState.evTimeLeftChanged']; moduleEntity.damageModuleState.timeLeft"/>
		<bind name="watchDH" value="'timeFull'; ['moduleEntity.damageModuleState.evTimeFullChanged']; moduleEntity.damageModuleState.timeFull"/>
		<block className="ModuleItemView">
			<bind name="fade" value="moduleState &gt; 1; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0, scaleY: 0}; 2"/>
			<block>
				<style>
					<position value="absolute"/>
					<align value="center"/>
					<marginLeft value="-50%"/>
					<marginTop value="-50%"/>
				</style>
				<block type="text">
					<bind name="transition" value="timeLeft &gt; 0.3; 0.15; {alpha: 0, y: 10}; {alpha: 1, y: 0}; {alpha: 0, y: 10}; 2; timeLeft &lt; 0.31 ? 0 : 0.45"/>
					<styleClass value="$TextHUDBold"/>
					<style>
						<marginBottom value="2px"/>
					</style>
					<bind name="text" value="countdownFormat(timeLeft)"/>
				</block>
				<block>
					<block>
						<style>
							<position value="absolute"/>
							<top value="50%"/>
							<left value="50%"/>
						</style>
						<block className="lesta.display.Sector" type="native">
							<style>
								<position value="absolute"/>
								<alpha value="0.3"/>
								<width value="0px"/>
								<height value="0px"/>
							</style>
							<bind name="color" value="0xFF000000"/>
							<bind name="arc" value="360"/>
							<bind name="offset" value="0"/>
							<bind name="radius" value="26"/>
							<bind name="innerRadius" value="0"/>
						</block>
						<block className="lesta.display.Sector" type="native">
							<style>
								<position value="absolute"/>
								<width value="0px"/>
								<height value="0px"/>
							</style>
							<bind name="color" value="0xFFe75153"/>
							<bind name="arc" value="360 * (timeLeft/timeFull)"/>
							<bind name="offset" value="90"/>
							<bind name="radius" value="26"/>
							<bind name="innerRadius" value="24"/>
						</block>
					</block>
					<bind name="childParentScope" value="moduleEntity.damageModule.moduleId; {};
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									null;
									'ModuleState';
									'ModuleState';
									null;
									null;
									'BurnState';
									'FloodState'"/>
				</block>
			</block>
		</block>
	</block>
	<block className="ModuleItemView">
		<bind name="fade" value="moduleState &gt; 1; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0, scaleY: 0}; 2"/>
		<block>
			<style>
				<position value="absolute"/>
				<align value="center"/>
				<marginLeft value="-50%"/>
				<marginTop value="-50%"/>
			</style>
			<block type="text">
				<bind name="transition" value="timeLeft &gt; 0.3; 0.15; {alpha: 0, y: 10}; {alpha: 1, y: 0}; {alpha: 0, y: 10}; 2; timeLeft &lt; 0.31 ? 0 : 0.45"/>
				<styleClass value="$TextHUDBold"/>
				<style>
					<marginBottom value="2px"/>
				</style>
				<bind name="text" value="countdownFormat(timeLeft)"/>
			</block>
			<block>
				<block>
					<style>
						<position value="absolute"/>
						<top value="50%"/>
						<left value="50%"/>
					</style>
					<block className="lesta.display.Sector" type="native">
						<style>
							<position value="absolute"/>
							<alpha value="0.3"/>
							<width value="0px"/>
							<height value="0px"/>
						</style>
						<bind name="color" value="0xFF000000"/>
						<bind name="arc" value="360"/>
						<bind name="offset" value="0"/>
						<bind name="radius" value="26"/>
						<bind name="innerRadius" value="0"/>
					</block>
					<block className="lesta.display.Sector" type="native">
						<style>
							<position value="absolute"/>
							<width value="0px"/>
							<height value="0px"/>
						</style>
						<bind name="color" value="0xFFe75153"/>
						<bind name="arc" value="360 * (timeLeft/timeFull)"/>
						<bind name="offset" value="90"/>
						<bind name="radius" value="26"/>
						<bind name="innerRadius" value="24"/>
					</block>
				</block>
				<bind name="childParentScope" value="moduleEntity.damageModule.moduleId; {};
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									null;
									'ModuleState';
									'ModuleState';
									null;
									null;
									'BurnState';
									'FloodState'"/>
			</block>
		</block>
	</block>
	<block className="ModuleState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; (moduleState == 3 ? 'module_dead_' : 'module_crit_') + moduleName"/>
		</block>
		<block>
			<bind name="visible" value="moduleState == 2"/>
			<style>
				<position value="absolute"/>
				<backgroundSprite value="state_crit"/>
				<bottom value="-18px"/>
				<width value="24px"/>
				<height value="24px"/>
				<left value="50%"/>
				<marginLeft value="-50%"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="moduleState == 3"/>
			<style>
				<position value="absolute"/>
				<backgroundSprite value="state_dead"/>
				<bottom value="-14px"/>
				<width value="16px"/>
				<height value="16px"/>
				<left value="50%"/>
				<marginLeft value="-50%"/>
			</style>
		</block>
	</block>
	<block className="BurnState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
				<backgroundSprite value="state_fire_big"/>
			</style>
		</block>
	</block>
	<block className="FloodState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
				<backgroundSprite value="state_flood_big"/>
			</style>
		</block>
	</block>
	<block className="PopupDamageMarker">
		<style>
			<position value="absolute"/>
			<top value="-100px"/>
		</style>
		<bind name="handleEventDH" value="'entity.popupDamageGroup.evShowPopup'; 'evShowDamagePopup'"/>
		<bind name="watchDH" value="'isSelfDamage'; []; entity.popupDamageGroup.isSelfDamage"/>
		<bind name="fxInstance" value="'evShowDamagePopup'; 'DamagePopup'; {lifetime: 3, isSelfDamage: isSelfDamage}"/>
	</block>
	<block className="DamagePopup">
		<style>
			<position value="absolute"/>
			<width value="0px"/>
			<align value="center"/>
		</style>
		<bind name="watch" value="'hardDamage'; $args[1] &gt;= 2"/>
		<bind name="watch" value="'idletime'; hardDamage ? 0.9 : 0.6"/>
		<bind name="appear" value="'addedToStage'; 0.2; 0; {alpha: 0, top: -30, scaleX: hardDamage ? 5 : 3, scaleY: hardDamage ? 5 : 3}; {alpha: 1, top: 0, scaleX: 1, scaleY: 1}; 2"/>
		<bind name="appear" value="'addedToStage'; lifetime-idletime; idletime; {alpha: 1, top: 0}; {alpha: 0, top: -80}; 1"/>
		<bind name="repeat" value="$args[0]; 'DamagePopupItem'; {_isSelfDamage: isSelfDamage}"/>
	</block>
	<block className="DamagePopupItem">
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
		</style>
		<block>
			<bind name="repeat" value="modules; 'PopupModuleStateAdapter'"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block type="text">
			<bind name="visible" value="damage &gt; 0"/>
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="damageLevel &gt;= 2 ? '$TextHUD24Bold' : '$TextHUDBold'"/>
			<bind name="class" value="mirrorDamage ? '$TextColorHUDTK' : _isSelfDamage ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
			<bind name="text" value="format(damage, -1)"/>
		</block>
	</block>
	<block className="PopupModuleStateAdapter">
		<bind name="var" value="{moduleNames:
							[
								'engine',
								'maingun',
								'atba',
								'aviation',
								'airdefence',
								'none',
								'torpedoes',
								'wheel',
								'none',
								'none',
								'fire',
								'flood'
							]
}"/>
		<bind name="watch" value="'moduleName'; moduleNames[type]"/>
		<bind name="watch" value="'moduleState'; state"/>
		<block className="ModuleState">
			<block>
				<style>
					<width value="40px"/>
					<height value="40px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; (moduleState == 3 ? 'module_dead_' : 'module_crit_') + moduleName"/>
			</block>
			<block>
				<bind name="visible" value="moduleState == 2"/>
				<style>
					<position value="absolute"/>
					<backgroundSprite value="state_crit"/>
					<bottom value="-18px"/>
					<width value="24px"/>
					<height value="24px"/>
					<left value="50%"/>
					<marginLeft value="-50%"/>
				</style>
			</block>
			<block>
				<bind name="visible" value="moduleState == 3"/>
				<style>
					<position value="absolute"/>
					<backgroundSprite value="state_dead"/>
					<bottom value="-14px"/>
					<width value="16px"/>
					<height value="16px"/>
					<left value="50%"/>
					<marginLeft value="-50%"/>
				</style>
			</block>
		</block>
	</block>
	<block className="TargetAnimationQC">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="var" value="{ quickCommandImage:
		{
			Target_CMD:							'quick_command_target',
			Sender_CMD_QUICK_TACTIC:			'waves_mini_с',
			Sender_CMD_QUICK_AYE_AYE:			'qc_icon_yes_c',
			Sender_CMD_QUICK_NEED_VISION:		'qc_icon_vision_c',
			Sender_CMD_QUICK_NEED_SMOKE:		'qc_icon_smoke_c',
			Sender_CMD_QUICK_NEED_SUPPORT:		'qc_icon_support_c',
			Sender_CMD_QUICK_BACK:				'qc_icon_back_c',
			Sender_CMD_QUICK_NO_WAY:			'qc_icon_no_c',
			Sender_CMD_QUICK_NEED_AIR_DEFENCE:	'qc_icon_aa_c',
			Sender_CMD_QUICK_GOOD_LUCK:			'waves_mini_с',
			Sender_CMD_QUICK_GOOD_GAME:			'waves_mini_с',
			Sender_CMD_QUICK_THANK_YOU:			'waves_mini_с',
			Sender_CMD_QUICK_CARAMBA:			'waves_mini_с'

		}
	}"/>
		<bind name="var" value="{ hideAnimationPlayed: false }"/>
		<bind name="appear" value="hideAnimationPlayed ? 'noEvent' : 'hideQCFX'; 0.15; 0; {alpha: 1}; {alpha: 0}; 1"/>
		<bind name="catch" value="'hideQCFX'; { hideAnimationPlayed: true }"/>
		<block>
			<bind name="style" value="'backgroundSprite'; quickCommandImage[$args[0]]"/>
			<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0, top: -10}; {alpha: 1, top: 0}; 2"/>
			<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.15; {alpha: 1}; {alpha: 0}; 1"/>
		</block>
	</block>
	<block className="AnimationMiniMapQC">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="style" value="'backgroundSprite'; $args[0] == 'Target_CMD' ? 'attention_target' : 'attention_sender'"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0}; {alpha: 1}; 2"/>
		<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.15; {alpha: 1}; {alpha: 0}; 1"/>
	</block>
	<block className="ShipMarkersContainer">
		<bind name="mouseEnabled" value="false"/>
		<bind name="mouseChildren" value="false"/>
		<bind name="collectionRepeatDH" value="CC.screenPosition; 'SimpleMarker'; 'cameraDistanceSortedDescending'; {}"/>
		<block className="transparentPixel" type="native">
			<bind name="blurLayer" value="0"/>
		</block>
	</block>
	<block className="SimpleMarker">
		<style>
			<position value="absolute"/>
		</style>
		<params>
			<param name="name" value="SimpleMarker"/>
		</params>
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="watchDH" value="'type'; []; entity.entityType.value"/>
		<bind name="watchDH" value="'distance'; ['timerEntity.timer.evInfrequent']; format(entity.distance.distanceToShip, 1)"/>
		<bind name="watchDH" value="'tacticalMap'; ['cameraEntity.camera.evTacticalStateChanged']; cameraEntity.camera.isTactical"/>
		<bind name="watchDH" value="'isAdaptiveCameraMode'; ['cameraEntity.camera.evModeChanged']; cameraEntity.camera.mode == 8 || cameraEntity.camera.mode == 9"/>
		<bind name="name" value="'SimpleMarker ' + entity.id"/>
		<bind name="perFrameUpdate" value="{x : entity.screenPosition.position.x, y: entity.screenPosition.position.y}"/>
		<bind name="firstEntityDH" value="'selectedEntity'; CC.selectedMouseHandler"/>
		<bind name="watch" value="'isInFocus'; selectedEntity == entity"/>
		<bind name="watchDH" value="'targetFlags'; ['entity.target.evChanged']; entity.target ? entity.target.flags : 0"/>
		<bind name="watch" value="'isTargetLocked'; (targetFlags &amp; (1 &lt;&lt; WeaponType.ARTILLERY | 1 &lt;&lt; WeaponType.TORPEDO)) &gt; 0"/>
		<bind name="watch" value="'isATBAFocused'; (targetFlags &amp; (1 &lt;&lt; WeaponType.ATBA)) &gt; 0"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="handleEventDH" value="'entity.quickCommand.evPlay'; 'evPreShowTargetQuickCommand'"/>
		<bind name="catch" value="'evPreShowTargetQuickCommand'"/>
		<bind name="dispatch" value="'evPreShowTargetQuickCommand'; 'hideQCFX'; {}; 1"/>
		<bind name="dispatch" value="'evPreShowTargetQuickCommand'; 'evShowTargetQuickCommand'; { $args: $args}; 1; 0.05"/>
		<bind name="stageSize"/>
		<bind name="ubScaleX" value="1/uiScale"/>
		<bind name="ubScaleY" value="1/uiScale"/>
		<bind name="var" value="{ distancePostfix: tr('IDS_KILOMETER')}"/>
		<bind name="var" value="{ showTextContested: true }"/>
		<bind name="watch" value="'distanceScale';	distance &lt; 15 	?	1 :
									distance &lt; 20 	?	0.8 : 0.6"/>
		<bind name="watch" value="'distanceAlpha'; distance &lt;= 10 ? 1 : 1 - (distance - 10)*0.023"/>
		<bind name="watch" value="'applyAdaptiveScaleAndAlpha'; !(isAdaptiveCameraMode) || isInFocus || isTargetLocked"/>
		<bind name="watch" value="'scaleFinal'; (applyAdaptiveScaleAndAlpha ? 1.0 : distanceScale) * uiScale"/>
		<bind name="watch" value="'alphaFinal'; applyAdaptiveScaleAndAlpha ? 1.0 : distanceAlpha"/>
		<bind name="scaleX" value="scaleFinal"/>
		<bind name="scaleY" value="scaleFinal"/>
		<bind name="style" value="'alpha'; alphaFinal"/>
		<bind name="watchDH" value="'isAppearing'; ['entity.dissolve.evTransitionStarted']; entity.dissolve.appearing"/>
		<bind name="changeDispatch" value="isAppearing; 'evShipAppear'; {}; 1; true"/>
		<bind name="changeDispatch" value="isAppearing; 'evShipDisappear'; {}; 1; false"/>
		<bind name="appear" value="'addedToStage'; 0.5; 0; {alpha: 0}; {alpha: alphaFinal}; 1"/>
		<bind name="appear" value="'evShipDisappear'; 0.5; 0; {alpha: alphaFinal}; {alpha: 0}; 2"/>
		<bind name="childParentScope" value="type;
		'ShipMarker';
		'StabMarker';
		'CapturePointMarker';
		'EpicenterMarker';
		'NavpointMarker';
		'StabMarker';
		'PlaneMarker';
		'TorpedoMarker';
		'CameraMarker'; 
		'PopupDamageMarker'"/>
		<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
	</block>
	<block className="TorpedoMarker">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="style" value="'backgroundSprite'; entity.relation.value == 1 ? 'torpedo_markers_ally_c' : entity.relation.value == 2 ? 'torpedo_markers_enemy_c' : 'torpedo_markers_neutral_c'"/>
		<bind name="y" value="-4"/>
	</block>
	<block className="NavpointMarker">
		<bind name="var" value="{ navpointTypeNames: 
					[	
						'none',
						'move_to',
						'attack',
						'follow',
						'land',
						'move_to',
						'move_to',
						'autopilot',
						'attack',
						'attack'
					]
				}"/>
		<bind name="dataRefDH" value="'ownerEntity'; 'entity.navpoint.owner.ref'"/>
		<bind name="dataRefDH" value="'prevEntity'; 'entity.navpoint.prev.ref'"/>
		<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
		<bind name="watch" value="'navpointPlaneType'; planeTypes[ownerEntity.plane.planeType]"/>
		<bind name="watchDH" value="'navpointType'; []; entity.navpoint.type"/>
		<bind name="watchDH" value="'typeIconName'; []; type &gt; 0 ? navpointTypeNames[navpointType] : 'none'"/>
		<bind name="watchDH" value="'attackTypeIconName'; []; typeIconName == 'attack' ? 'attack_' + navpointPlaneType : 'none'"/>
		<bind name="watchDH" value="'ownerIsSelected'; ['ownerEntity.selection.evChanged']; ownerEntity.selection.value"/>
		<block>
			<bind name="visible" value="ownerIsSelected"/>
			<style>
				<backgroundSprite value="catapult_fighter_own_c"/>
			</style>
			<bind name="style" value="'backgroundSprite'; 'navpoint_' + (attackTypeIconName != 'none' ? attackTypeIconName : typeIconName) + '_c'"/>
		</block>
		<bind name="navpointLine" value="entity; prevEntity"/>
	</block>
	<block className="StabMarker">
		<style>
			<width value="10px"/>
			<height value="10px"/>
			<backgroundColor value="0x80FFFFFF"/>
		</style>
	</block>
	<block className="CameraMarker"/>
</ui>
