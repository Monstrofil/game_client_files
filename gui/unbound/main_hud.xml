
<ui>
	<css name="$TextHUD">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFont"/>
		<fontSize value="18"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUDBold">
		<fontFamily value="$WWSDefaultFontBold"/>
		<mouseEnabled value="false"/>
		<mouseChildren value="false"/>
		<fontSize value="18"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD24Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="24"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD22Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="22"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD16Bold">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="16"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextHUD16">
		<fontFamily value="$WWSDefaultFont"/>
		<mouseEnabled value="false"/>
		<mouseChildren value="false"/>
		<fontSize value="16"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextColorHUDAlly">
		<textColor value="0xFF80c0ff"/>
	</css>
	<css name="$TextColorHUDDivision">
		<textColor value="0xFFFFCC66"/>
	</css>
	<css name="$TextColorHUDTK">
		<textColor value="0xFFFF96CA"/>
	</css>
	<css name="$TextColorHUDAllyInvert">
		<textColor value="0xFF001b33"/>
	</css>
	<css name="$TextColorHUDEnemy">
		<textColor value="0xFFe75153"/>
	</css>
	<css name="$TextColorHUDEnemyInvert">
		<textColor value="0xFF330012"/>
	</css>
	<css name="$TextColorHUDNeutral">
		<textColor value="0xFFF1F1F1"/>
	</css>
	<css name="$TextColorHUDPositive">
		<textColor value="0xFF4CE8AA"/>
	</css>
	<css name="$TextColorHUDWarning">
		<textColor value="0xFFFF9933"/>
	</css>
	<css name="$TextColorHUDCritical">
		<textColor value="0xFFe75153"/>
	</css>
	<css name="$TextColorHUDDead">
		<textColor value="0xFF111111"/>
	</css>
	<css name="$TextColorHUDDark">
		<textColor value="0xFF000000"/>
	</css>
	<css name="$CapsTracking">
		<letterSpacing value="1.4"/>
	</css>
	<css name="$HUDFullsize">
		<width value="100%"/>
		<height value="100%"/>
	</css>
	<css name="$HUDFullsizeAbsolute">
		<width value="100%"/>
		<position value="absolute"/>
		<height value="100%"/>
	</css>
	<css name="$HUDMiddleAligned">
		<marginLeft value="-50%"/>
		<left value="50%"/>
	</css>
	<css name="$ZeroSize">
		<width value="0px"/>
		<height value="0px"/>
	</css>
	<block className="TraceTooltip">
		<block>
			<style>
				<maxHeight value="500"/>
				<overflow value="scroll"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<styleClass value="$DefaultScrollBar"/>
			<block type="text">
				<styleClass value="$TextDefault"/>
				<style>
					<textColor value="0xffffffff"/>
					<maxWidth value="600"/>
					<marginBottom value="3px"/>
				</style>
				<bind name="text" value="'_trace: ' + (_trace)"/>
			</block>
		</block>
	</block>
	<css name="$SlotNumPostion">
		<position value="absolute"/>
		<top value="2px"/>
		<right value="2px"/>
	</css>
	<block className="Controls">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<width value="100%"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<right value="0px"/>
				<paddingRight value="340px"/>
			</style>
			<block>
				<bind name="collectionRepeatDH" value="CC.weaponControl; 'SimpleControlItem'; ''; {}"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<block>
				<bind name="collectionRepeatDH" value="CC.carrierControl; 'SimpleControlItem'; ''; {}"/>
			</block>
			<block>
				<bind name="collectionRepeatDH" value="CC.planeControl; 'SimpleControlItem'; ''; {}"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<style>
				<paddingLeft value="416px"/>
			</style>
			<block>
				<style>
					<position value="absolute"/>
					<top value="-102px"/>
					<left value="-14px"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.atbaControl; 'SimpleControlItem'; ''; {}"/>
			</block>
			<block>
				<bind name="collectionRepeatDH" value="CC.battleConsumableControl; 'ConsumeControl'; ''; {}"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="NewStyleControls">
		<style>
			<flow value="horizontal"/>
		</style>
		<bind name="collectionRepeatDH" value="CC.weaponControl; 'SimpleControlItem'; ''; {}"/>
		<bind name="collectionRepeatDH" value="CC.battleConsumableControl; 'ConsumeControl'; ''; {}"/>
	</block>
	<block className="SimpleControlItem">
		<style>
			<marginLeft value="16px"/>
			<marginRight value="16px"/>
		</style>
		<bind name="entityDH" value="'entity'; $dataRef.ref.id"/>
		<bind name="watchDH" value="'selected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watchDH" value="'enabled'; ['entity.simpleControl.evChanged']; entity.simpleControl.enabled"/>
		<bind name="childParentScope" value="entity.simpleControl.controlType; {}; 'ArtilleryControl'; 'ATBAControl'; 'TorpedoControl'; 'PlaneControl'; null; 'ConsumeControl'; 'CarrierControl'"/>
	</block>
	<block className="ArtilleryControl">
		<style>
			<flow value="horizontal"/>
		</style>
		<bind name="repeat" value="entity.weaponControl.ammoTypes; 'ArtilleryAmmo'; {entityId : entity.id}"/>
	</block>
	<block className="ArtilleryAmmo">
		<style>
			<width value="64"/>
		</style>
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watchDH" value="'ammoIsSelected'; ['entity.weaponControl.evSelectedIndexChanged']; entity.weaponControl.selectedIndex == $index"/>
		<bind name="watchDH" value="'isNext'; ['entity.weaponControl.evNextSelectionIndexChanged']; entity.weaponControl.nextSelectionIndex == $index"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'timeRemain'; ['timerEntity.timer.evFrequent']; entity.countDown ? entity.countDown.endTime - timerEntity.timer.currentTime : 0"/>
		<bind name="watchDH" value="'reloadPercent'; []; entity.countDown ? 1 - timeRemain / entity.countDown.duration : 1"/>
		<bind name="watch" value="'showReload'; reloadPercent &lt; 1 &amp;&amp; ammoIsSelected &amp;&amp; (timeRemain &gt; 0.15)"/>
		<bind name="watch" value="'showReloadFx'; ammoIsSelected"/>
		<bind name="watchDH" value="'weaponIsDisabled'; ['entity.gunsCount.evChanged']; entity.gunsCount.countActiveGuns &lt;= 0 || entity.gunsCount.countAliveGuns &lt;= 0"/>
		<bind name="transition" value="weaponIsDisabled; 0.15; {alpha: 1}; {alpha:0.5}"/>
		<block>
			<style>
				<width value="64px"/>
				<height value="64px"/>
				<align value="center|bottom"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
					<align value="center|middle"/>
				</style>
				<bind name="transition" value="weaponIsSelected &amp;&amp; ammoIsSelected; 0.1; {width: 56, height: 56}; {width: 64, height: 64}; {width: 56, height: 56}; 2"/>
				<bind name="watch" value="'itemImageUrl'; '../consumables/ammo_' + toLowerCase($value) + '.png'"/>
				<block className="ItemImage">
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="100%"/>
						<backgroundSize value="cover"/>
					</style>
					<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
				</block>
				<block type="text">
					<styleClass value="$TextHUD16Bold"/>
					<styleClass value="$SlotNumPostion"/>
					<bind name="text" value="'IDS_AMMOTYPE_' + toUpperCase($value)"/>
				</block>
				<block className="ControlsProgressElement">
					<style>
						<width value="100%"/>
						<height value="100%"/>
						<align value="center|middle"/>
					</style>
					<block>
						<bind name="fade" value="showReload; 0.1; {alpha: 0}; {alpha:0.5}"/>
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.5"/>
							<backgroundColor value="0xFF000000"/>
						</style>
					</block>
					<block>
						<bind name="visible" value="showReload"/>
						<style>
							<position value="absolute"/>
							<top value="100%"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.25"/>
							<backgroundColor value="0xFFFF9933"/>
						</style>
						<bind name="style" value="'backgroundColor'; atWork ? 0xFF4CE8AA : 0xFFFF9933"/>
						<bind name="scaleY" value="-reloadPercent"/>
					</block>
					<block>
						<bind name="visible" value="showReloadFx"/>
						<style>
							<position value="absolute"/>
							<top value="50%"/>
							<left value="50%"/>
							<alpha value="0"/>
						</style>
						<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
						<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 0.8, scaleY: 0.8}; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; 1"/>
						<block>
							<style>
								<position value="absolute"/>
								<marginLeft value="-50%"/>
								<marginTop value="-50%"/>
								<width value="60px"/>
								<height value="60px"/>
								<backgroundColor value="0xFFF1F1F1"/>
							</style>
						</block>
					</block>
					<block type="text">
						<styleClass value="$TextHUDBold"/>
						<bind name="class" value="atWork ? '$TextColorHUDPositive' : '$TextColorHUDWarning'"/>
						<style>
							<fontSize value="28"/>
						</style>
						<bind name="fade" value="showReload; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
						<bind name="transition" value="timeRemain &gt;= 60; 0.15; {scaleX:1, ubScaleX:1, scaleY:1, ubScaleY:1}; {scaleX:0.8, ubScaleX:0.8, scaleY:0.8, ubScaleY:0.8}"/>
						<bind name="text" value="countdownFormat(timeRemain)"/>
					</block>
				</block>
				<block>
					<bind name="fade" value="weaponIsSelected &amp;&amp; (ammoIsSelected || isNext); 0.1; {alpha: 0}; {alpha:1}"/>
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="2px"/>
						<bottom value="0px"/>
					</style>
					<bind name="style" value="'backgroundColor'; isNext ? 0xFFFF9933 : 0xFFF1F1F1"/>
				</block>
			</block>
		</block>
		<bind name="watch" value="'showKey'; (!weaponIsSelected &amp;&amp; ammoIsSelected) || (weaponIsSelected &amp;&amp; !ammoIsSelected) || (weaponIsSelected &amp;&amp; isNext)"/>
		<block>
			<bind name="transition" value="showKey; showKey ? 0.1 : 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
			<style>
				<width value="64px"/>
				<marginTop value="4px"/>
				<align value="center"/>
			</style>
			<bind name="instance" value="'KeyIndicator'; weaponIsSelected ? {_cmd: isNext ? 'CMD_SELECT_NEXT_WEAPON_MODE' : 'CMD_NEXT_WEAPON_MODE', _skipCommandCallFx: true} : null"/>
			<bind name="instance" value="'KeyIndicator'; weaponIsSelected ? {_cmd: isNext ? '' : 'CMD_SELECT_AMMO', _skipCommandCallFx: true} : null"/>
			<bind name="instance" value="'KeyIndicator'; !weaponIsSelected ? {_cmd: 'CMD_NEXT_WEAPON_TYPE', _skipCommandCallFx: true} : null"/>
			<bind name="instance" value="'KeyIndicator'; !weaponIsSelected ? {_cmd: 'CMD_SELECT_AMMO', _skipCommandCallFx: true} : null"/>
		</block>
	</block>
	<block className="ATBAControl">
		<bind name="transition" value="!enabled; 0.1; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
		<block>
			<style>
				<width value="64"/>
				<height value="64"/>
			</style>
			<block>
				<style>
					<width value="56px"/>
					<height value="40px"/>
					<top value="20px"/>
					<backgroundSprite value="atba_aa_off"/>
				</style>
			</block>
		</block>
		<block>
			<style>
				<width value="64px"/>
				<height value="40px"/>
				<align value="center|middle"/>
			</style>
			<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_SWITCH_ATBA_AIRDEFENSE', _skipCommandCallFx: true}"/>
		</block>
	</block>
	<block className="TorpedoControl">
		<bind name="watchDH" value="'weaponIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watchDH" value="'selectedAngleIndex'; ['entity.weaponControl.evSelectedIndexChanged']; entity.weaponControl.selectedIndex"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'timeRemain'; ['timerEntity.timer.evFrequent']; entity.countDown ? entity.countDown.endTime - timerEntity.timer.currentTime : 0"/>
		<bind name="watchDH" value="'reloadPercent'; []; entity.countDown ? 1 - timeRemain / entity.countDown.duration : 1"/>
		<bind name="watch" value="'showReload'; (reloadPercent &lt; 1) &amp;&amp; (timeRemain &gt; 0.15)"/>
		<bind name="watchDH" value="'weaponIsDisabled'; ['entity.gunsCount.evChanged']; entity.gunsCount.countActiveGuns &lt;= 0 || entity.gunsCount.countAliveGuns &lt;= 0"/>
		<style>
			<flow value="horizontal"/>
		</style>
		<bind name="transition" value="weaponIsDisabled; 0.15; {alpha: 1}; {alpha: 0.5}"/>
		<block>
			<style>
				<align value="center|bottom"/>
			</style>
			<block>
				<bind name="transition" value="weaponIsSelected; 0.15; {alpha: 0.5}; {alpha: 1}"/>
				<style>
					<height value="64"/>
					<width value="30px"/>
					<align value="center|middle"/>
				</style>
				<bind name="repeat" value="entity.weaponControl.ammoTypes; 'TorpedoAngle'; {entityId : entity.id}"/>
			</block>
			<block>
				<bind name="transition" value="weaponIsSelected; 0.15; {alpha: 0}; {alpha: 1}"/>
				<style>
					<width value="30px"/>
					<marginTop value="4px"/>
					<align value="center"/>
				</style>
				<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_NEXT_WEAPON_MODE'}"/>
				<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_TORPEDOES_ANGLE'}"/>
			</block>
		</block>
		<block>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
					<align value="center|bottom"/>
				</style>
				<block>
					<style>
						<width value="64px"/>
						<height value="64px"/>
						<align value="center|middle"/>
					</style>
					<bind name="transition" value="weaponIsSelected; 0.1; {width: 56, height: 56}; {width: 64, height: 64}; {width: 56, height: 56}; 2"/>
					<block>
						<bind name="handleEventDH" value="'entity.weaponControl.evSelectedIndexChanged'; 'evChangeAngle'; {}; 2"/>
						<bind name="appear" value="'evChangeAngle'; 0.3; 0; {alpha: 0, left: 10}; {alpha: 1, left: 0}; 1"/>
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="100%"/>
							<backgroundSize value="fill"/>
						</style>
						<bind name="style" value="'backgroundSprite'; 'torpedo_angle_' + selectedAngleIndex"/>
					</block>
					<bind name="watch" value="'itemImageUrl'; '../consumables/ammo_torpedo.png'"/>
					<block className="ItemImage">
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="100%"/>
							<backgroundSize value="cover"/>
						</style>
						<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
					</block>
					<block className="ControlsProgressElement">
						<style>
							<width value="100%"/>
							<height value="100%"/>
							<align value="center|middle"/>
						</style>
						<block>
							<bind name="fade" value="showReload; 0.1; {alpha: 0}; {alpha:0.5}"/>
							<style>
								<position value="absolute"/>
								<width value="100%"/>
								<height value="100%"/>
								<alpha value="0.5"/>
								<backgroundColor value="0xFF000000"/>
							</style>
						</block>
						<block>
							<bind name="visible" value="showReload"/>
							<style>
								<position value="absolute"/>
								<top value="100%"/>
								<width value="100%"/>
								<height value="100%"/>
								<alpha value="0.25"/>
								<backgroundColor value="0xFFFF9933"/>
							</style>
							<bind name="style" value="'backgroundColor'; atWork ? 0xFF4CE8AA : 0xFFFF9933"/>
							<bind name="scaleY" value="-reloadPercent"/>
						</block>
						<block>
							<bind name="visible" value="showReloadFx"/>
							<style>
								<position value="absolute"/>
								<top value="50%"/>
								<left value="50%"/>
								<alpha value="0"/>
							</style>
							<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
							<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 0.8, scaleY: 0.8}; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; 1"/>
							<block>
								<style>
									<position value="absolute"/>
									<marginLeft value="-50%"/>
									<marginTop value="-50%"/>
									<width value="60px"/>
									<height value="60px"/>
									<backgroundColor value="0xFFF1F1F1"/>
								</style>
							</block>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<bind name="class" value="atWork ? '$TextColorHUDPositive' : '$TextColorHUDWarning'"/>
							<style>
								<fontSize value="28"/>
							</style>
							<bind name="fade" value="showReload; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
							<bind name="transition" value="timeRemain &gt;= 60; 0.15; {scaleX:1, ubScaleX:1, scaleY:1, ubScaleY:1}; {scaleX:0.8, ubScaleX:0.8, scaleY:0.8, ubScaleY:0.8}"/>
							<bind name="text" value="countdownFormat(timeRemain)"/>
						</block>
					</block>
					<block>
						<bind name="fade" value="weaponIsSelected; 0.1; {alpha: 0}; {alpha:1}"/>
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="2px"/>
							<bottom value="0px"/>
						</style>
						<bind name="style" value="'backgroundColor'; 0xFFF1F1F1"/>
					</block>
				</block>
			</block>
			<block>
				<bind name="transition" value="!weaponIsSelected; 0.1; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
				<style>
					<width value="64px"/>
					<marginTop value="4px"/>
					<align value="center"/>
				</style>
				<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_NEXT_WEAPON_TYPE', _skipCommandCallFx: true}"/>
				<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_TORPEDOES_ANGLE'}"/>
			</block>
		</block>
	</block>
	<block className="TorpedoAngle">
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'selectedIndex'; ['entity.weaponControl.evSelectedIndexChanged']; entity.weaponControl.selectedIndex"/>
		<bind name="watchDH" value="'nextSelectedIndex'; ['entity.weaponControl.evNextSelectionIndexChanged']; entity.weaponControl.nextSelectionIndex"/>
		<style>
			<width value="22px"/>
			<height value="22px"/>
			<marginTop value="1px"/>
			<marginBottom value="1px"/>
		</style>
		<bind name="style" value="'backgroundSprite'; 'torpedo_angle_selector_' + $index + (selectedIndex == $index ? '_selected' : '')"/>
	</block>
	<block className="PlaneControl">
		<style>
			<flow value="horizontal"/>
		</style>
		<bind name="repeat" value="entity.planeControl.planes; 'PlaneControlItem'"/>
	</block>
	<block className="PlaneControlItem">
		<style>
			<width value="64"/>
		</style>
		<bind name="entityDH" value="'entity'; $value"/>
		<bind name="var" value="{planeTypes: ['none', 'Dive', 'Bomber', 'Fighter']}"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watch" value="'showReload'; false"/>
		<bind name="watch" value="'showReloadFx'; false"/>
		<block>
			<style>
				<width value="64px"/>
				<height value="64px"/>
				<align value="center|bottom"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
					<align value="center|middle"/>
				</style>
				<bind name="transition" value="weaponIsSelected; 0.1; {width: 56, height: 56}; {width: 64, height: 64}; {width: 56, height: 56}; 2"/>
				<bind name="watch" value="'itemImageUrl'; '../consumables/ammo_' + planeTypes[entity.plane.planeType] + '.png'"/>
				<block className="ItemImage">
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="100%"/>
						<backgroundSize value="cover"/>
					</style>
					<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
				</block>
				<block type="text">
					<styleClass value="$TextHUD16Bold"/>
					<styleClass value="$SlotNumPostion"/>
					<bind name="text" value="'?'"/>
				</block>
				<block className="ControlsProgressElement">
					<style>
						<width value="100%"/>
						<height value="100%"/>
						<align value="center|middle"/>
					</style>
					<block>
						<bind name="fade" value="showReload; 0.1; {alpha: 0}; {alpha:0.5}"/>
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.5"/>
							<backgroundColor value="0xFF000000"/>
						</style>
					</block>
					<block>
						<bind name="visible" value="showReload"/>
						<style>
							<position value="absolute"/>
							<top value="100%"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.25"/>
							<backgroundColor value="0xFFFF9933"/>
						</style>
						<bind name="style" value="'backgroundColor'; atWork ? 0xFF4CE8AA : 0xFFFF9933"/>
						<bind name="scaleY" value="-reloadPercent"/>
					</block>
					<block>
						<bind name="visible" value="showReloadFx"/>
						<style>
							<position value="absolute"/>
							<top value="50%"/>
							<left value="50%"/>
							<alpha value="0"/>
						</style>
						<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
						<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 0.8, scaleY: 0.8}; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; 1"/>
						<block>
							<style>
								<position value="absolute"/>
								<marginLeft value="-50%"/>
								<marginTop value="-50%"/>
								<width value="60px"/>
								<height value="60px"/>
								<backgroundColor value="0xFFF1F1F1"/>
							</style>
						</block>
					</block>
					<block type="text">
						<styleClass value="$TextHUDBold"/>
						<bind name="class" value="atWork ? '$TextColorHUDPositive' : '$TextColorHUDWarning'"/>
						<style>
							<fontSize value="28"/>
						</style>
						<bind name="fade" value="showReload; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
						<bind name="transition" value="timeRemain &gt;= 60; 0.15; {scaleX:1, ubScaleX:1, scaleY:1, ubScaleY:1}; {scaleX:0.8, ubScaleX:0.8, scaleY:0.8, ubScaleY:0.8}"/>
						<bind name="text" value="countdownFormat(timeRemain)"/>
					</block>
				</block>
				<block>
					<bind name="fade" value="weaponIsSelected; 0.1; {alpha: 0}; {alpha:1}"/>
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="2px"/>
						<bottom value="0px"/>
						<backgroundColor value="0xFFF1F1F1"/>
					</style>
				</block>
			</block>
		</block>
		<block>
			<bind name="transition" value="weaponIsSelected; weaponIsSelected ? 0.1 : 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
			<style>
				<width value="64px"/>
				<height value="40px"/>
				<align value="center|middle"/>
			</style>
		</block>
	</block>
	<block className="CarrierControl">
		<style>
			<width value="64"/>
		</style>
		<bind name="watch" value="'weaponIsSelected'; selected"/>
		<block>
			<style>
				<width value="64px"/>
				<height value="64px"/>
				<align value="center|bottom"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
					<align value="center|middle"/>
				</style>
				<bind name="transition" value="weaponIsSelected; 0.1; {width: 56, height: 56}; {width: 64, height: 64}; {width: 56, height: 56}; 2"/>
				<bind name="watch" value="'itemImageUrl'; '../consumables/unit_carrier.png'"/>
				<block className="ItemImage">
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="100%"/>
						<backgroundSize value="cover"/>
					</style>
					<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
				</block>
				<block>
					<bind name="fade" value="weaponIsSelected; 0.1; {alpha: 0}; {alpha:1}"/>
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="2px"/>
						<bottom value="0px"/>
						<backgroundColor value="0xFFF1F1F1"/>
					</style>
				</block>
			</block>
		</block>
		<block>
			<bind name="transition" value="weaponIsSelected; weaponIsSelected ? 0.1 : 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
			<style>
				<width value="64px"/>
				<height value="40px"/>
				<align value="center|middle"/>
			</style>
		</block>
	</block>
	<block className="ConsumeControl">
		<style>
			<flow value="horizontal"/>
		</style>
		<bind name="collectionRepeatDH" value="CC.battleConsumable; 'ConsumeControlItem'; ''; {}"/>
	</block>
	<block className="ConsumeControlItem">
		<style>
			<width value="64"/>
		</style>
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'consumeNum'; ['entity.battleConsumable.evConsumeNumChanged']; entity.battleConsumable.consumeNum"/>
		<bind name="watchDH" value="'state'; ['entity.battleConsumable.evStateChanged']; entity.battleConsumable.state"/>
		<bind name="watchDH" value="'index'; ['entity.battleConsumable.evStateChanged']; entity.battleConsumable.index"/>
		<bind name="watch" value="'atWork'; state == 1"/>
		<bind name="watch" value="'isEmpty'; state == 3"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'timeRemain'; ['timerEntity.timer.evFrequent']; entity.countDown ? entity.countDown.endTime - timerEntity.timer.currentTime : 0"/>
		<bind name="watchDH" value="'reloadPercent'; []; entity.countDown ? (atWork ? timeRemain / entity.countDown.duration : 1 - timeRemain / entity.countDown.duration) : (atWork ? 1 : 0)"/>
		<bind name="watch" value="'showReload'; (reloadPercent &lt; 1) &amp;&amp; (timeRemain &gt; 0.15)"/>
		<bind name="watch" value="'showReloadFx'; true"/>
		<block>
			<style>
				<width value="64px"/>
				<height value="64px"/>
				<align value="center|bottom"/>
			</style>
			<block>
				<style>
					<width value="56px"/>
					<height value="56px"/>
					<align value="center|middle"/>
				</style>
				<bind name="transition" value="atWork; 0.1; {width: 56, height: 56}; {width: 64, height: 64}; {width: 56, height: 56}; 2"/>
				<bind name="watch" value="'itemImageUrl'; '../consumables/' + entity.battleConsumable.ident + (isEmpty ? '_empty' : '') + '.png'"/>
				<block className="ItemImage">
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="100%"/>
						<backgroundSize value="cover"/>
					</style>
					<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
				</block>
				<block type="text">
					<bind name="visible" value="consumeNum &gt; -1"/>
					<styleClass value="$TextHUD16Bold"/>
					<styleClass value="$SlotNumPostion"/>
					<bind name="text" value="consumeNum"/>
				</block>
				<block className="ControlsProgressElement">
					<style>
						<width value="100%"/>
						<height value="100%"/>
						<align value="center|middle"/>
					</style>
					<block>
						<bind name="fade" value="showReload; 0.1; {alpha: 0}; {alpha:0.5}"/>
						<style>
							<position value="absolute"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.5"/>
							<backgroundColor value="0xFF000000"/>
						</style>
					</block>
					<block>
						<bind name="visible" value="showReload"/>
						<style>
							<position value="absolute"/>
							<top value="100%"/>
							<width value="100%"/>
							<height value="100%"/>
							<alpha value="0.25"/>
							<backgroundColor value="0xFFFF9933"/>
						</style>
						<bind name="style" value="'backgroundColor'; atWork ? 0xFF4CE8AA : 0xFFFF9933"/>
						<bind name="scaleY" value="-reloadPercent"/>
					</block>
					<block>
						<bind name="visible" value="showReloadFx"/>
						<style>
							<position value="absolute"/>
							<top value="50%"/>
							<left value="50%"/>
							<alpha value="0"/>
						</style>
						<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
						<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 0.8, scaleY: 0.8}; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; 1"/>
						<block>
							<style>
								<position value="absolute"/>
								<marginLeft value="-50%"/>
								<marginTop value="-50%"/>
								<width value="60px"/>
								<height value="60px"/>
								<backgroundColor value="0xFFF1F1F1"/>
							</style>
						</block>
					</block>
					<block type="text">
						<styleClass value="$TextHUDBold"/>
						<bind name="class" value="atWork ? '$TextColorHUDPositive' : '$TextColorHUDWarning'"/>
						<style>
							<fontSize value="28"/>
						</style>
						<bind name="fade" value="showReload; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
						<bind name="transition" value="timeRemain &gt;= 60; 0.15; {scaleX:1, ubScaleX:1, scaleY:1, ubScaleY:1}; {scaleX:0.8, ubScaleX:0.8, scaleY:0.8, ubScaleY:0.8}"/>
						<bind name="text" value="countdownFormat(timeRemain)"/>
					</block>
				</block>
				<block>
					<bind name="fade" value="atWork; 0.1; {alpha: 0}; {alpha:1}"/>
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="2px"/>
						<bottom value="0px"/>
						<backgroundColor value="0xFF4CE8AA"/>
					</style>
				</block>
			</block>
		</block>
		<block>
			<bind name="transition" value="isEmpty; 0.15; {alpha: 1}; {alpha:0.5}"/>
			<style>
				<width value="64px"/>
				<height value="40px"/>
				<align value="center|middle"/>
			</style>
			<bind name="var" value="{consKeys: ['DPAD_UP', 'DPAD_RIGHT', 'DPAD_DOWN', 'DPAD_LEFT', 'A', 'B', 'DPAD_UP', 'DPAD_RIGHT', 'DPAD_DOWN', 'DPAD_LEFT', 'A', 'B']}"/>
			<bind name="instance" value="'KeyIndicator'; {_cmd: 'CMD_CONSUMABLE_' + index}"/>
		</block>
	</block>
	<block className="ControlsProgressElement">
		<style>
			<width value="100%"/>
			<height value="100%"/>
			<align value="center|middle"/>
		</style>
		<block>
			<bind name="fade" value="showReload; 0.1; {alpha: 0}; {alpha:0.5}"/>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<height value="100%"/>
				<alpha value="0.5"/>
				<backgroundColor value="0xFF000000"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="showReload"/>
			<style>
				<position value="absolute"/>
				<top value="100%"/>
				<width value="100%"/>
				<height value="100%"/>
				<alpha value="0.25"/>
				<backgroundColor value="0xFFFF9933"/>
			</style>
			<bind name="style" value="'backgroundColor'; atWork ? 0xFF4CE8AA : 0xFFFF9933"/>
			<bind name="scaleY" value="-reloadPercent"/>
		</block>
		<block>
			<bind name="visible" value="showReloadFx"/>
			<style>
				<position value="absolute"/>
				<top value="50%"/>
				<left value="50%"/>
				<alpha value="0"/>
			</style>
			<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
			<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 0.8, scaleY: 0.8}; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; 1"/>
			<block>
				<style>
					<position value="absolute"/>
					<marginLeft value="-50%"/>
					<marginTop value="-50%"/>
					<width value="60px"/>
					<height value="60px"/>
					<backgroundColor value="0xFFF1F1F1"/>
				</style>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="atWork ? '$TextColorHUDPositive' : '$TextColorHUDWarning'"/>
			<style>
				<fontSize value="28"/>
			</style>
			<bind name="fade" value="showReload; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 2"/>
			<bind name="transition" value="timeRemain &gt;= 60; 0.15; {scaleX:1, ubScaleX:1, scaleY:1, ubScaleY:1}; {scaleX:0.8, ubScaleX:0.8, scaleY:0.8, ubScaleY:0.8}"/>
			<bind name="text" value="countdownFormat(timeRemain)"/>
		</block>
	</block>
	<block className="HotkeyHint">
		<style>
			<width value="32px"/>
			<height value="32px"/>
		</style>
		<bind name="style" value="'backgroundSprite'; '[JOY_' + _key + ']'"/>
	</block>
	<block className="ItemImage">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<height value="100%"/>
			<backgroundSize value="cover"/>
		</style>
		<bind name="style" value="'backgroundImage'; 'url:' + itemImageUrl"/>
	</block>
	<block className="SpeedControl">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<left value="0%"/>
			<width value="100px"/>
			<paddingBottom value="42px"/>
			<paddingLeft value="286px"/>
		</style>
		<bind name="var" value="{ speedItemWidth: 50, speedItemHeight: 25, speedItemsNumber: entity.cruise.speedStates.length }"/>
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'speed'; ['entity.cruiseSpeed.evValueChanged']; entity.cruiseSpeed.value"/>
		<bind name="watchDH" value="'smokeSpeed'; ['']; entity.cruiseSmoke.smokeSpeed"/>
		<bind name="watchDH" value="'smokeEnabled'; ['entity.cruiseSmoke.evSmokeEnabledChanged']; entity.cruiseSmoke.smokeEnabled"/>
		<bind name="watchDH" value="'fwdItemsNum'; ['']; entity.cruise.speedStatesPositiveNum"/>
		<bind name="watchDH" value="'bwdItemsNum'; ['']; entity.cruise.speedStatesNegativeNum"/>
		<bind name="var" value="{ maxBackSpeed: 5 + entity.cruiseSpeed.max/4 }"/>
		<bind name="watch" value="'pointerPosition'; - speed / (speed &gt; 0 ? entity.cruiseSpeed.max : maxBackSpeed) * speedItemHeight * (speed &gt; 0 ? fwdItemsNum : bwdItemsNum)"/>
		<bind name="watch" value="'smokePointerPosition'; - smokeSpeed / entity.cruiseSpeed.max * speedItemHeight * fwdItemsNum"/>
		<bind name="var" value="{ forwardSpeedStepSize: entity.cruiseSpeed.max / fwdItemsNum, backSpeedStepSize: maxBackSpeed / 1 }"/>
		<bind name="watch" value="'relativeSpeedState'; speed &gt; 0 ? (speed / forwardSpeedStepSize)
												 : (speed / backSpeedStepSize)"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="x" value="speedItemWidth"/>
			<bind name="y" value="speedItemHeight * (fwdItemsNum + 0.5)"/>
			<bind name="instance" value="'SpeedPointer'; { _pointerPosition: pointerPosition, _speedItemHeight: speedItemHeight }"/>
			<bind name="instance" value="'SmokeSpeedPointer'; smokeEnabled ? { _smokePointerPosition: smokePointerPosition } : null"/>
		</block>
		<bind name="repeat" value="entity.cruise.speedStates; 'SpeedItem'; { _speedItemWidth: speedItemWidth, _speedItemHeight: speedItemHeight, _relativeSpeedState: relativeSpeedState }"/>
		<block>
			<style>
				<position value="absolute"/>
				<bottom value="-36px"/>
				<left value="10px"/>
			</style>
			<bind name="instance" value="'KeyIndicator'; {_cmd: 'CRUISE_SPEED_UP'}"/>
		</block>
	</block>
	<block className="SpeedItem">
		<style>
			<height value="1px"/>
			<width value="1px"/>
		</style>
		<bind name="width" value="_speedItemWidth"/>
		<bind name="height" value="_speedItemHeight"/>
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'state'; ['entity.cruiseSpeed.evStateChanged']; entity.cruiseSpeed.state"/>
		<bind name="watch" value="'isSet'; state == $dataRef.ref"/>
		<bind name="var" value="{ values: 	{
							'-1': 'FULL',
							'0' : 'STOP',
							'1' : '1/4',
							'2' : '1/2',
							'3' : '3/4',
							'4' : 'FULL'
							}
				}"/>
		<bind name="watch" value="'isHighlighted'; math.abs(_relativeSpeedState - $dataRef.ref) &lt; 0.5"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<height value="100%"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<bind name="fade" value="isHighlighted; 0.9; {alpha: 0}; {alpha: 0.35}"/>
		</block>
		<block>
			<bind name="transition" value="isSet; 0.1; {alpha: 0}; {alpha: 1}; {alpha:0}; 2"/>
			<style>
				<width value="100%"/>
				<height value="100%"/>
				<backgroundSize value="fill"/>
			</style>
			<bind name="style" value="'backgroundSprite'; state == 0 ? 'frame_warning' : 'frame_neutral'"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<top value="-1px"/>
				<textAlign value="center"/>
				<letterSpacing value="1.5"/>
			</style>
			<bind name="transition" value="isSet; 0.1; {alpha: 0.75}; {alpha: 1}; {alpha: 0.75}; 2"/>
			<bind name="text" value="values[$dataRef.ref]"/>
		</block>
	</block>
	<block className="SpeedPointer">
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'speed'; ['entity.cruiseSpeed.evValueChanged']; entity.cruiseSpeed.value"/>
		<bind name="watchDH" value="'smokeWarning'; ['entity.cruiseSmoke.evSmokeWarningChanged']; entity.cruiseSmoke.smokeWarning"/>
		<bind name="watchDH" value="'smokeEnabled'; ['entity.cruiseSmoke.evSmokeEnabledChanged']; entity.cruiseSmoke.smokeEnabled"/>
		<bind name="watch" value="'isSmokeSpeeding'; smokeWarning &amp;&amp; smokeEnabled"/>
		<bind name="y" value="_pointerPosition"/>
		<block>
			<style>
				<position value="absolute"/>
				<left value="4px"/>
			</style>
			<block className="pointer_left" type="native">
				<bind name="visible" value="!isSmokeSpeeding"/>
			</block>
			<block className="pointer_left_warning" type="native">
				<bind name="visible" value="isSmokeSpeeding"/>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="isSmokeSpeeding ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
			<style>
				<position value="absolute"/>
				<left value="10px"/>
				<top value="-14px"/>
			</style>
			<bind name="text" value="format(speed, 1) + ' kts'"/>
		</block>
	</block>
	<block className="SmokeSpeedPointer">
		<bind name="appear" value="'addedToStage'; 0.65; 0; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; 2"/>
		<bind name="y" value="_smokePointerPosition"/>
		<block>
			<style>
				<position value="absolute"/>
				<left value="4px"/>
			</style>
			<block className="pointer_left_warning" type="native">
				<bind name="scaleX" value="-1"/>
			</block>
		</block>
	</block>
	<block className="AngleControl">
		<bind name="fade" value="angle != 0 || isJammed; 0.1; {alpha: 0, top: 10}; {alpha:1, top: 0}; {alpha: 0, top: 10}; 2"/>
		<style>
			<position value="absolute"/>
			<width value="0px"/>
			<left value="50%"/>
			<bottom value="0%"/>
			<paddingBottom value="166px"/>
			<align value="center"/>
		</style>
		<bind name="var" value="{ angleItemWidth: 46 }"/>
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'angle'; ['entity.cruiseAngle.evValueChanged']; entity.cruiseAngle.value"/>
		<bind name="watchDH" value="'isJammed'; ['entity.cruiseAngle.evJammedChanged']; entity.cruiseAngle.jammed"/>
		<bind name="watchDH" value="'stepsNum'; ['']; entity.cruise.angleStatesPositiveNum"/>
		<bind name="var" value="{ angleStepSize: entity.cruiseAngle.max / stepsNum }"/>
		<bind name="watch" value="'relativeAngleState'; angle / angleStepSize"/>
		<block>
			<bind name="repeat" value="entity.cruise.angleStates; 'AngleItem'; { _angleItemWidth: angleItemWidth, _relativeAngleState: relativeAngleState }"/>
			<bind name="instance" value="'AnglePointer'; { _angleItemWidth: angleItemWidth, _stepsNum: stepsNum }"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="AngleItem">
		<style>
			<width value="1px"/>
			<height value="22px"/>
			<align value="center|middle"/>
		</style>
		<bind name="width" value="_angleItemWidth"/>
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'state'; ['entity.cruiseAngle.evStateChanged']; entity.cruiseAngle.state"/>
		<bind name="watchDH" value="'isJammed'; ['entity.cruiseAngle.evJammedChanged']; entity.cruiseAngle.jammed"/>
		<bind name="watch" value="'isSet'; state == $dataRef.ref"/>
		<bind name="var" value="{ values: 	{
							'-2': 'MAX',
							'-1': '1/2',
							'0' : '0',
							'1' : '1/2',
							'2' : 'MAX'
							}
				}"/>
		<bind name="watch" value="'isHighlighted'; math.abs(_relativeAngleState - $dataRef.ref) &lt; 0.5"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<height value="100%"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<bind name="fade" value="isHighlighted || isJammed; 0.9; {alpha: 0}; {alpha: 0.35}"/>
		</block>
		<block>
			<bind name="transition" value="isSet; 0.1; {alpha: 0}; {alpha: 1}; {alpha:0}; 2"/>
			<style>
				<height value="100%"/>
				<width value="100%"/>
				<backgroundSize value="fill"/>
			</style>
			<bind name="style" value="'backgroundSprite'; state == 0 ? 'frame_warning' : 'frame_neutral'"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="isJammed ? '$TextColorHUDCritical' : '$TextColorHUDNeutral'"/>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<top value="-2px"/>
				<textAlign value="center"/>
			</style>
			<bind name="transition" value="isSet || isJammed; 0.1; {alpha: 0.75}; {alpha: 1}; {alpha: 0.75}; 2"/>
			<bind name="text" value="values[$dataRef.ref]"/>
		</block>
	</block>
	<block className="AnglePointer">
		<bind name="firstEntityDH" value="'entity'; CC.cruise"/>
		<bind name="watchDH" value="'angle'; ['entity.cruiseAngle.evValueChanged']; entity.cruiseAngle.value"/>
		<bind name="x" value="((_stepsNum + 0.5) * _angleItemWidth + angle / entity.cruiseAngle.max * _angleItemWidth * _stepsNum)"/>
		<style>
			<position value="absolute"/>
			<top value="24px"/>
		</style>
		<block className="pointer_up" type="native"/>
	</block>
	<block className="OwnShipHealth">
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="watchDH" value="'currentVehicle'; ['cameraEntity.camera.evObservedShipChanged']; cameraEntity.camera.observedShipId"/>
		<bind name="primaryEntityDH" value="'entity'; CC.vehicleInfo; currentVehicle"/>
		<bind name="watch" value="'isAlive'; healthPercent &gt; 0"/>
		<bind name="watchDH" value="'shipInfoEntityId'; []; entity ? entity.vehicleInfo.shipInfoEntityId : shipInfoEntityId"/>
		<bind name="watchDH" value="'maxHealth'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity ? entity.health.max : maxHealth"/>
		<bind name="visible" value="shipInfoEntityId != null"/>
		<bind name="firstEntityDH" value="'avatar'; CC.playerAvatar"/>
		<bind name="watchDH" value="'isPlayerAlive'; ['avatar.health.evKilled']; avatar.health.isAlive"/>
		<bind name="entityDH" value="'shipInfo'; shipInfoEntityId"/>
		<bind name="watchDH" value="'shortName'; []; shipInfo.ship.shortName"/>
		<bind name="watchDH" value="'subtype'; []; shipInfo.ship.subtype"/>
		<bind name="watchDH" value="'levelRome'; []; shipInfo.ship.levelRome"/>
		<bind name="watchDH" value="'nameIDS'; []; shipInfo.ship.nameIDS"/>
		<bind name="var" value="{ barImageWidth: 186, barImageHeight: 48 }"/>
		<bind name="watchDH" value="'barVisibleLeft'; []; shipInfo.shipBarConfig.left"/>
		<bind name="watchDH" value="'barVisibleWidth'; []; barImageWidth - shipInfo.shipBarConfig.right - shipInfo.shipBarConfig.left"/>
		<bind name="watchDH" value="'healthValue'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'healthPercent'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity ? entity.health.value / maxHealth : 0"/>
		<bind name="watchDH" value="'regenValue'; ['entity.regeneration.evChanged']; entity.regeneration.value"/>
		<bind name="watchDH" value="'regenPercent'; ['entity.regeneration.evChanged']; entity.regeneration.maxValue / maxHealth"/>
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<left value="0%"/>
			<paddingBottom value="283px"/>
		</style>
		<bind name="var" value="{fxDelay: 0.6}"/>
		<bind name="var" value="{fxDelay: fxDelay}"/>
		<bind name="catch" value="'set'+'newHealthPercent'"/>
		<bind name="var" value="{newHealthPercent: -1}"/>
		<bind name="catch" value="'set'+'prevHealthPercent'"/>
		<bind name="var" value="{prevHealthPercent: -1}"/>
		<bind name="dispatch" value="'addedToStage'; 'set'+'prevHealthPercent'; {prevHealthPercent: healthPercent}"/>
		<bind name="changeDispatch" value="healthPercent; 'set'+'newHealthPercent'; {newHealthPercent: healthPercent}; 1"/>
		<bind name="changeDispatch" value="healthPercent; 'dispatchSet'+'prevHealthPercent'"/>
		<bind name="watch" value="'isUpChange'; newHealthPercent &gt; prevHealthPercent"/>
		<bind name="dispatch" value="'dispatchSet'+'prevHealthPercent'; 'set'+'prevHealthPercent'; {prevHealthPercent: healthPercent}; 0; isUpChange ? 0 : fxDelay"/>
		<block className="ShipLabel">
			<style>
				<flow value="horizontal"/>
				<align value="middle"/>
				<marginLeft value="2px"/>
				<marginTop value="20px"/>
			</style>
			<bind name="watch" value="'iconClass'; toLowerCase(subtype) + (isAlive ? '_own' : '_dead_ally') + '_c'"/>
			<block>
				<style>
					<left value="12px"/>
					<top value="13px"/>
					<marginRight value="4px"/>
					<width value="24px"/>
					<height value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; iconClass"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<bind name="class" value="isAlive ? '$TextColorHUDNeutral' : '$TextColorHUDDead'"/>
				<bind name="text" value="levelRome + ' ' + toUpperCase(tr(nameIDS))"/>
			</block>
		</block>
		<block className="OwnHealthBar">
			<style>
				<width value="1px"/>
				<height value="1px"/>
			</style>
			<bind name="width" value="barImageWidth"/>
			<bind name="height" value="barImageHeight"/>
			<bind name="x" value="-barVisibleLeft"/>
			<bind name="var" value="{ ctWarning: { 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:255,
								greenOffset:-40,
								blueOffset:-255,
								alphaOffset:0
							},
				ctCritical:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:255,
								greenOffset:-150,
								blueOffset:-130,
								alphaOffset:0
							},
				ctFXDown:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:50,
								greenOffset:50,
								blueOffset:50,
								alphaOffset:0
							},
				ctFXUp:		{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:-150,
								greenOffset:50,
								blueOffset:-15,
								alphaOffset:0
							},
				ctRegen:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:50,
								greenOffset:50,
								blueOffset:50,
								alphaOffset:-220
							},
				ctRegenActive:{ redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:-150,
								greenOffset:50,
								blueOffset:-15,
								alphaOffset:-150
							}
	}"/>
			<block className="OwnHealthBarBackground">
				<style>
					<width value="100%"/>
					<height value="100%"/>
					<position value="absolute"/>
					<backgroundSize value="crop"/>
				</style>
				<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + (isAlive ? '_h_bg.png' : '_h_bgdead.png')"/>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<position value="absolute"/>
				</style>
				<bind name="visible" value="isPlayerAlive"/>
				<block className="OwnHealthBarRegen">
					<style>
						<width value="1px"/>
						<height value="100%"/>
						<position value="absolute"/>
						<backgroundSize value="crop"/>
					</style>
					<bind name="width" value="barVisibleWidth * regenPercent + barVisibleLeft"/>
					<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
					<bind name="colorTransform" value="regenValue &gt; 0 ? ctRegenActive : ctRegen"/>
				</block>
				<block className="OwnHealthBarFX">
					<style>
						<width value="1px"/>
						<height value="100%"/>
						<position value="absolute"/>
						<backgroundSize value="crop"/>
					</style>
					<bind name="transition" value="newHealthPercent == 0 ? 0.1 : newHealthPercent; 0.3; { width: barVisibleWidth*prevHealthPercent + barVisibleLeft }; { width: barVisibleWidth*newHealthPercent + barVisibleLeft }; null; 1; isUpChange ? 0.05 : (fxDelay - 0.05)"/>
					<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
					<bind name="colorTransform" value="isUpChange ? ctFXUp : ctFXDown"/>
				</block>
			</block>
			<block className="OwnHealthBarValue">
				<style>
					<width value="1px"/>
					<height value="100%"/>
					<position value="absolute"/>
					<backgroundSize value="crop"/>
				</style>
				<bind name="style" value="'width'; (barVisibleWidth*newHealthPercent + barVisibleLeft)"/>
				<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
				<bind name="colorTransform" value="healthPercent &gt; 0.8 ? null : healthPercent &gt; 0.3 ? ctWarning : ctCritical"/>
			</block>
			<block className="FireFloodBar">
				<style>
					<width value="100%"/>
					<height value="100%"/>
					<position value="absolute"/>
				</style>
				<bind name="repeat" value="entity.burnModule.coordArray; 'FireItem'; {_entityId: entity.id}"/>
				<block className="FloodItem">
					<style>
						<position value="absolute"/>
						<top value="100%"/>
						<left value="50%"/>
						<width value="22px"/>
						<height value="22px"/>
					</style>
					<bind name="entityDH" value="'floodStateEntity'; entity.floodModule.stateEntity"/>
					<bind name="watchDH" value="'enabled'; ['floodStateEntity.damageModuleState.evStateChanged']; floodStateEntity.damageModuleState.state"/>
					<bind name="fade" value="enabled; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0.5, scaleY: 0.5}; 2"/>
					<block className="state_flood" type="native">
						<style>
							<position value="absolute"/>
							<top value="-11px"/>
							<left value="-11px"/>
						</style>
					</block>
				</block>
			</block>
		</block>
		<block className="ShipHealthLabel">
			<style>
				<flow value="horizontal"/>
				<marginTop value="8px"/>
				<align value="top"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD24Bold"/>
				<bind name="class" value="healthPercent &gt; 0.8 ? '$TextColorHUDNeutral' : healthPercent &gt; 0.3 ? '$TextColorHUDWarning' : isAlive ? '$TextColorHUDCritical' : '$TextColorHUDDead'"/>
				<bind name="text" value="format(healthValue, -1)"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUD"/>
				<style>
					<marginTop value="3px"/>
				</style>
				<bind name="text" value="'/ ' + format(maxHealth, -1)"/>
			</block>
		</block>
	</block>
	<block className="ShipLabel">
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
			<marginLeft value="2px"/>
			<marginTop value="20px"/>
		</style>
		<bind name="watch" value="'iconClass'; toLowerCase(subtype) + (isAlive ? '_own' : '_dead_ally') + '_c'"/>
		<block>
			<style>
				<left value="12px"/>
				<top value="13px"/>
				<marginRight value="4px"/>
				<width value="24px"/>
				<height value="12px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; iconClass"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="isAlive ? '$TextColorHUDNeutral' : '$TextColorHUDDead'"/>
			<bind name="text" value="levelRome + ' ' + toUpperCase(tr(nameIDS))"/>
		</block>
	</block>
	<block className="OwnHealthBar">
		<style>
			<width value="1px"/>
			<height value="1px"/>
		</style>
		<bind name="width" value="barImageWidth"/>
		<bind name="height" value="barImageHeight"/>
		<bind name="x" value="-barVisibleLeft"/>
		<bind name="var" value="{ ctWarning: { 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:255,
								greenOffset:-40,
								blueOffset:-255,
								alphaOffset:0
							},
				ctCritical:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:255,
								greenOffset:-150,
								blueOffset:-130,
								alphaOffset:0
							},
				ctFXDown:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:50,
								greenOffset:50,
								blueOffset:50,
								alphaOffset:0
							},
				ctFXUp:		{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:-150,
								greenOffset:50,
								blueOffset:-15,
								alphaOffset:0
							},
				ctRegen:	{ 	redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:50,
								greenOffset:50,
								blueOffset:50,
								alphaOffset:-220
							},
				ctRegenActive:{ redMultiplier:1,
								greenMultiplier:1,
								blueMultiplier:1,
								alphaMultiplier:1,
								redOffset:-150,
								greenOffset:50,
								blueOffset:-15,
								alphaOffset:-150
							}
	}"/>
		<block className="OwnHealthBarBackground">
			<style>
				<width value="100%"/>
				<height value="100%"/>
				<position value="absolute"/>
				<backgroundSize value="crop"/>
			</style>
			<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + (isAlive ? '_h_bg.png' : '_h_bgdead.png')"/>
		</block>
		<block>
			<style>
				<height value="100%"/>
				<position value="absolute"/>
			</style>
			<bind name="visible" value="isPlayerAlive"/>
			<block className="OwnHealthBarRegen">
				<style>
					<width value="1px"/>
					<height value="100%"/>
					<position value="absolute"/>
					<backgroundSize value="crop"/>
				</style>
				<bind name="width" value="barVisibleWidth * regenPercent + barVisibleLeft"/>
				<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
				<bind name="colorTransform" value="regenValue &gt; 0 ? ctRegenActive : ctRegen"/>
			</block>
			<block className="OwnHealthBarFX">
				<style>
					<width value="1px"/>
					<height value="100%"/>
					<position value="absolute"/>
					<backgroundSize value="crop"/>
				</style>
				<bind name="transition" value="newHealthPercent == 0 ? 0.1 : newHealthPercent; 0.3; { width: barVisibleWidth*prevHealthPercent + barVisibleLeft }; { width: barVisibleWidth*newHealthPercent + barVisibleLeft }; null; 1; isUpChange ? 0.05 : (fxDelay - 0.05)"/>
				<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
				<bind name="colorTransform" value="isUpChange ? ctFXUp : ctFXDown"/>
			</block>
		</block>
		<block className="OwnHealthBarValue">
			<style>
				<width value="1px"/>
				<height value="100%"/>
				<position value="absolute"/>
				<backgroundSize value="crop"/>
			</style>
			<bind name="style" value="'width'; (barVisibleWidth*newHealthPercent + barVisibleLeft)"/>
			<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
			<bind name="colorTransform" value="healthPercent &gt; 0.8 ? null : healthPercent &gt; 0.3 ? ctWarning : ctCritical"/>
		</block>
		<block className="FireFloodBar">
			<style>
				<width value="100%"/>
				<height value="100%"/>
				<position value="absolute"/>
			</style>
			<bind name="repeat" value="entity.burnModule.coordArray; 'FireItem'; {_entityId: entity.id}"/>
			<block className="FloodItem">
				<style>
					<position value="absolute"/>
					<top value="100%"/>
					<left value="50%"/>
					<width value="22px"/>
					<height value="22px"/>
				</style>
				<bind name="entityDH" value="'floodStateEntity'; entity.floodModule.stateEntity"/>
				<bind name="watchDH" value="'enabled'; ['floodStateEntity.damageModuleState.evStateChanged']; floodStateEntity.damageModuleState.state"/>
				<bind name="fade" value="enabled; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0.5, scaleY: 0.5}; 2"/>
				<block className="state_flood" type="native">
					<style>
						<position value="absolute"/>
						<top value="-11px"/>
						<left value="-11px"/>
					</style>
				</block>
			</block>
		</block>
	</block>
	<block className="ShipHealthLabel">
		<style>
			<flow value="horizontal"/>
			<marginTop value="8px"/>
			<align value="top"/>
		</style>
		<block type="text">
			<styleClass value="$TextHUD24Bold"/>
			<bind name="class" value="healthPercent &gt; 0.8 ? '$TextColorHUDNeutral' : healthPercent &gt; 0.3 ? '$TextColorHUDWarning' : isAlive ? '$TextColorHUDCritical' : '$TextColorHUDDead'"/>
			<bind name="text" value="format(healthValue, -1)"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUD"/>
			<style>
				<marginTop value="3px"/>
			</style>
			<bind name="text" value="'/ ' + format(maxHealth, -1)"/>
		</block>
	</block>
	<block className="OwnHealthBarBackground">
		<style>
			<width value="100%"/>
			<height value="100%"/>
			<position value="absolute"/>
			<backgroundSize value="crop"/>
		</style>
		<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + (isAlive ? '_h_bg.png' : '_h_bgdead.png')"/>
	</block>
	<block className="OwnHealthBarRegen">
		<style>
			<width value="1px"/>
			<height value="100%"/>
			<position value="absolute"/>
			<backgroundSize value="crop"/>
		</style>
		<bind name="width" value="barVisibleWidth * regenPercent + barVisibleLeft"/>
		<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
		<bind name="colorTransform" value="regenValue &gt; 0 ? ctRegenActive : ctRegen"/>
	</block>
	<block className="OwnHealthBarFX">
		<style>
			<width value="1px"/>
			<height value="100%"/>
			<position value="absolute"/>
			<backgroundSize value="crop"/>
		</style>
		<bind name="transition" value="newHealthPercent == 0 ? 0.1 : newHealthPercent; 0.3; { width: barVisibleWidth*prevHealthPercent + barVisibleLeft }; { width: barVisibleWidth*newHealthPercent + barVisibleLeft }; null; 1; isUpChange ? 0.05 : (fxDelay - 0.05)"/>
		<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
		<bind name="colorTransform" value="isUpChange ? ctFXUp : ctFXDown"/>
	</block>
	<block className="OwnHealthBarValue">
		<style>
			<width value="1px"/>
			<height value="100%"/>
			<position value="absolute"/>
			<backgroundSize value="crop"/>
		</style>
		<bind name="style" value="'width'; (barVisibleWidth*newHealthPercent + barVisibleLeft)"/>
		<bind name="style" value="'backgroundImage'; 'url:../ship_bars/' + shortName + '_h.png'"/>
		<bind name="colorTransform" value="healthPercent &gt; 0.8 ? null : healthPercent &gt; 0.3 ? ctWarning : ctCritical"/>
	</block>
	<block className="FireFloodBar">
		<style>
			<width value="100%"/>
			<height value="100%"/>
			<position value="absolute"/>
		</style>
		<bind name="repeat" value="entity.burnModule.coordArray; 'FireItem'; {_entityId: entity.id}"/>
		<block className="FloodItem">
			<style>
				<position value="absolute"/>
				<top value="100%"/>
				<left value="50%"/>
				<width value="22px"/>
				<height value="22px"/>
			</style>
			<bind name="entityDH" value="'floodStateEntity'; entity.floodModule.stateEntity"/>
			<bind name="watchDH" value="'enabled'; ['floodStateEntity.damageModuleState.evStateChanged']; floodStateEntity.damageModuleState.state"/>
			<bind name="fade" value="enabled; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0.5, scaleY: 0.5}; 2"/>
			<block className="state_flood" type="native">
				<style>
					<position value="absolute"/>
					<top value="-11px"/>
					<left value="-11px"/>
				</style>
			</block>
		</block>
	</block>
	<block className="FireItem">
		<style>
			<position value="absolute"/>
			<top value="50%"/>
			<width value="22px"/>
			<height value="22px"/>
		</style>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="entityDH" value="'shipInfo'; entity.vehicleInfo.shipInfoEntityId"/>
		<bind name="watchDH" value="'barLeft'; []; shipInfo.shipBarConfig.left"/>
		<bind name="watchDH" value="'barSize'; []; 186 - shipInfo.shipBarConfig.right - shipInfo.shipBarConfig.left"/>
		<bind name="watchDH" value="'burnPos'; []; entity.burnModule.coordArray[$index]"/>
		<bind name="watchDH" value="'burnData'; []; entity.burnModule.dataArray[$index]"/>
		<bind name="watchDH" value="'enabled'; ['entity.burnModule.evBurnFlagChanged']; (entity.burnModule.burnFlag &amp; 1 &lt;&lt; $index)"/>
		<bind name="x" value="barLeft + (barSize * burnPos)"/>
		<bind name="fade" value="!!enabled; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0.5, scaleY: 0.5}; 2"/>
		<block className="state_fire" type="native">
			<style>
				<position value="absolute"/>
				<top value="-11px"/>
				<left value="-11px"/>
			</style>
		</block>
	</block>
	<block className="FloodItem">
		<style>
			<position value="absolute"/>
			<top value="100%"/>
			<left value="50%"/>
			<width value="22px"/>
			<height value="22px"/>
		</style>
		<bind name="entityDH" value="'floodStateEntity'; entity.floodModule.stateEntity"/>
		<bind name="watchDH" value="'enabled'; ['floodStateEntity.damageModuleState.evStateChanged']; floodStateEntity.damageModuleState.state"/>
		<bind name="fade" value="enabled; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0.5, scaleY: 0.5}; 2"/>
		<block className="state_flood" type="native">
			<style>
				<position value="absolute"/>
				<top value="-11px"/>
				<left value="-11px"/>
			</style>
		</block>
	</block>
	<block className="ModulesState">
		<bind name="firstEntityDH" value="'entity'; CC.selfVehicle"/>
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<bottom value="0%"/>
			<paddingBottom value="358px"/>
			<left value="0%"/>
			<paddingLeft value="558px"/>
			<flow value="horizontal"/>
		</style>
		<bind name="repeat" value="entity.damageModuleList.value; 'ModuleItem'"/>
	</block>
	<block className="ModuleItem">
		<style>
			<width value="60px"/>
			<height value="60px"/>
		</style>
		<bind name="transition" value="moduleState &gt; 1; 0.15; {ubScaleX: 0}; {ubScaleX: -1}; {ubScaleX: 0}; 2; moduleState &gt; 1 ? 0 : 0.3"/>
		<bind name="var" value="{moduleNames:
							[
								'engine',
								'maingun',
								'atba',
								'aviation',
								'airdefence',
								'none',
								'torpedoes',
								'wheel',
								'none',
								'none',
								'fire',
								'flood'
							]
}"/>
		<bind name="entityDH" value="'moduleEntity'; $value"/>
		<bind name="watchDH" value="'moduleId'; []; moduleEntity.damageModule.moduleId"/>
		<bind name="watchDH" value="'moduleName'; []; moduleNames[moduleEntity.damageModule.moduleId]"/>
		<bind name="watchDH" value="'showTimer'; []; moduleEntity.damageModule.showTimer"/>
		<bind name="watchDH" value="'moduleState'; ['moduleEntity.damageModuleState.evStateChanged']; moduleEntity.damageModuleState.state"/>
		<bind name="watchDH" value="'timeLeft'; ['moduleEntity.damageModuleState.evTimeLeftChanged']; moduleEntity.damageModuleState.timeLeft"/>
		<bind name="watchDH" value="'timeFull'; ['moduleEntity.damageModuleState.evTimeFullChanged']; moduleEntity.damageModuleState.timeFull"/>
		<block className="ModuleItemView">
			<bind name="fade" value="moduleState &gt; 1; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0, scaleY: 0}; 2"/>
			<block>
				<style>
					<position value="absolute"/>
					<align value="center"/>
					<marginLeft value="-50%"/>
					<marginTop value="-50%"/>
				</style>
				<block type="text">
					<bind name="transition" value="timeLeft &gt; 0.3; 0.15; {alpha: 0, y: 10}; {alpha: 1, y: 0}; {alpha: 0, y: 10}; 2; timeLeft &lt; 0.31 ? 0 : 0.45"/>
					<styleClass value="$TextHUDBold"/>
					<style>
						<marginBottom value="2px"/>
					</style>
					<bind name="text" value="countdownFormat(timeLeft)"/>
				</block>
				<block>
					<block>
						<style>
							<position value="absolute"/>
							<top value="50%"/>
							<left value="50%"/>
						</style>
						<block className="lesta.display.Sector" type="native">
							<style>
								<position value="absolute"/>
								<alpha value="0.3"/>
								<width value="0px"/>
								<height value="0px"/>
							</style>
							<bind name="color" value="0xFF000000"/>
							<bind name="arc" value="360"/>
							<bind name="offset" value="0"/>
							<bind name="radius" value="26"/>
							<bind name="innerRadius" value="0"/>
						</block>
						<block className="lesta.display.Sector" type="native">
							<style>
								<position value="absolute"/>
								<width value="0px"/>
								<height value="0px"/>
							</style>
							<bind name="color" value="0xFFe75153"/>
							<bind name="arc" value="360 * (timeLeft/timeFull)"/>
							<bind name="offset" value="90"/>
							<bind name="radius" value="26"/>
							<bind name="innerRadius" value="24"/>
						</block>
					</block>
					<bind name="childParentScope" value="moduleEntity.damageModule.moduleId; {};
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									null;
									'ModuleState';
									'ModuleState';
									null;
									null;
									'BurnState';
									'FloodState'"/>
				</block>
			</block>
		</block>
	</block>
	<block className="ModuleItemView">
		<bind name="fade" value="moduleState &gt; 1; 0.3; {alpha: 0, scaleX: 3, scaleY: 3}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 0, scaleY: 0}; 2"/>
		<block>
			<style>
				<position value="absolute"/>
				<align value="center"/>
				<marginLeft value="-50%"/>
				<marginTop value="-50%"/>
			</style>
			<block type="text">
				<bind name="transition" value="timeLeft &gt; 0.3; 0.15; {alpha: 0, y: 10}; {alpha: 1, y: 0}; {alpha: 0, y: 10}; 2; timeLeft &lt; 0.31 ? 0 : 0.45"/>
				<styleClass value="$TextHUDBold"/>
				<style>
					<marginBottom value="2px"/>
				</style>
				<bind name="text" value="countdownFormat(timeLeft)"/>
			</block>
			<block>
				<block>
					<style>
						<position value="absolute"/>
						<top value="50%"/>
						<left value="50%"/>
					</style>
					<block className="lesta.display.Sector" type="native">
						<style>
							<position value="absolute"/>
							<alpha value="0.3"/>
							<width value="0px"/>
							<height value="0px"/>
						</style>
						<bind name="color" value="0xFF000000"/>
						<bind name="arc" value="360"/>
						<bind name="offset" value="0"/>
						<bind name="radius" value="26"/>
						<bind name="innerRadius" value="0"/>
					</block>
					<block className="lesta.display.Sector" type="native">
						<style>
							<position value="absolute"/>
							<width value="0px"/>
							<height value="0px"/>
						</style>
						<bind name="color" value="0xFFe75153"/>
						<bind name="arc" value="360 * (timeLeft/timeFull)"/>
						<bind name="offset" value="90"/>
						<bind name="radius" value="26"/>
						<bind name="innerRadius" value="24"/>
					</block>
				</block>
				<bind name="childParentScope" value="moduleEntity.damageModule.moduleId; {};
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									'ModuleState';
									null;
									'ModuleState';
									'ModuleState';
									null;
									null;
									'BurnState';
									'FloodState'"/>
			</block>
		</block>
	</block>
	<block className="ModuleState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; (moduleState == 3 ? 'module_dead_' : 'module_crit_') + moduleName"/>
		</block>
		<block>
			<bind name="visible" value="moduleState == 2"/>
			<style>
				<position value="absolute"/>
				<backgroundSprite value="state_crit"/>
				<bottom value="-18px"/>
				<width value="24px"/>
				<height value="24px"/>
				<left value="50%"/>
				<marginLeft value="-50%"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="moduleState == 3"/>
			<style>
				<position value="absolute"/>
				<backgroundSprite value="state_dead"/>
				<bottom value="-14px"/>
				<width value="16px"/>
				<height value="16px"/>
				<left value="50%"/>
				<marginLeft value="-50%"/>
			</style>
		</block>
	</block>
	<block className="BurnState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
				<backgroundSprite value="state_fire_big"/>
			</style>
		</block>
	</block>
	<block className="FloodState">
		<block>
			<style>
				<width value="40px"/>
				<height value="40px"/>
				<backgroundSprite value="state_flood_big"/>
			</style>
		</block>
	</block>
	<block className="CompassContainer">
		<style>
			<position value="absolute"/>
			<left value="0%"/>
			<bottom value="0%"/>
			<paddingLeft value="20px"/>
			<paddingBottom value="20px"/>
			<width value="241px"/>
			<height value="241px"/>
			<align value="center|middle"/>
		</style>
		<bind name="firstEntityDH" value="'cross'; CC.crosshair"/>
		<bind name="watchDH" value="'isAlive'; ['cross.health.evKilled']; cross.health.isAlive"/>
		<bind name="watchDH" value="'cameraDiffYaw'; ['cross.aimLock.evCameraDiffYawChanged']; math.radToGrad(cross.aimLock.cameraDiffYaw)"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="watchDH" value="'currentVehicle'; ['cameraEntity.camera.evObservedShipChanged']; cameraEntity.camera.observedShipId"/>
		<bind name="primaryEntityDH" value="'vehicleEntity'; CC.vehicle; currentVehicle"/>
		<bind name="watchDH" value="'frustumAngle'; ['cameraEntity.camera.evFrustumAngleChanged']; math.radToGrad(cameraEntity.camera.frustumAngle)"/>
		<bind name="watchDH" value="'frustumAngleRads'; ['cameraEntity.camera.evFrustumAngleChanged']; cameraEntity.camera.frustumAngle"/>
		<bind name="watchDH" value="'cameraMode'; ['cameraEntity.camera.evModeChanged']; cameraEntity.camera.mode"/>
		<bind name="watchDH" value="'cameraYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(cameraEntity.camera.yaw)"/>
		<bind name="watchDH" value="'shipYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(vehicleEntity.mapPosition.yaw)"/>
		<block>
			<block className="Frustum">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="visible" value="isAlive"/>
				<bind name="transition" value="cameraMode == 8; 0.3; {alpha: 0}; {alpha: 1}"/>
				<block className="lesta.display.Sector" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="colors" value="[0xFFF1F1F1, 0xFFF1F1F1]"/>
					<bind name="alphas" value="[0.15, 0]"/>
					<bind name="ratios" value="[80, 255]"/>
					<bind name="arc" value="math.radToGrad(frustumAngleRads)"/>
					<bind name="offset" value="-math.radToGrad(frustumAngleRads/2) - 90"/>
					<bind name="radius" value="120"/>
					<bind name="innerRadius" value="0"/>
				</block>
				<block className="frustum_angle_edge" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="rotation" value="-frustumAngle/2"/>
				</block>
				<block className="frustum_angle_edge" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="rotation" value="frustumAngle/2"/>
				</block>
				<block className="frustum_aiming_line" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="rotation" value="-cameraDiffYaw"/>
				</block>
			</block>
			<block className="Compass">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="rotation" value="-cameraYaw"/>
				<block>
					<style>
						<width value="241px"/>
						<height value="241px"/>
						<alpha value="0.75"/>
						<backgroundSprite value="compass"/>
					</style>
				</block>
				<block className="ShipDoll">
					<bind name="primaryEntityDH" value="'vehicleInfoEntity'; CC.vehicleInfo; currentVehicle"/>
					<bind name="watchDH" value="'shipInfoEntityId'; []; vehicleInfoEntity ? vehicleInfoEntity.vehicleInfo.shipInfoEntityId : shipInfoEntityId"/>
					<bind name="visible" value="shipInfoEntityId != null"/>
					<style>
						<position value="absolute"/>
					</style>
					<bind name="rotation" value="shipYaw"/>
					<block>
						<style>
							<width value="50px"/>
							<height value="196px"/>
							<alpha value="0.75"/>
							<backgroundSprite value="compass_ship"/>
						</style>
					</block>
					<bind name="instance" value="'ShipDollGuns'; isAlive ? {} : null"/>
				</block>
			</block>
			<block className="GunsRotator">
				<bind name="visible" value="isAlive"/>
				<style>
					<position value="absolute"/>
				</style>
				<bind name="rotation" value="-cameraDiffYaw"/>
				<bind name="collectionRepeatDH" value="CC.weapon; 'GunsRotatorList'; ''; {}"/>
			</block>
		</block>
	</block>
	<block className="Frustum">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="visible" value="isAlive"/>
		<bind name="transition" value="cameraMode == 8; 0.3; {alpha: 0}; {alpha: 1}"/>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="colors" value="[0xFFF1F1F1, 0xFFF1F1F1]"/>
			<bind name="alphas" value="[0.15, 0]"/>
			<bind name="ratios" value="[80, 255]"/>
			<bind name="arc" value="math.radToGrad(frustumAngleRads)"/>
			<bind name="offset" value="-math.radToGrad(frustumAngleRads/2) - 90"/>
			<bind name="radius" value="120"/>
			<bind name="innerRadius" value="0"/>
		</block>
		<block className="frustum_angle_edge" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="-frustumAngle/2"/>
		</block>
		<block className="frustum_angle_edge" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="frustumAngle/2"/>
		</block>
		<block className="frustum_aiming_line" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="-cameraDiffYaw"/>
		</block>
	</block>
	<block className="Compass">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="rotation" value="-cameraYaw"/>
		<block>
			<style>
				<width value="241px"/>
				<height value="241px"/>
				<alpha value="0.75"/>
				<backgroundSprite value="compass"/>
			</style>
		</block>
		<block className="ShipDoll">
			<bind name="primaryEntityDH" value="'vehicleInfoEntity'; CC.vehicleInfo; currentVehicle"/>
			<bind name="watchDH" value="'shipInfoEntityId'; []; vehicleInfoEntity ? vehicleInfoEntity.vehicleInfo.shipInfoEntityId : shipInfoEntityId"/>
			<bind name="visible" value="shipInfoEntityId != null"/>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="shipYaw"/>
			<block>
				<style>
					<width value="50px"/>
					<height value="196px"/>
					<alpha value="0.75"/>
					<backgroundSprite value="compass_ship"/>
				</style>
			</block>
			<bind name="instance" value="'ShipDollGuns'; isAlive ? {} : null"/>
		</block>
	</block>
	<block className="ShipDoll">
		<bind name="primaryEntityDH" value="'vehicleInfoEntity'; CC.vehicleInfo; currentVehicle"/>
		<bind name="watchDH" value="'shipInfoEntityId'; []; vehicleInfoEntity ? vehicleInfoEntity.vehicleInfo.shipInfoEntityId : shipInfoEntityId"/>
		<bind name="visible" value="shipInfoEntityId != null"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="rotation" value="shipYaw"/>
		<block>
			<style>
				<width value="50px"/>
				<height value="196px"/>
				<alpha value="0.75"/>
				<backgroundSprite value="compass_ship"/>
			</style>
		</block>
		<bind name="instance" value="'ShipDollGuns'; isAlive ? {} : null"/>
	</block>
	<block className="ShipDollGuns">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="collectionRepeatDH" value="CC.weapon; 'ShipDollGunsList'; ''; {}"/>
	</block>
	<block className="ShipDollGunsList">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="dataRefDH" value="'weaponEntity'; '$dataRef.ref'"/>
		<bind name="repeat" value="weaponEntity.weapon.guns; 'ShipDollGun'; {_entityId: weaponEntity.id}"/>
	</block>
	<block className="ShipDollGun">
		<bind name="firstEntityDH" value="'vehicleEntity'; CC.selfVehicle"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'weaponEntity'; _entityId"/>
		<bind name="entityDH" value="'gunEntity'; $value"/>
		<bind name="watchDH" value="'weaponType'; []; weaponEntity.weapon.type"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['weaponEntity.selection.evChanged']; weaponEntity.selection.value"/>
		<bind name="watchDH" value="'isAiming'; ['timerEntity.timer.evFrequent']; gunEntity.gun.rotationState != 1"/>
		<bind name="watchDH" value="'cantAim'; ['timerEntity.timer.evFrequent']; gunEntity.gun.rotationState == 3"/>
		<bind name="watchDH" value="'isReloading'; []; !!(gunEntity.countDown)"/>
		<bind name="watchDH" value="'healthState'; ['timerEntity.timer.evFrequent']; gunEntity.gun.healthState"/>
		<bind name="watch" value="'isCrit'; healthState == 2"/>
		<bind name="watch" value="'isDead'; healthState == 3"/>
		<bind name="watchDH" value="'gunYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(gunEntity.gun.gunYaw)"/>
		<bind name="watchDH" value="'shipYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(vehicleEntity.mapPosition.yaw)"/>
		<bind name="alpha" value="weaponIsSelected &amp;&amp; cantAim ? 0.5 : weaponIsSelected ? 1 : 0.25"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="var" value="{guns_rows: 7, guns_cols: 3, guns_width: 45, guns_height: 154}"/>
		<bind name="y" value="(gunEntity.gun.x + 0.5) * guns_height / guns_rows - guns_height / 2"/>
		<bind name="x" value="(guns_cols - gunEntity.gun.y - 0.5) * guns_width / guns_cols - guns_width / 2"/>
		<bind name="rotation" value="gunYaw - shipYaw"/>
		<bind name="childParentScope" value="isDead ? 1 : weaponType; {}; 'ShipDollArtillery'; 'ShipDollDeadGun'; 'ShipDollTorpedo'"/>
	</block>
	<block className="ShipDollArtillery">
		<style>
			<position value="absolute"/>
			<width value="12px"/>
			<height value="16px"/>
		</style>
		<bind name="style" value="'backgroundSprite'; isCrit ? 'compass_gun_critical' : isReloading || cantAim || isAiming ? 'compass_gun_warning' : 'compass_gun_neutral'"/>
	</block>
	<block className="ShipDollTorpedo">
		<style>
			<position value="absolute"/>
			<width value="10px"/>
			<height value="12px"/>
		</style>
		<bind name="style" value="'backgroundSprite'; isCrit ? 'compass_torpedo_critical' : isReloading || cantAim || isAiming ? 'compass_torpedo_warning' : 'compass_torpedo_neutral'"/>
	</block>
	<block className="ShipDollDeadGun">
		<bind name="rotation" value="-gunYaw"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="14px"/>
				<height value="14px"/>
				<backgroundSprite value="state_dead"/>
			</style>
			<bind name="x" value="-7"/>
			<bind name="y" value="-7"/>
		</block>
	</block>
	<block className="GunsRotator">
		<bind name="visible" value="isAlive"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="rotation" value="-cameraDiffYaw"/>
		<bind name="collectionRepeatDH" value="CC.weapon; 'GunsRotatorList'; ''; {}"/>
	</block>
	<block className="GunsRotatorList">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="dataRefDH" value="'weaponEntity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['weaponEntity.selection.evChanged']; weaponEntity.selection.value"/>
		<bind name="fade" value="weaponIsSelected; 0.15; {alpha: 0}; {alpha: 1}"/>
		<block>
			<bind name="repeat" value="weaponEntity.weapon.guns; 'GunsRotatorItem'; {_entityId: weaponEntity.id}"/>
		</block>
		<bind name="var" value="{cantAim: false, isAimed: true}"/>
		<bind name="watchDH" value="'isReloading'; ['weaponEntity.weaponReady.evChanged']; weaponEntity.weaponReady.aimed ? weaponEntity.weaponReady.reloadPercent &lt; 1 : 1"/>
		<bind name="watchDH" value="'isCrit'; ['weaponEntity.gunsCount.evChanged']; weaponEntity.gunsCount.countAliveGuns &gt; 0 &amp;&amp; weaponEntity.gunsCount.countActiveGuns == 0"/>
		<bind name="watchDH" value="'isVisible'; ['weaponEntity.weaponReady.evChanged']; weaponEntity.weaponReady.aimed &amp;&amp; weaponEntity.selection.value"/>
		<block className="GunsRotatorItemRenderer">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="alpha" value="cantAim ? 0.5 : 1"/>
			<bind name="visible" value="isVisible"/>
			<bind name="y" value="-115"/>
			<block>
				<style>
					<position value="absolute"/>
					<width value="8px"/>
					<height value="8px"/>
					<backgroundSize value="fill"/>
				</style>
				<bind name="style" value="'backgroundSprite'; isCrit	? 'compass_gun_aim_critical' : isReloading || cantAim || isAiming ? 'compass_gun_aim_warning' : 'compass_gun_aim_neutral'"/>
			</block>
		</block>
	</block>
	<block className="GunsRotatorItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="entityDH" value="'weaponEntity'; _entityId"/>
		<bind name="entityDH" value="'gunEntity'; $value"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'aimDiff'; ['timerEntity.timer.evFrequent']; gunEntity.gun.aimDiff"/>
		<bind name="rotation" value="-aimDiff"/>
		<bind name="var" value="{isAimed: false}"/>
		<bind name="watchDH" value="'isReloading'; []; !!(gunEntity.countDown)"/>
		<bind name="watchDH" value="'cantAim'; ['timerEntity.timer.evFrequent']; gunEntity.gun.rotationState == 3"/>
		<bind name="watchDH" value="'isCrit'; ['timerEntity.timer.evFrequent']; gunEntity.gun.healthState == 2"/>
		<bind name="watchDH" value="'isVisible'; ['timerEntity.timer.evFrequent']; (gunEntity.gun.rotationState != 1) || isCrit"/>
		<bind name="watchDH" value="'isAiming'; ['timerEntity.timer.evFrequent']; gunEntity.gun.rotationState != 1"/>
		<block className="GunsRotatorItemRenderer">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="alpha" value="cantAim ? 0.5 : 1"/>
			<bind name="visible" value="isVisible"/>
			<bind name="y" value="-115"/>
			<block>
				<style>
					<position value="absolute"/>
					<width value="8px"/>
					<height value="8px"/>
					<backgroundSize value="fill"/>
				</style>
				<bind name="style" value="'backgroundSprite'; isCrit	? 'compass_gun_aim_critical' : isReloading || cantAim || isAiming ? 'compass_gun_aim_warning' : 'compass_gun_aim_neutral'"/>
			</block>
		</block>
	</block>
	<block className="GunsRotatorItemRenderer">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="alpha" value="cantAim ? 0.5 : 1"/>
		<bind name="visible" value="isVisible"/>
		<bind name="y" value="-115"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="8px"/>
				<height value="8px"/>
				<backgroundSize value="fill"/>
			</style>
			<bind name="style" value="'backgroundSprite'; isCrit	? 'compass_gun_aim_critical' : isReloading || cantAim || isAiming ? 'compass_gun_aim_warning' : 'compass_gun_aim_neutral'"/>
		</block>
	</block>
	<block className="WeaponReloadBarExtended">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<bottom value="0%"/>
			<align value="center|middle"/>
		</style>
		<bind name="style" value="'paddingBottom'; (sumRowCount == 1 ? 43 : sumRowCount == 2 ? 81 : 111) + 'px'"/>
		<bind name="watch" value="'sumRowCount'; secondWeaponRowCount + firstWeaponRowCount"/>
		<bind name="collectionDH" value="CC.weapon; 'weapons'; ''"/>
		<bind name="watch" value="'firstWeaponRowCount';		weapons[0].weapon.guns.length &gt; 7 ? 2 : weapons[0].weapon.guns.length &lt; 1 ? 0 : 1"/>
		<bind name="watch" value="'secondWeaponRowCount';	weapons[1].weapon.guns.length &gt; 7 ? 2 : weapons[1].weapon.guns.length &lt; 1 ? 0 : 1"/>
		<bind name="watch" value="'rowCount'; [secondWeaponRowCount, firstWeaponRowCount]"/>
		<block>
			<bind name="collectionRepeatDH" value="CC.weapon; 'WeaponTypeContainerExtended'; ''; {}"/>
		</block>
	</block>
	<block className="WeaponTypeContainerExtended">
		<bind name="watch" value="'weaponType'; entity.weapon.type == 0 ? 'main_caliber' : 'torpedo'"/>
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watchDH" value="'gunsCount'; []; entity.weapon.guns.length"/>
		<bind name="watch" value="'barWidth';	gunsCount &gt; 3 ? 38 :
								gunsCount &gt; 1 ? 80 : 180"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'cross'; CC.crosshair"/>
		<bind name="collectionDH" value="CC.weapon; 'weapons'; ''"/>
		<bind name="watch" value="'firstWeaponRowCount';		weapons[0].weapon.guns.length &gt; 7 ? 2 : weapons[0].weapon.guns.length &lt; 1 ? 0 : 1"/>
		<bind name="watch" value="'secondWeaponRowCount';	weapons[1].weapon.guns.length &gt; 7 ? 2 : weapons[1].weapon.guns.length &lt; 1 ? 0 : 1"/>
		<bind name="watch" value="'rowCount'; [secondWeaponRowCount, firstWeaponRowCount]"/>
		<style>
			<align value="center"/>
			<marginLeft value="-50%"/>
			<position value="absolute"/>
		</style>
		<bind name="transition" value="weaponIsSelected; 0.25;	{y: rowCount[$index] * 30 + 8, alpha: 0.5};
												{y: 0, alpha: 1};
												{y: rowCount[$index] * 30 + 8, alpha: 0.5}; 2"/>
		<block>
			<style>
				<flow value="htile"/>
				<align value="center"/>
				<width value="365px"/>
			</style>
			<block>
				<style>
					<left value="-24px"/>
					<width value="1px"/>
					<top value="-10px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; weaponType + '_guns'"/>
				<bind name="visible" value="weapons.length &gt; 1"/>
			</block>
			<bind name="repeat" value="entity.weapon.guns; 'BarItem'; {_barWidth: barWidth}"/>
		</block>
	</block>
	<block className="WeaponReloadBar">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<bottom value="0%"/>
			<paddingBottom value="20px"/>
			<align value="center|middle"/>
		</style>
		<bind name="collectionRepeatDH" value="CC.weapon; 'WeaponTypeContainer'; ''; {}"/>
	</block>
	<block className="WeaponTypeContainer">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'weaponIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<bind name="watchDH" value="'gunsCount'; []; entity.weapon.guns.length"/>
		<bind name="watch" value="'barWidth';	gunsCount &gt; 3 ? 38 :
								gunsCount &gt; 1 ? 80 : 180"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'cross'; CC.crosshair"/>
		<bind name="visible" value="weaponIsSelected"/>
		<style>
			<flow value="htile"/>
			<align value="center"/>
			<width value="365px"/>
		</style>
		<bind name="repeat" value="entity.weapon.guns; 'BarItem'; {_barWidth: barWidth}"/>
	</block>
	<block className="BarItem">
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'entity'; $dataRef.ref"/>
		<style>
			<height value="24px"/>
			<marginBottom value="4px"/>
		</style>
		<bind name="watchDH" value="'healthState'; ['timerEntity.timer.evFrequent']; entity.gun.healthState"/>
		<bind name="watch" value="'isCrit'; healthState == 2"/>
		<bind name="watch" value="'isDead'; healthState == 3"/>
		<bind name="watchDH" value="'useOneShot'; ['entity.barrels.evChanged']; entity.barrels ? true : false"/>
		<bind name="watchDH" value="'totalBarrels'; ['entity.barrels.evChanged']; entity.barrels.total"/>
		<bind name="watchDH" value="'usedBarrels'; ['entity.barrels.evChanged']; entity.barrels.used"/>
		<bind name="watch" value="'segmentWidth'; math.round(_barWidth/totalBarrels)"/>
		<bind name="watchDH" value="'reloadTimeRemain'; ['timerEntity.timer.evFrequent']; entity.countDown ? entity.countDown.endTime - timerEntity.timer.currentTime : 0"/>
		<bind name="watchDH" value="'reloadPercent'; []; entity.countDown ? 1 - reloadTimeRemain / entity.countDown.duration : 1"/>
		<bind name="watchDH" value="'rotationState'; ['timerEntity.timer.evFrequent']; entity.gun.rotationState"/>
		<bind name="alpha" value="rotationState == 1 || isDead || isCrit || rotationState == 2 ? 1 : 0.6"/>
		<block>
			<style>
				<backgroundColor value="0x80000000"/>
				<height value="3px"/>
				<width value="40px"/>
				<marginLeft value="6px"/>
				<marginRight value="6px"/>
			</style>
			<bind name="width" value="_barWidth"/>
			<block>
				<bind name="visible" value="!isDead"/>
				<style>
					<position value="absolute"/>
					<height value="3px"/>
					<width value="40px"/>
				</style>
				<bind name="width" value="_barWidth"/>
				<bind name="style" value="'backgroundColor'; isCrit ? 0xFFe75153 : (reloadPercent &lt; 1) || (rotationState == 2) || (rotationState == 3)  ? 0xFFFF9933 : 0xFFF1F1F1"/>
				<bind name="scaleX" value="useOneShot &amp;&amp; (reloadPercent == 1) ? (totalBarrels - usedBarrels) / totalBarrels : reloadPercent"/>
			</block>
			<block>
				<bind name="repeat" value="totalBarrels - 1; 'TorpedoDivider'; {	_segmentWidth : segmentWidth }"/>
			</block>
			<block>
				<bind name="visible" value="reloadPercent &lt; 1"/>
				<style>
					<position value="absolute"/>
					<top value="-2px"/>
					<width value="2px"/>
					<height value="2px"/>
				</style>
				<bind name="style" value="'backgroundColor'; isCrit &amp;&amp; reloadPercent &gt; 0.5 ?  0xFFe75153 : reloadPercent &gt; 0.5 ? 0xFFFF9933 : 0x80000000"/>
				<bind name="x" value="_barWidth/2 - 1"/>
			</block>
			<bind name="changeDispatch" value="reloadPercent == 1; 'evReloaded'; {}; 1; true"/>
			<block>
				<style>
					<position value="absolute"/>
					<alpha value="0"/>
				</style>
				<bind name="x" value="_barWidth/2"/>
				<bind name="appear" value="'evReloaded'; 0.5; 0; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 2, scaleY: 8}; 1"/>
				<block>
					<style>
						<position value="absolute"/>
						<top value="-1px"/>
						<width value="40px"/>
						<height value="3px"/>
						<backgroundColor value="0xFFF1F1F1"/>
					</style>
					<bind name="width" value="_barWidth"/>
					<bind name="x" value="-_barWidth/2"/>
				</block>
			</block>
			<block type="text">
				<bind name="fade" value="reloadPercent &lt; 1 &amp;&amp; !isDead; 0.15; {alpha: 0, top: 5}; {alpha: 1, top: 0}; {alpha: 0, top: -5}; 2"/>
				<styleClass value="$TextHUD16Bold"/>
				<style>
					<position value="absolute"/>
					<top value="-22px"/>
					<width value="1px"/>
					<textAlign value="center"/>
				</style>
				<bind name="width" value="_barWidth + 2"/>
				<bind name="text" value="countdownFormat(reloadTimeRemain)"/>
			</block>
			<block className="state_crit" type="native">
				<bind name="visible" value="isCrit"/>
				<style>
					<position value="absolute"/>
					<top value="-4px"/>
				</style>
				<bind name="x" value="_barWidth/2 - 8"/>
			</block>
			<block className="state_dead" type="native">
				<bind name="visible" value="isDead"/>
				<style>
					<position value="absolute"/>
					<top value="-6px"/>
				</style>
				<bind name="x" value="_barWidth/2 - 8"/>
			</block>
		</block>
	</block>
	<block className="TorpedoDivider">
		<style>
			<position value="absolute"/>
			<height value="3px"/>
			<width value="2px"/>
			<alpha value="0.7"/>
			<backgroundColor value="0xFF000000"/>
		</style>
		<bind name="x" value="($index+1) * _segmentWidth - 1"/>
	</block>
	<block className="HUDCentralDangersContainer">
		<bind name="collectionRepeatDH" value="CC.visibleDanger; 'DangerItem'; ''; {}"/>
		<block className="NearEnemyItem">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
			<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
			<bind name="firstEntityDH" value="'nearEntity'; CC.nearestEnemyIndication"/>
			<bind name="watchDH" value="'showNearestEnemy'; ['nearEntity.nearestEnemyIndication.evChanged']; nearEntity.nearestEnemyIndication.showNearestEnemy"/>
			<bind name="watchDH" value="'yawToNearestEnemy'; ['timerEntity.timer.evFrequent']; math.radToGrad(nearEntity.nearestEnemyIndication.yawToNearestEnemy - cameraEntity.camera.yaw)"/>
			<bind name="rotation" value="yawToNearestEnemy"/>
			<block>
				<bind name="fade" value="showNearestEnemy; 0.15; {alpha: 0}; {alpha: 1}"/>
				<style>
					<position value="absolute"/>
					<top value="-232px"/>
				</style>
				<bind name="rotation" value="180"/>
				<block className="arc_radiolocation" type="native"/>
			</block>
		</block>
		<block className="DamageDanger">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
			<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
			<bind name="watchDH" value="'cameraYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(-cameraEntity.camera.yaw)"/>
			<bind name="rotation" value="cameraYaw"/>
			<bind name="firstEntityDH" value="'dmgEntity'; CC.damageDanger"/>
			<bind name="handleEventDH" value="'dmgEntity.damageDanger.evDamage'; 'evReceiveDamage'"/>
			<bind name="fxInstance" value="'evReceiveDamage'; 'DamageDangerItem'; {lifetime : 5}"/>
		</block>
	</block>
	<block className="NearEnemyItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'nearEntity'; CC.nearestEnemyIndication"/>
		<bind name="watchDH" value="'showNearestEnemy'; ['nearEntity.nearestEnemyIndication.evChanged']; nearEntity.nearestEnemyIndication.showNearestEnemy"/>
		<bind name="watchDH" value="'yawToNearestEnemy'; ['timerEntity.timer.evFrequent']; math.radToGrad(nearEntity.nearestEnemyIndication.yawToNearestEnemy - cameraEntity.camera.yaw)"/>
		<bind name="rotation" value="yawToNearestEnemy"/>
		<block>
			<bind name="fade" value="showNearestEnemy; 0.15; {alpha: 0}; {alpha: 1}"/>
			<style>
				<position value="absolute"/>
				<top value="-232px"/>
			</style>
			<bind name="rotation" value="180"/>
			<block className="arc_radiolocation" type="native"/>
		</block>
	</block>
	<block className="DamageDanger">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'cameraYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(-cameraEntity.camera.yaw)"/>
		<bind name="rotation" value="cameraYaw"/>
		<bind name="firstEntityDH" value="'dmgEntity'; CC.damageDanger"/>
		<bind name="handleEventDH" value="'dmgEntity.damageDanger.evDamage'; 'evReceiveDamage'"/>
		<bind name="fxInstance" value="'evReceiveDamage'; 'DamageDangerItem'; {lifetime : 5}"/>
	</block>
	<block className="DamageDangerItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="watch" value="'yaw'; math.radToGrad($args[0])"/>
		<bind name="watch" value="'damage'; $args[1]"/>
		<bind name="rotation" value="yaw"/>
		<bind name="dispatch" value="'addedToStage'; 'evShow'; {}; 2"/>
		<bind name="dispatch" value="'evShow'; 'evFadeOut'; {}; 2; 0.3"/>
		<block>
			<style>
				<position value="absolute"/>
				<top value="232px"/>
			</style>
			<bind name="appear" value="'evShow'; 0.2; 0; {scaleX: 2, scaleY: 2, alpha:0}; {scaleX: 1, scaleY: 1, alpha: 1}; 1"/>
			<bind name="appear" value="'evFadeOut'; lifetime-0.2; 0; {alpha: 1}; {alpha: 0}"/>
			<block className="danger_damage" type="native"/>
		</block>
	</block>
	<block className="DangerItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="entityDH" value="'dangerEntity'; $dataRef.ref.id"/>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'dangerType'; ['dangerEntity.visibleDanger.evChanged']; dangerEntity.visibleDanger.type"/>
		<bind name="watchDH" value="'cameraYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(cameraEntity.camera.yaw)"/>
		<bind name="watchDH" value="'yaw'; ['dangerEntity.visibleDanger.evChanged', 'timerEntity.timer.evFrequent']; math.radToGrad(dangerEntity.visibleDanger.yaw - cameraEntity.camera.yaw)"/>
		<bind name="childParentScope" value="dangerType; {}; 'CollisionDangerItem'; 'TorpedoPlaneDangerItem'; 'TorpedoPlaneDangerItem'"/>
		<bind name="rotation" value="yaw"/>
	</block>
	<block className="CollisionDangerItem">
		<style>
			<position value="absolute"/>
			<width value="0px"/>
			<height value="0px"/>
			<align value="center"/>
		</style>
		<bind name="watchDH" value="'state'; ['dangerEntity.collisionDanger.evChanged']; dangerEntity.collisionDanger.state"/>
		<bind name="watch" value="'dist'; state &lt; 3 ? 'far' : 'near'"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="changeDispatch" value="state; 'evToSuperfar'; {}; 2; 1"/>
		<bind name="changeDispatch" value="state; 'evCollision'; {}; 2; 4"/>
		<bind name="changeDispatch" value="dist; 'evToFar'; {}; 2; 'far'"/>
		<bind name="changeDispatch" value="dist; 'evToNear'; {}; 2; 'near'"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha:0}; {alpha: 1}; 2"/>
		<bind name="appear" value="'evToSuperfar'; 0.15; 0; {y: -290-40}; {y: -290-20}; 2"/>
		<bind name="appear" value="'evToFar'; 0.15; 0; {y: -290-20}; {y: -290}; 2"/>
		<bind name="appear" value="'evToNear'; 0.15; 0; {y: -290}; {y: -250}; 2"/>
		<block>
			<bind name="rotation" value="-yaw"/>
			<style>
				<position value="absolute"/>
				<width value="32px"/>
				<height value="32px"/>
				<backgroundSprite value="danger_terrain_far_c"/>
			</style>
			<bind name="style" value="'backgroundSprite'; 'danger_terrain_' + dist + '_c'"/>
			<bind name="transition" value="dist == 'near'; 0.15; {width: 32, height: 32}; {width: 48, height: 48}"/>
			<bind name="transition" value="state &lt; 3; 0.15; {scaleX: 1, scaleY: 1}; {scaleX: 0.5, scaleY: 0.5}"/>
			<block>
				<bind name="visible" value="state == 4"/>
				<bind name="appear" value="'evCollision'; 0.15; 0; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; 2"/>
				<style>
					<position value="absolute"/>
					<top value="20px"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUDBold"/>
					<styleClass value="$TextColorHUDCritical"/>
					<style>
						<position value="absolute"/>
						<marginLeft value="-50%"/>
						<fontSize value="26"/>
					</style>
					<text value="IDS_COLLISION"/>
				</block>
			</block>
		</block>
		<block>
			<bind name="fade" value="dist == 'near'; 0.15; {alpha: 0}; {alpha: 1}"/>
			<style>
				<position value="absolute"/>
				<top value="30px"/>
				<width value="190px"/>
				<height value="40px"/>
				<backgroundSprite value="arc_collision_far_c"/>
			</style>
		</block>
	</block>
	<block className="TorpedoPlaneDangerItem">
		<bind name="watchDH" value="'count'; ['dangerEntity.simpleDanger.evChanged']; dangerEntity.simpleDanger.count"/>
		<bind name="watchDH" value="'dist'; ['dangerEntity.simpleDanger.evChanged']; dangerEntity.simpleDanger.dist"/>
		<bind name="watch" value="'type'; dangerType == 1 ? 'torpedo' : 'plane'"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="changeDispatch" value="dist; 'evToFar'; {}; 2; 'far'"/>
		<bind name="changeDispatch" value="dist; 'evToNear'; {}; 2; 'near'"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0}; {alpha: 1}; 2"/>
		<bind name="appear" value="'evToFar'; 0.15; 0; {y: -290-20}; {y: -290}; 2"/>
		<bind name="appear" value="'evToNear'; 0.15; 0; {y: -290}; {y: -250}; 2"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="16px"/>
				<height value="16px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; 'danger_' + type + '_' + dist + '_c'"/>
			<bind name="transition" value="dist == 'near'; 0.15; {width: 16, height: 16}; {width: 24, height: 24}"/>
		</block>
		<block>
			<bind name="fade" value="dist == 'near'; 0.15; {alpha: 0}; {alpha: 1}"/>
			<style>
				<position value="absolute"/>
				<top value="18px"/>
				<width value="44px"/>
				<height value="3px"/>
				<backgroundSprite value="arc_danger_near_c"/>
			</style>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<bottom value="20px"/>
			</style>
			<bind name="rotation" value="-yaw"/>
			<block type="text">
				<bind name="fade" value="count &gt; 1; 0.1; {alpha: 0}; {alpha: 1}"/>
				<styleClass value="$TextHUDBold"/>
				<style>
					<position value="absolute"/>
					<marginLeft value="-50%"/>
					<marginTop value="-50%"/>
				</style>
				<bind name="text" value="count"/>
			</block>
		</block>
	</block>
	<block className="BattleTimerContainer">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<height value="100%"/>
		</style>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'battleDataEntity'; CC.battleData"/>
		<bind name="watchDH" value="'battleState'; ['battleDataEntity.battleState.evBattleStateChanged']; battleDataEntity.battleState.battleState"/>
		<bind name="watchDH" value="'battleTimeLeft'; ['timerEntity.timer.evFrequent']; battleDataEntity.battleTimer.battleTimeLeft"/>
		<bind name="watchDH" value="'ping'; ['timerEntity.timer.evFrequent']; battleDataEntity.pingLagInfo.ping"/>
		<bind name="watchDH" value="'fps'; ['timerEntity.timer.evFrequent']; battleDataEntity.pingLagInfo.fps"/>
		<bind name="watchDH" value="'lag'; ['timerEntity.timer.evFrequent']; battleDataEntity.pingLagInfo.lag"/>
		<block className="BattleStartTimer">
			<style>
				<position value="absolute"/>
				<top value="20%"/>
				<left value="50%"/>
				<width value="0px"/>
				<align value="center"/>
			</style>
			<bind name="appear" value="'addedToStage'; 0.15; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
			<bind name="fade" value="battleState &gt;= 1 &amp;&amp; battleTimeLeft &gt; 0.5; 0.15; {alpha: 0, top: -30}; {alpha: 1, top: 0}"/>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<text value="IDS_BATTLE_STARTS_IN"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<style>
					<fontSize value="46"/>
				</style>
				<bind name="text" value="countdownFormat(battleTimeLeft, 0, true)"/>
			</block>
		</block>
		<block className="BattleProgressTimer">
			<style>
				<position value="absolute"/>
				<paddingTop value="-8px"/>
			</style>
			<bind name="fade" value="battleState == 0; 0.15; {alpha: 0, left: -30, top: 30}; {alpha: 1, left: 0, top: 0}"/>
			<block type="text">
				<styleClass value="$TextHUD22Bold"/>
				<bind name="class" value="battleTimeLeft &lt; 60 ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
				<bind name="text" value="countdownFormat(battleTimeLeft, 0, true)"/>
			</block>
		</block>
		<block className="PerformanceMonitor">
			<style>
				<position value="absolute"/>
				<flow value="horizontal"/>
				<top value="-4%"/>
				<left value="-3%"/>
				<align value="middle"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD16Bold"/>
				<bind name="class" value="'$TextColorHUDDark'"/>
				<bind name="text" value="fps + ' fps | ' + ping + ' ms'"/>
			</block>
			<block>
				<bind name="visible" value="lag"/>
				<style>
					<backgroundSprite value="state_crit"/>
					<width value="16px"/>
					<height value="16px"/>
				</style>
			</block>
		</block>
	</block>
	<block className="BattleStartTimer">
		<style>
			<position value="absolute"/>
			<top value="20%"/>
			<left value="50%"/>
			<width value="0px"/>
			<align value="center"/>
		</style>
		<bind name="appear" value="'addedToStage'; 0.15; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
		<bind name="fade" value="battleState &gt;= 1 &amp;&amp; battleTimeLeft &gt; 0.5; 0.15; {alpha: 0, top: -30}; {alpha: 1, top: 0}"/>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<text value="IDS_BATTLE_STARTS_IN"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<fontSize value="46"/>
			</style>
			<bind name="text" value="countdownFormat(battleTimeLeft, 0, true)"/>
		</block>
	</block>
	<block className="BattleProgressTimer">
		<style>
			<position value="absolute"/>
			<paddingTop value="-8px"/>
		</style>
		<bind name="fade" value="battleState == 0; 0.15; {alpha: 0, left: -30, top: 30}; {alpha: 1, left: 0, top: 0}"/>
		<block type="text">
			<styleClass value="$TextHUD22Bold"/>
			<bind name="class" value="battleTimeLeft &lt; 60 ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
			<bind name="text" value="countdownFormat(battleTimeLeft, 0, true)"/>
		</block>
	</block>
	<block className="PerformanceMonitor">
		<style>
			<position value="absolute"/>
			<flow value="horizontal"/>
			<top value="-4%"/>
			<left value="-3%"/>
			<align value="middle"/>
		</style>
		<block type="text">
			<styleClass value="$TextHUD16Bold"/>
			<bind name="class" value="'$TextColorHUDDark'"/>
			<bind name="text" value="fps + ' fps | ' + ping + ' ms'"/>
		</block>
		<block>
			<bind name="visible" value="lag"/>
			<style>
				<backgroundSprite value="state_crit"/>
				<width value="16px"/>
				<height value="16px"/>
			</style>
		</block>
	</block>
	<block className="SituationIndicatorsContainer">
		<style>
			<position value="absolute"/>
			<top value="0%"/>
			<paddingTop value="145px"/>
			<left value="50%"/>
			<width value="0px"/>
			<align value="center"/>
		</style>
		<block className="SituationIndicators">
			<style>
				<width value="680px"/>
			</style>
			<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
			<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
			<bind name="firstEntityDH" value="'bi'; CC.battleIndication"/>
			<bind name="watchDH" value="'alertVisible'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotFlags &gt; 0"/>
			<bind name="watchDH" value="'spotType'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotType"/>
			<bind name="watchDH" value="'spotFlags'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotFlags"/>
			<bind name="watchDH" value="'focusedEnemies'; ['bi.alertIndication.evFocusedEnemiesChanged']; bi.alertIndication.focusedEnemies"/>
			<bind name="watchDH" value="'intuitionActive'; ['bi.alertIndication.evIntuitionActiveChanged']; bi.alertIndication.intuitionActive"/>
			<bind name="var" value="{isVolley: false, volleyLifeTime: 3.0}"/>
			<bind name="catch" value="'evSetVolley'"/>
			<bind name="handleEventDH" value="'bi.alertIndication.evArtilleryAlert'; 'evVolley'; {}; 2"/>
			<bind name="dispatch" value="'evVolley'; 'evSetVolley'; {isVolley: true}"/>
			<bind name="dispatchDelayReset" value="'evVolley'; 'evSetVolley'; {isVolley: false}; 2; volleyLifeTime"/>
			<bind name="watchDH" value="'weatherVisible'; ['bi.weatherIndication.evWeatherStateChanged']; bi.weatherIndication.weatherState &amp;&amp; bi.weatherIndication.weatherState != 'inv'"/>
			<bind name="watchDH" value="'weatherState'; ['bi.weatherIndication.evWeatherStateChanged']; bi.weatherIndication.weatherState"/>
			<bind name="watchDH" value="'weatherTimeLeft'; ['bi.weatherIndication.evWeatherTimeLeftChanged']; bi.weatherIndication.weatherTimeLeft"/>
			<bind name="watchDH" value="'visibilityRange'; ['cameraEntity.camera.evVisibilityRangeChanged']; cameraEntity.camera.visibilityRange"/>
			<bind name="watchDH" value="'smokeVisible'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.visible"/>
			<bind name="watchDH" value="'showOwnSmoke'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.showOwnSmoke"/>
			<bind name="watchDH" value="'smokeOwnLifeTime'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokeOwnLifeTime"/>
			<bind name="watchDH" value="'smokeInsideLifeTime'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokeInsideLifeTime"/>
			<bind name="watchDH" value="'smokePointDamaged'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokePointDamaged"/>
			<bind name="handleEventDH" value="'bi.smokeIndication.evSmokeShoot'; 'evSmokeDamage'; {}; 2"/>
			<block>
				<style>
					<position value="absolute"/>
				</style>
				<block>
					<styleClass value="$SituationIndicator"/>
					<block className="WeatherIndicator">
						<styleClass value="$SituationIndicatorInner"/>
						<bind name="transition" value="weatherVisible; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
						<bind name="watch" value="'cycloneInProgress'; weatherState == 'cyclone' || weatherState == 'cyclone_end'"/>
						<bind name="changeDispatch" value="weatherState; 'evCycloneStart'; {}; 2; 'cyclone_start'"/>
						<bind name="changeDispatch" value="weatherState; 'evCycloneEnd'; {}; 2; 'cyclone_end'"/>
						<block>
							<style>
								<align value="center"/>
							</style>
							<block>
								<style>
									<width value="64px"/>
									<height value="64px"/>
								</style>
								<bind name="style" value="'backgroundSprite'; 'cyclone_' + (weatherState == 'cyclone_start' ? 'inv' : 'normal')"/>
							</block>
							<block type="text">
								<styleClass value="$TextHUDBold"/>
								<bind name="appear" value="'evCycloneStart'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
								<bind name="appear" value="'evCycloneEnd'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
								<bind name="text" value="weatherState == 'cyclone' ? toUpperCase(tr('IDS_CYCLONE')) : countdownFormat(weatherTimeLeft)"/>
							</block>
							<block type="text">
								<bind name="fade" value="cycloneInProgress; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
								<styleClass value="$TextHUDBold"/>
								<style>
									<position value="absolute"/>
									<left value="50%"/>
									<marginLeft value="-50%"/>
									<top value="-18px"/>
								</style>
								<bind name="text" value="visibilityRange + tr('IDS_KILOMETER_SPACE')"/>
							</block>
						</block>
					</block>
				</block>
				<block>
					<styleClass value="$SituationIndicator"/>
					<block className="SmokeIndicator">
						<styleClass value="$SituationIndicatorInner"/>
						<bind name="transition" value="smokeVisible; 0.15; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
						<bind name="watch" value="'isInsideSmoke'; smokeInsideLifeTime &gt; 0"/>
						<bind name="watch" value="'isWarning'; smokePointDamaged || (isInsideSmoke ? smokeInsideLifeTime &lt; 20 : smokeOwnLifeTime &lt; 20)"/>
						<bind name="watch" value="'isCritical'; false"/>
						<bind name="var" value="{test: 'ping', piu: 0}"/>
						<bind name="catch" value="'evSmokeDamage'"/>
						<block>
							<style>
								<align value="center"/>
							</style>
							<block>
								<style>
									<alpha value="0"/>
									<top value="32px"/>
								</style>
								<bind name="appear" value="'evSmokeDamage'; 0.3; 0; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 2, scaleY: 2}"/>
								<block>
									<style>
										<position value="absolute"/>
										<top value="-32px"/>
										<left value="-32px"/>
										<width value="64px"/>
										<height value="64px"/>
									</style>
									<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + 'warning')"/>
								</block>
							</block>
							<block>
								<style>
									<width value="64px"/>
									<height value="64px"/>
								</style>
								<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + (isCritical ? 'critical' : isWarning ? 'warning' : 'normal')"/>
							</block>
							<block type="text">
								<styleClass value="$TextHUDBold"/>
								<bind name="class" value="isCritical ? '$TextColorHUDCritical' : isWarning ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
								<bind name="text" value="isInsideSmoke ? countdownFormat(smokeInsideLifeTime) : countdownFormat(smokeOwnLifeTime)"/>
							</block>
						</block>
					</block>
				</block>
			</block>
			<block>
				<style>
					<position value="absolute"/>
					<right value="0px"/>
				</style>
				<block>
					<styleClass value="$SituationIndicator"/>
					<block className="DetectIndicator">
						<styleClass value="$SituationIndicatorInner"/>
						<bind name="transition" value="alertVisible; 0.3; 	{alpha: 0, scaleX: 3, scaleY: 3, left: -64, top: -64};
											{alpha: 1, scaleX: 1, scaleY: 1, left: 0, top: 0};
											{alpha: 0, scaleX: 2, scaleY: 2, left: -32, top: -32};
											alertVisible ? 2 : 1"/>
						<bind name="var" value="{ ctCritical:	{ 	redMultiplier:1,
									greenMultiplier:1,
									blueMultiplier:1,
									alphaMultiplier:1,
									redOffset:255,
									greenOffset:-150,
									blueOffset:-10,
									alphaOffset:0
								}
		}"/>
						<block>
							<style>
								<align value="center"/>
							</style>
							<block>
								<style>
									<width value="64px"/>
									<height value="64px"/>
								</style>
								<bind name="style" value="'backgroundSprite'; spotType ? 'detected_by_' + spotType : 'detected_by_ship'"/>
								<bind name="colorTransform" value="isVolley ? ctCritical : {}"/>
							</block>
							<block type="text">
								<styleClass value="$TextHUDBold"/>
								<bind name="class" value="isVolley ? '$TextColorHUDCritical' : '$TextColorHUDWarning'"/>
								<bind name="text" value="isVolley ? 'IDS_VOLLEY' : 'IDS_DETECTED'"/>
							</block>
						</block>
						<block>
							<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {alpha: 0}; {alpha: 1}; {alpha: 0}; 2"/>
							<style>
								<position value="absolute"/>
								<top value="-32px"/>
								<left value="-32px"/>
								<align value="center|middle"/>
								<height value="0px"/>
								<width value="0px"/>
							</style>
							<block className="target_locked_warning_c" type="native">
								<style>
									<position value="absolute"/>
								</style>
								<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:0.75, scaleY:0.75, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2"/>
							</block>
							<block type="text">
								<styleClass value="$TextHUDBold"/>
								<styleClass value="$TextColorHUDWarning"/>
								<style>
									<fontSize value="24"/>
								</style>
								<bind name="text" value="focusedEnemies"/>
							</block>
						</block>
					</block>
				</block>
				<block>
					<styleClass value="$SituationIndicator"/>
					<block className="IntuitionIndicator">
						<styleClass value="$SituationIndicatorInner"/>
						<bind name="transition" value="intuitionActive; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
						<block>
							<style>
								<align value="center"/>
							</style>
							<block>
								<style>
									<width value="64px"/>
									<height value="64px"/>
									<backgroundSprite value="intuition_normal"/>
								</style>
							</block>
							<block type="text">
								<styleClass value="$TextHUDBold"/>
								<text value="IDS_LOCATED"/>
							</block>
						</block>
					</block>
				</block>
			</block>
		</block>
	</block>
	<block className="SituationIndicators">
		<style>
			<width value="680px"/>
		</style>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="firstEntityDH" value="'bi'; CC.battleIndication"/>
		<bind name="watchDH" value="'alertVisible'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotFlags &gt; 0"/>
		<bind name="watchDH" value="'spotType'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotType"/>
		<bind name="watchDH" value="'spotFlags'; ['bi.alertIndication.evSpottedChanged']; bi.alertIndication.spotFlags"/>
		<bind name="watchDH" value="'focusedEnemies'; ['bi.alertIndication.evFocusedEnemiesChanged']; bi.alertIndication.focusedEnemies"/>
		<bind name="watchDH" value="'intuitionActive'; ['bi.alertIndication.evIntuitionActiveChanged']; bi.alertIndication.intuitionActive"/>
		<bind name="var" value="{isVolley: false, volleyLifeTime: 3.0}"/>
		<bind name="catch" value="'evSetVolley'"/>
		<bind name="handleEventDH" value="'bi.alertIndication.evArtilleryAlert'; 'evVolley'; {}; 2"/>
		<bind name="dispatch" value="'evVolley'; 'evSetVolley'; {isVolley: true}"/>
		<bind name="dispatchDelayReset" value="'evVolley'; 'evSetVolley'; {isVolley: false}; 2; volleyLifeTime"/>
		<bind name="watchDH" value="'weatherVisible'; ['bi.weatherIndication.evWeatherStateChanged']; bi.weatherIndication.weatherState &amp;&amp; bi.weatherIndication.weatherState != 'inv'"/>
		<bind name="watchDH" value="'weatherState'; ['bi.weatherIndication.evWeatherStateChanged']; bi.weatherIndication.weatherState"/>
		<bind name="watchDH" value="'weatherTimeLeft'; ['bi.weatherIndication.evWeatherTimeLeftChanged']; bi.weatherIndication.weatherTimeLeft"/>
		<bind name="watchDH" value="'visibilityRange'; ['cameraEntity.camera.evVisibilityRangeChanged']; cameraEntity.camera.visibilityRange"/>
		<bind name="watchDH" value="'smokeVisible'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.visible"/>
		<bind name="watchDH" value="'showOwnSmoke'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.showOwnSmoke"/>
		<bind name="watchDH" value="'smokeOwnLifeTime'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokeOwnLifeTime"/>
		<bind name="watchDH" value="'smokeInsideLifeTime'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokeInsideLifeTime"/>
		<bind name="watchDH" value="'smokePointDamaged'; ['bi.smokeIndication.evSmokeTimerChanged']; bi.smokeIndication.smokePointDamaged"/>
		<bind name="handleEventDH" value="'bi.smokeIndication.evSmokeShoot'; 'evSmokeDamage'; {}; 2"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<block>
				<styleClass value="$SituationIndicator"/>
				<block className="WeatherIndicator">
					<styleClass value="$SituationIndicatorInner"/>
					<bind name="transition" value="weatherVisible; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
					<bind name="watch" value="'cycloneInProgress'; weatherState == 'cyclone' || weatherState == 'cyclone_end'"/>
					<bind name="changeDispatch" value="weatherState; 'evCycloneStart'; {}; 2; 'cyclone_start'"/>
					<bind name="changeDispatch" value="weatherState; 'evCycloneEnd'; {}; 2; 'cyclone_end'"/>
					<block>
						<style>
							<align value="center"/>
						</style>
						<block>
							<style>
								<width value="64px"/>
								<height value="64px"/>
							</style>
							<bind name="style" value="'backgroundSprite'; 'cyclone_' + (weatherState == 'cyclone_start' ? 'inv' : 'normal')"/>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<bind name="appear" value="'evCycloneStart'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
							<bind name="appear" value="'evCycloneEnd'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
							<bind name="text" value="weatherState == 'cyclone' ? toUpperCase(tr('IDS_CYCLONE')) : countdownFormat(weatherTimeLeft)"/>
						</block>
						<block type="text">
							<bind name="fade" value="cycloneInProgress; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
							<styleClass value="$TextHUDBold"/>
							<style>
								<position value="absolute"/>
								<left value="50%"/>
								<marginLeft value="-50%"/>
								<top value="-18px"/>
							</style>
							<bind name="text" value="visibilityRange + tr('IDS_KILOMETER_SPACE')"/>
						</block>
					</block>
				</block>
			</block>
			<block>
				<styleClass value="$SituationIndicator"/>
				<block className="SmokeIndicator">
					<styleClass value="$SituationIndicatorInner"/>
					<bind name="transition" value="smokeVisible; 0.15; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
					<bind name="watch" value="'isInsideSmoke'; smokeInsideLifeTime &gt; 0"/>
					<bind name="watch" value="'isWarning'; smokePointDamaged || (isInsideSmoke ? smokeInsideLifeTime &lt; 20 : smokeOwnLifeTime &lt; 20)"/>
					<bind name="watch" value="'isCritical'; false"/>
					<bind name="var" value="{test: 'ping', piu: 0}"/>
					<bind name="catch" value="'evSmokeDamage'"/>
					<block>
						<style>
							<align value="center"/>
						</style>
						<block>
							<style>
								<alpha value="0"/>
								<top value="32px"/>
							</style>
							<bind name="appear" value="'evSmokeDamage'; 0.3; 0; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 2, scaleY: 2}"/>
							<block>
								<style>
									<position value="absolute"/>
									<top value="-32px"/>
									<left value="-32px"/>
									<width value="64px"/>
									<height value="64px"/>
								</style>
								<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + 'warning')"/>
							</block>
						</block>
						<block>
							<style>
								<width value="64px"/>
								<height value="64px"/>
							</style>
							<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + (isCritical ? 'critical' : isWarning ? 'warning' : 'normal')"/>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<bind name="class" value="isCritical ? '$TextColorHUDCritical' : isWarning ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
							<bind name="text" value="isInsideSmoke ? countdownFormat(smokeInsideLifeTime) : countdownFormat(smokeOwnLifeTime)"/>
						</block>
					</block>
				</block>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<right value="0px"/>
			</style>
			<block>
				<styleClass value="$SituationIndicator"/>
				<block className="DetectIndicator">
					<styleClass value="$SituationIndicatorInner"/>
					<bind name="transition" value="alertVisible; 0.3; 	{alpha: 0, scaleX: 3, scaleY: 3, left: -64, top: -64};
											{alpha: 1, scaleX: 1, scaleY: 1, left: 0, top: 0};
											{alpha: 0, scaleX: 2, scaleY: 2, left: -32, top: -32};
											alertVisible ? 2 : 1"/>
					<bind name="var" value="{ ctCritical:	{ 	redMultiplier:1,
									greenMultiplier:1,
									blueMultiplier:1,
									alphaMultiplier:1,
									redOffset:255,
									greenOffset:-150,
									blueOffset:-10,
									alphaOffset:0
								}
		}"/>
					<block>
						<style>
							<align value="center"/>
						</style>
						<block>
							<style>
								<width value="64px"/>
								<height value="64px"/>
							</style>
							<bind name="style" value="'backgroundSprite'; spotType ? 'detected_by_' + spotType : 'detected_by_ship'"/>
							<bind name="colorTransform" value="isVolley ? ctCritical : {}"/>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<bind name="class" value="isVolley ? '$TextColorHUDCritical' : '$TextColorHUDWarning'"/>
							<bind name="text" value="isVolley ? 'IDS_VOLLEY' : 'IDS_DETECTED'"/>
						</block>
					</block>
					<block>
						<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {alpha: 0}; {alpha: 1}; {alpha: 0}; 2"/>
						<style>
							<position value="absolute"/>
							<top value="-32px"/>
							<left value="-32px"/>
							<align value="center|middle"/>
							<height value="0px"/>
							<width value="0px"/>
						</style>
						<block className="target_locked_warning_c" type="native">
							<style>
								<position value="absolute"/>
							</style>
							<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:0.75, scaleY:0.75, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2"/>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<styleClass value="$TextColorHUDWarning"/>
							<style>
								<fontSize value="24"/>
							</style>
							<bind name="text" value="focusedEnemies"/>
						</block>
					</block>
				</block>
			</block>
			<block>
				<styleClass value="$SituationIndicator"/>
				<block className="IntuitionIndicator">
					<styleClass value="$SituationIndicatorInner"/>
					<bind name="transition" value="intuitionActive; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
					<block>
						<style>
							<align value="center"/>
						</style>
						<block>
							<style>
								<width value="64px"/>
								<height value="64px"/>
								<backgroundSprite value="intuition_normal"/>
							</style>
						</block>
						<block type="text">
							<styleClass value="$TextHUDBold"/>
							<text value="IDS_LOCATED"/>
						</block>
					</block>
				</block>
			</block>
		</block>
	</block>
	<css name="$SituationIndicator">
		<width value="112px"/>
		<align value="center|middle"/>
		<height value="112px"/>
	</css>
	<css name="$SituationIndicatorInner">
		<width value="64px"/>
		<align value="center|middle"/>
		<height value="64px"/>
	</css>
	<block className="DetectIndicator">
		<styleClass value="$SituationIndicatorInner"/>
		<bind name="transition" value="alertVisible; 0.3; 	{alpha: 0, scaleX: 3, scaleY: 3, left: -64, top: -64};
											{alpha: 1, scaleX: 1, scaleY: 1, left: 0, top: 0};
											{alpha: 0, scaleX: 2, scaleY: 2, left: -32, top: -32};
											alertVisible ? 2 : 1"/>
		<bind name="var" value="{ ctCritical:	{ 	redMultiplier:1,
									greenMultiplier:1,
									blueMultiplier:1,
									alphaMultiplier:1,
									redOffset:255,
									greenOffset:-150,
									blueOffset:-10,
									alphaOffset:0
								}
		}"/>
		<block>
			<style>
				<align value="center"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; spotType ? 'detected_by_' + spotType : 'detected_by_ship'"/>
				<bind name="colorTransform" value="isVolley ? ctCritical : {}"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<bind name="class" value="isVolley ? '$TextColorHUDCritical' : '$TextColorHUDWarning'"/>
				<bind name="text" value="isVolley ? 'IDS_VOLLEY' : 'IDS_DETECTED'"/>
			</block>
		</block>
		<block>
			<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {alpha: 0}; {alpha: 1}; {alpha: 0}; 2"/>
			<style>
				<position value="absolute"/>
				<top value="-32px"/>
				<left value="-32px"/>
				<align value="center|middle"/>
				<height value="0px"/>
				<width value="0px"/>
			</style>
			<block className="target_locked_warning_c" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="fade" value="focusedEnemies &gt; 0; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:0.75, scaleY:0.75, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<styleClass value="$TextColorHUDWarning"/>
				<style>
					<fontSize value="24"/>
				</style>
				<bind name="text" value="focusedEnemies"/>
			</block>
		</block>
	</block>
	<block className="IntuitionIndicator">
		<styleClass value="$SituationIndicatorInner"/>
		<bind name="transition" value="intuitionActive; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
		<block>
			<style>
				<align value="center"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
					<backgroundSprite value="intuition_normal"/>
				</style>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<text value="IDS_LOCATED"/>
			</block>
		</block>
	</block>
	<block className="WeatherIndicator">
		<styleClass value="$SituationIndicatorInner"/>
		<bind name="transition" value="weatherVisible; 0.15; {alpha: 0, scaleX: 2, scaleY: 2}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
		<bind name="watch" value="'cycloneInProgress'; weatherState == 'cyclone' || weatherState == 'cyclone_end'"/>
		<bind name="changeDispatch" value="weatherState; 'evCycloneStart'; {}; 2; 'cyclone_start'"/>
		<bind name="changeDispatch" value="weatherState; 'evCycloneEnd'; {}; 2; 'cyclone_end'"/>
		<block>
			<style>
				<align value="center"/>
			</style>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; 'cyclone_' + (weatherState == 'cyclone_start' ? 'inv' : 'normal')"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<bind name="appear" value="'evCycloneStart'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
				<bind name="appear" value="'evCycloneEnd'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
				<bind name="text" value="weatherState == 'cyclone' ? toUpperCase(tr('IDS_CYCLONE')) : countdownFormat(weatherTimeLeft)"/>
			</block>
			<block type="text">
				<bind name="fade" value="cycloneInProgress; 0.15; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
				<styleClass value="$TextHUDBold"/>
				<style>
					<position value="absolute"/>
					<left value="50%"/>
					<marginLeft value="-50%"/>
					<top value="-18px"/>
				</style>
				<bind name="text" value="visibilityRange + tr('IDS_KILOMETER_SPACE')"/>
			</block>
		</block>
	</block>
	<block className="SmokeIndicator">
		<styleClass value="$SituationIndicatorInner"/>
		<bind name="transition" value="smokeVisible; 0.15; {alpha: 0, scaleX: 1.5, scaleY: 1.5}; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0}; 2"/>
		<bind name="watch" value="'isInsideSmoke'; smokeInsideLifeTime &gt; 0"/>
		<bind name="watch" value="'isWarning'; smokePointDamaged || (isInsideSmoke ? smokeInsideLifeTime &lt; 20 : smokeOwnLifeTime &lt; 20)"/>
		<bind name="watch" value="'isCritical'; false"/>
		<bind name="var" value="{test: 'ping', piu: 0}"/>
		<bind name="catch" value="'evSmokeDamage'"/>
		<block>
			<style>
				<align value="center"/>
			</style>
			<block>
				<style>
					<alpha value="0"/>
					<top value="32px"/>
				</style>
				<bind name="appear" value="'evSmokeDamage'; 0.3; 0; {alpha: 1, scaleX: 1, scaleY: 1}; {alpha: 0, scaleX: 2, scaleY: 2}"/>
				<block>
					<style>
						<position value="absolute"/>
						<top value="-32px"/>
						<left value="-32px"/>
						<width value="64px"/>
						<height value="64px"/>
					</style>
					<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + 'warning')"/>
				</block>
			</block>
			<block>
				<style>
					<width value="64px"/>
					<height value="64px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; 'smoke_' + (isInsideSmoke ? 'inside_' : 'own_') + (isCritical ? 'critical' : isWarning ? 'warning' : 'normal')"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<bind name="class" value="isCritical ? '$TextColorHUDCritical' : isWarning ? '$TextColorHUDWarning' : '$TextColorHUDNeutral'"/>
				<bind name="text" value="isInsideSmoke ? countdownFormat(smokeInsideLifeTime) : countdownFormat(smokeOwnLifeTime)"/>
			</block>
		</block>
	</block>
	<block className="BattleMinimap">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<right value="0%"/>
			<paddingBottom value="145px"/>
			<paddingRight value="145px"/>
		</style>
		<bind name="var" value="{size : 290, mapScale: 1}"/>
		<bind name="var" value="{scaleRatio: size * mapScale}"/>
		<bind name="style" value="'paddingRight'; (size * mapScale)/2 + 'px'"/>
		<bind name="style" value="'paddingBottom'; (size * mapScale)/2 + 'px'"/>
		<bind name="firstEntityDH" value="'battleDataEntity'; CC.battleData"/>
		<bind name="primaryEntityDH" value="'mapEntity'; CC.map; battleDataEntity.battleInfo.mapId"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="style" value="'width'; (size * mapScale) + 'px'"/>
			<bind name="style" value="'height'; (size * mapScale) + 'px'"/>
			<bind name="style" value="'left'; -(size * mapScale)/2 + 'px'"/>
			<bind name="style" value="'top'; -(size * mapScale)/2 + 'px'"/>
			<block className="blurmap10_feather" type="native">
				<style>
					<position value="absolute"/>
					<width value="120%"/>
					<height value="120%"/>
					<top value="-10%"/>
					<left value="-10%"/>
				</style>
				<bind name="blurMap" value="0"/>
			</block>
			<block className="MinimapBG">
				<style>
					<position value="absolute"/>
					<width value="100%"/>
					<height value="100%"/>
					<alpha value="0.7"/>
				</style>
				<block>
					<style>
						<position value="absolute"/>
						<width value="100%"/>
						<height value="100%"/>
						<backgroundSize value="cover"/>
					</style>
					<bind name="style" value="'backgroundImage'; 'url:' + mapEntity.map.minimapPath"/>
				</block>
				<bind name="repeat" value="9; 'MinimapGridVertical'"/>
				<bind name="repeat" value="9; 'MinimapGridHorizontal'"/>
				<block>
					<style>
						<position value="absolute"/>
						<left value="-28px"/>
					</style>
					<bind name="repeat" value="['A','B','C','D','E','F','G','H','I','J']; 'MinimapCoordsLabel'; { _size: size / 10}"/>
				</block>
				<block>
					<style>
						<position value="absolute"/>
						<flow value="horizontal"/>
						<top value="-28px"/>
					</style>
					<bind name="repeat" value="[1,2,3,4,5,6,7,8,9,10]; 'MinimapCoordsLabel'; { _size: size / 10}"/>
				</block>
			</block>
			<block>
				<style>
					<position value="absolute"/>
					<width value="100%"/>
					<height value="100%"/>
					<overflow value="hidden"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.mapPosition; 'MapMarkerItem'; ''; {_size: size, _mapScale: mapScale, _scaleRatio: scaleRatio}"/>
			</block>
		</block>
	</block>
	<block className="MinimapBG">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<height value="100%"/>
			<alpha value="0.7"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<width value="100%"/>
				<height value="100%"/>
				<backgroundSize value="cover"/>
			</style>
			<bind name="style" value="'backgroundImage'; 'url:' + mapEntity.map.minimapPath"/>
		</block>
		<bind name="repeat" value="9; 'MinimapGridVertical'"/>
		<bind name="repeat" value="9; 'MinimapGridHorizontal'"/>
		<block>
			<style>
				<position value="absolute"/>
				<left value="-28px"/>
			</style>
			<bind name="repeat" value="['A','B','C','D','E','F','G','H','I','J']; 'MinimapCoordsLabel'; { _size: size / 10}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<flow value="horizontal"/>
				<top value="-28px"/>
			</style>
			<bind name="repeat" value="[1,2,3,4,5,6,7,8,9,10]; 'MinimapCoordsLabel'; { _size: size / 10}"/>
		</block>
	</block>
	<block className="MinimapCoordsLabel">
		<style>
			<height value="1px"/>
			<width value="1px"/>
			<align value="center|middle"/>
		</style>
		<bind name="style" value="'width'; _size + 'px'"/>
		<bind name="style" value="'height'; _size + 'px'"/>
		<block type="text">
			<styleClass value="$TextHUD16Bold"/>
			<style>
				<alpha value="0.5"/>
			</style>
			<bind name="text" value="$value"/>
		</block>
	</block>
	<block className="MinimapGridVertical">
		<style>
			<position value="absolute"/>
			<width value="1px"/>
			<height value="100%"/>
			<backgroundColor value="0x15ffffff"/>
		</style>
		<bind name="style" value="'left'; ($index+1) * 10 + '%'"/>
	</block>
	<block className="MinimapGridHorizontal">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<height value="1px"/>
			<backgroundColor value="0x15ffffff"/>
		</style>
		<bind name="style" value="'top'; ($index+1) * 10 + '%'"/>
	</block>
	<block className="MapMarkerItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="perFrameUpdate" value="{
		x : _scaleRatio * entity.mapPosition.position.x,
		y: _scaleRatio * entity.mapPosition.position.y
	}"/>
		<bind name="watchDH" value="'type'; []; entity.entityType.value"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watch" value="'isSelf'; entity.relation.value == 0"/>
		<bind name="handleEventDH" value="'entity.quickCommand.evPlay'; 'evShowTargetQuickCommand'"/>
		<bind name="childParentScope" value="type;
		'MapShipMarker';
		'StabMapMarker';
		'MapCapturePointMarker';
		'MapEpicenterMarker';
		'MapNavpointMarker';
		'StabMapMarker';
		'MapPlaneMarker';
		'MapTorpedoMarker';
		'MapCameraMarker'"/>
	</block>
	<block className="MapShipMarker">
		<bind name="watchDH" value="'currentWeapon'; ['entity.playerAvatar.evWeaponChanged']; entity.playerAvatar.weapon == 0 ? 'mg' : entity.playerAvatar.weapon == 2 ? 'ta' : 'none'"/>
		<bind name="watchDH" value="'shootMGRange'; ['entity.playerAvatar.evRangeChanged']; entity.playerAvatar.shootMGRange"/>
		<bind name="watchDH" value="'shootTARange'; ['entity.playerAvatar.evRangeChanged']; entity.playerAvatar.shootTARange"/>
		<bind name="watchDH" value="'visibilityRange'; ['entity.playerAvatar.evRangeChanged']; entity.playerAvatar.visibilityRange"/>
		<bind name="watchDH" value="'visibilityPlaneRange'; ['entity.playerAvatar.evRangeChanged']; entity.playerAvatar.visibilityPlaneRange"/>
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="watchDH" value="'markerYaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(entity.mapPosition.yaw)"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'AnimationMiniMapQC'; {lifetime: 5}"/>
		</block>
		<block>
			<bind name="visible" value="(entity.playerAvatar != null) &amp;&amp; isAlive"/>
			<style>
				<position value="absolute"/>
				<width value="50px"/>
				<height value="50px"/>
			</style>
			<block>
				<style>
					<position value="absolute"/>
					<width value="1px"/>
					<height value="200px"/>
					<alpha value="0.7"/>
					<backgroundSprite value="direction_line"/>
				</style>
				<bind name="perFrameUpdate" value="{rotation: markerYaw}"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="transition" value="shootMGRange; 0.3; {radius: shootMGRange * _scaleRatio}; {radius: shootMGRange * _scaleRatio}"/>
				<bind name="transition" value="shootMGRange; 0.3; {innerRadius: shootMGRange * _scaleRatio - 1}; {innerRadius: shootMGRange * _scaleRatio - 1}; {innerRadius: shootMGRange * _scaleRatio - 1}; 2"/>
				<bind name="transition" value="currentWeapon == 'mg'; currentWeapon == 'mg' ? 0.15 : 0.3; {alpha: 0}; {alpha: 0.5}; {alpha: 0}; 2"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="transition" value="currentWeapon == 'ta'; currentWeapon == 'ta' ? 0.15 : 0.3; {alpha: 0}; {alpha: 0.5}; {alpha: 0}; 2"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="radius" value="shootTARange * _scaleRatio"/>
				<bind name="innerRadius" value="shootTARange * _scaleRatio - 1"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFF6EE1F7"/>
				<bind name="alpha" value="0.3"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="transition" value="visibilityRange; 0.15; {radius: visibilityRange * _scaleRatio - 1}; {radius: visibilityRange * _scaleRatio - 1}"/>
				<bind name="transition" value="visibilityRange; 0.15; {innerRadius: visibilityRange * _scaleRatio - 2}; {innerRadius: visibilityRange * _scaleRatio - 2}; {innerRadius: visibilityRange * _scaleRatio - 2}; 2"/>
			</block>
		</block>
		<bind name="instance" value="'ShipMarkerIconCentered'; !isSelf || !isAlive	? 	{
																			_entityId: entity.id,
																			_rotate: true,
																			_minimap: true
																		}
																	: null;"/>
		<bind name="instance" value="'OwnShipMarkerIcon'; 	isSelf &amp;&amp; isAlive 	? 	{
																		_entityId: entity.id,
																		_minimap: true
																	}
																: null;"/>
	</block>
	<block className="MapCapturePointMarker">
		<bind name="watchDH" value="'circleRadius'; []; entity.circle.radius"/>
		<bind name="watchDH" value="'circleInnerRadius'; []; entity.circle.innerRadius"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'AnimationMiniMapQC'; {lifetime: 5}"/>
		</block>
		<block className="lesta.display.Circle" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			<bind name="alpha" value="relation == 'neutral' ? 0.15 : 0.25"/>
			<bind name="radius" value="circleRadius * _scaleRatio"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			<bind name="alpha" value="relation == 'neutral' ? 0.2 : 0.4"/>
			<bind name="arc" value="360"/>
			<bind name="offset" value="0"/>
			<bind name="radius" value="circleRadius * _scaleRatio"/>
			<bind name="innerRadius" value="circleRadius * _scaleRatio - 2"/>
		</block>
		<block>
			<bind name="scaleX" value="0.75"/>
			<bind name="scaleY" value="0.75"/>
			<bind name="ubScaleX" value="0.75"/>
			<bind name="ubScaleY" value="0.75"/>
			<bind name="var" value="{_minimap: true}"/>
			<block className="CapturePointMarker">
				<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
				<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
				<bind name="watchDH" value="'bothInside'; ['entity.capturePoint.evBothInsideChanged']; entity.capturePoint.bothInside"/>
				<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
				<style>
					<width value="0px"/>
					<height value="0px"/>
					<position value="absolute"/>
				</style>
				<block>
					<style>
						<position value="absolute"/>
						<left value="1px"/>
						<top value="-50px"/>
					</style>
					<bind name="visible" value="!(_minimap)"/>
					<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
				</block>
				<block>
					<style>
						<position value="absolute"/>
						<width value="0px"/>
						<height value="0px"/>
						<align value="center|middle"/>
					</style>
					<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
					<block>
						<style>
							<width value="32px"/>
							<height value="32px"/>
							<backgroundColor value="0xFF000000"/>
							<alpha value="0.15"/>
						</style>
					</block>
				</block>
				<block>
					<style>
						<position value="absolute"/>
						<width value="0px"/>
						<height value="0px"/>
						<align value="center|middle"/>
					</style>
					<block type="text">
						<bind name="visible" value="entity.capturePoint.type != 5"/>
						<styleClass value="$TextHUD24Bold"/>
						<style>
							<paddingTop value="2px"/>
						</style>
						<bind name="class" value="relation == 'ally' ? '$TextColorHUDAlly' : relation == 'enemy' ? '$TextColorHUDEnemy' : '$TextColorHUDNeutral'"/>
						<bind name="text" value="entity.capturePoint.label"/>
					</block>
					<block>
						<bind name="visible" value="entity.capturePoint.type == 5"/>
						<bind name="style" value="'backgroundSprite'; 'capture_flag_' + relation + '_c'"/>
					</block>
				</block>
				<block>
					<style>
						<position value="absolute"/>
					</style>
					<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
					<block className="mask_rhomb_c" type="native">
						<style>
							<position value="absolute"/>
						</style>
						<bind name="isMask" value="true"/>
						<block>
							<style>
								<position value="absolute"/>
								<width value="100px"/>
								<height value="100px"/>
								<top value="-50px"/>
								<left value="-50px"/>
								<backgroundColor value="0xFFFFFFFF"/>
							</style>
							<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
							<bind name="alpha" value="isCaptureInProgress ? 0.5 : (relation == 'neutral') ? 0.15 : 1.0"/>
						</block>
						<block className="lesta.display.Sector" type="native">
							<style>
								<position value="absolute"/>
							</style>
							<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
							<bind name="alpha" value="1"/>
							<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
							<bind name="offset" value="-135"/>
							<bind name="radius" value="23"/>
							<bind name="innerRadius" value="0"/>
						</block>
					</block>
				</block>
				<block>
					<bind name="fade" value="showTextContested &amp;&amp; bothInside; 0.15; {alpha: 0, top: -10}; {alpha: 1, top: 0}"/>
					<block type="text">
						<styleClass value="$TextHUDBold"/>
						<style>
							<position value="absolute"/>
							<marginLeft value="-50%"/>
							<top value="22px"/>
						</style>
						<bind name="text" value="toUpperCase(tr('IDS_CONTESTED'))"/>
					</block>
				</block>
			</block>
		</block>
	</block>
	<block className="MapEpicenterMarker">
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'AnimationMiniMapQC'; {lifetime: 5}"/>
		</block>
		<bind name="repeat" value="entity.epicenter.points.ref.items; 'MapEpicenterCircle'; { _scaleRatio: _scaleRatio }"/>
	</block>
	<block className="MapEpicenterCircle">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<bind name="watchDH" value="'circleRadius'; []; entity.circle.radius * _scaleRatio"/>
		<bind name="watchDH" value="'circleInnerRadius'; []; (entity.circle.innerRadius * _scaleRatio) + 2"/>
		<bind name="var" value="{_minimap: true}"/>
		<block className="EpicenterCircleItem">
			<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
				<bind name="alpha" value="isCaptureInProgress ? 0.3 : (relation == 'neutral') ? 0.1 : (_minimap ? 0.4 : 1)"/>
				<bind name="arc" value="_minimap ? 360*(1-captureProgress) * (invaderRelation == 'ally' ? -1 : 1) : 360"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
				<bind name="alpha" value="_minimap ? 0.3 : 1"/>
				<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="alpha" value="0.3"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="radius" value="circleRadius+2"/>
				<bind name="innerRadius" value="circleRadius"/>
			</block>
		</block>
	</block>
	<block className="MapPlaneMarker">
		<bind name="watchDH" value="'planeIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="scaleX" value="0.75"/>
		<bind name="scaleY" value="0.75"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'AnimationMiniMapQC'; {lifetime: 5}"/>
		</block>
		<block className="PlaneMarkerIcon">
			<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
			<bind name="watch" value="'planeType'; planeTypes[entity.plane.planeType]"/>
			<bind name="watch" value="'isConsumable'; entity.plane.isConsumable"/>
			<bind name="watchDH" value="'hasBomb'; ['entity.ownSquadron.evBombChanged']; entity.ownSquadron.hasBomb"/>
			<bind name="watchDH" value="'ammo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.ammo"/>
			<bind name="watchDH" value="'maxAmmo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.maxAmmo"/>
			<bind name="watch" value="'planeIconClass'; (isConsumable ? 'catapult_' : '') + planeType + (isInSameDivision 	? '_division' :
																					tkStatus 			? '_tk' :  '_' + relation )"/>
			<bind name="watch" value="'isNotFull'; entity.ownSquadron &amp;&amp; (	(planeType == 'bomber' || planeType == 'torpedobomber') ? !hasBomb :
														 planeType == 'fighter' 								? ammo &lt; maxAmmo : false	)"/>
			<bind name="watch" value="'fighterEmptyStatus'; ammo == 0 ? '_empty' :
										(ammo / maxAmmo) &lt; 0.33 ? '_2of3_empty' : '_1of3_empty'"/>
			<block>
				<bind name="visible" value="!isNotFull"/>
				<bind name="style" value="'backgroundSprite'; planeIconClass  + '_c'"/>
			</block>
			<block>
				<bind name="visible" value="isNotFull"/>
				<bind name="style" value="'backgroundSprite'; planeIconClass  + (planeType == 'fighter' ? fighterEmptyStatus : '_empty') + '_c'"/>
			</block>
			<bind name="scaleX" value="planeIsSelected ? 2 : 1"/>
			<bind name="scaleY" value="planeIsSelected ? 2 : 1"/>
			<bind name="ubScaleX" value="planeIsSelected ? 2 : 1"/>
			<bind name="ubScaleY" value="planeIsSelected ? 2 : 1"/>
		</block>
	</block>
	<block className="MapCameraMarker">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="watchDH" value="'visibilityRangeRadius'; ['entity.camera.evVisibilityRangeChanged']; _scaleRatio * entity.camera.visibilityRangePerc"/>
		<bind name="watchDH" value="'cameraFrustumAngle'; ['entity.camera.evFrustumAngleChanged']; math.radToGrad(entity.camera.frustumAngle)"/>
		<bind name="watchDH" value="'isTacticalCam'; ['entity.camera.evTacticalStateChanged']; entity.camera.isTactical"/>
		<bind name="transition" value="isTacticalCam; 0.3; {alpha: 1}; {alpha: 0}"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="1px"/>
				<height value="1px"/>
				<alpha value="0.3"/>
				<backgroundSprite value="frustum_angle_edge"/>
			</style>
			<bind name="height" value="visibilityRangeRadius"/>
			<bind name="perFrameUpdate" value="{rotation: math.radToGrad(entity.camera.yaw)}"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="colors" value="[0xFFF1F1F1, 0xFFF1F1F1]"/>
			<bind name="alphas" value="[0.15, 0]"/>
			<bind name="ratios" value="[80, 255]"/>
			<bind name="arc" value="cameraFrustumAngle"/>
			<bind name="offset" value="-90"/>
			<bind name="radius" value="visibilityRangeRadius"/>
			<bind name="innerRadius" value="0"/>
			<bind name="perFrameUpdate" value="{rotation: math.radToGrad(entity.camera.yaw - entity.camera.frustumAngle/2)}"/>
		</block>
	</block>
	<block className="MapNavpointMarker"/>
	<block className="MapTorpedoMarker"/>
	<block className="StabMapMarker">
		<style>
			<position value="absolute"/>
			<width value="10px"/>
			<height value="10px"/>
			<backgroundColor value="0xFFEEEEEE"/>
		</style>
		<bind name="x" value="-5"/>
		<bind name="y" value="-5"/>
		<bind name="style" value="'backgroundColor'; entity.relation.value == 1 ? 0xFF0000ff : entity.relation.value == 2 ? 0xFFFF0000 : 0xFFFFFFFF"/>
	</block>
	<block className="RibbonsContainer">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<height value="100%"/>
		</style>
		<bind name="firstEntityDH" value="'battleDataEntity'; CC.battleData"/>
		<bind name="watchDH" value="'enemyDamageCount'; ['battleDataEntity.battleDamage.evChanged']; battleDataEntity.battleDamage.enemy"/>
		<bind name="watchDH" value="'allyDamageCount'; ['battleDataEntity.battleDamage.evChanged']; battleDataEntity.battleDamage.ally"/>
		<bind name="collectionDH" value="CC.userPrefs; 'userPrefsCollection'"/>
		<bind name="entityDH" value="'userPrefsEntity'; userPrefsCollection[0].id"/>
		<bind name="watchDH" value="'userPrefs'; ['userPrefsEntity.userPrefs.evUserPrefsChanged']; userPrefsEntity.userPrefs.userPrefs"/>
		<bind name="watch" value="'showExtendedRibbons'; (userPrefs.extendedRibbons == null) ? false : userPrefs.extendedRibbons"/>
		<bind name="watch" value="'showDamageWidget'; (userPrefs.damageWidget == null) ? false : userPrefs.damageWidget"/>
		<block>
			<style>
				<position value="absolute"/>
				<flow value="horizontal"/>
				<right value="0%"/>
				<top value="0%"/>
				<align value="right|middle"/>
			</style>
			<block>
				<bind name="collectionRepeatDH" value="CC.topRibbon; 'RibbonItemContainer'; ''; {showExtendedRibbons: showExtendedRibbons}"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<block className="DamageCounter">
				<bind name="visible" value="showDamageWidget &amp;&amp; enemyDamageCount &gt; 0"/>
				<style>
					<marginLeft value="16px"/>
					<marginTop value="-2px"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUDBold"/>
					<style>
						<fontSize value="31"/>
					</style>
					<bind name="text" value="format(enemyDamageCount, -1)"/>
				</block>
			</block>
		</block>
		<bind name="instance" value="'NewRibbons'; {showExtendedRibbons: showExtendedRibbons}"/>
	</block>
	<block className="DamageCounter">
		<bind name="visible" value="showDamageWidget &amp;&amp; enemyDamageCount &gt; 0"/>
		<style>
			<marginLeft value="16px"/>
			<marginTop value="-2px"/>
		</style>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<fontSize value="31"/>
			</style>
			<bind name="text" value="format(enemyDamageCount, -1)"/>
		</block>
	</block>
	<block className="RibbonItemContainer">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watch" value="'isRibbon'; !!entity.ribbon"/>
		<bind name="watch" value="'isAchievement'; !!entity.achievement"/>
		<bind name="instance" value="'RibbonItem'; isRibbon ? {showExtendedRibbons: showExtendedRibbons, entityId: entity.id} : null"/>
		<bind name="instance" value="'AchievementItem'; isAchievement ? {showExtendedRibbons: showExtendedRibbons, entityId: entity.id} : null"/>
	</block>
	<block className="RibbonItem">
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'count';['entity.incomeRibbon.evCountChanged']; entity.incomeRibbon.count"/>
		<style>
			<margin value="4px"/>
		</style>
		<bind name="fade" value="count &gt; 0; 0.15; {alpha: 0, top: 10, ubScaleX: 0}; {alpha: 1, top: 0, ubScaleX: 1}; {alpha: 0, top: 10, ubScaleX: 0}; 2"/>
		<block>
			<style>
				<marginLeft value="4px"/>
			</style>
			<bind name="scaleX" value="0.75"/>
			<bind name="scaleY" value="0.75"/>
			<bind name="ubScaleX" value="0.75"/>
			<bind name="ubScaleY" value="0.75"/>
			<bind name="instance" value="'RibbonIcon'; {_iconName: entity.ribbonInfo.iconName}"/>
		</block>
		<bind name="instance" value="'CounterItem'; {_count: count, _small: true}"/>
	</block>
	<block className="AchievementItem">
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'count';['entity.incomeRibbon.evCountChanged']; entity.incomeRibbon.count"/>
		<style>
			<margin value="4px"/>
		</style>
		<bind name="fade" value="count &gt; 0; 0.15; {alpha: 0, top: 10, ubScaleX: 0}; {alpha: 1, top: 0, ubScaleX: 1}; {alpha: 0, top: 10, ubScaleX: 0}; 2"/>
		<block>
			<bind name="scaleX" value="0.75"/>
			<bind name="scaleY" value="0.75"/>
			<bind name="ubScaleX" value="0.75"/>
			<bind name="ubScaleY" value="0.75"/>
			<bind name="instance" value="'AchievementIcon'; {_iconName: entity.achievementInfo.name}"/>
		</block>
		<bind name="instance" value="'CounterItem'; {_count: count, _small: true}"/>
	</block>
	<block className="NewRibbons">
		<style>
			<position value="absolute"/>
			<top value="0%"/>
			<right value="0%"/>
			<paddingTop value="154px"/>
			<paddingRight value="24px"/>
		</style>
		<bind name="collectionRepeatDH" value="CC.tempRibbon; 'NewRibbonItemContainer'; ''; {showExtendedRibbons: showExtendedRibbons}"/>
	</block>
	<block className="NewRibbonItemContainer">
		<bind name="dataRefDH" value="'tmpEntity'; '$dataRef.ref'"/>
		<bind name="entityDH" value="'entity'; tmpEntity.tempRibbon.entityId"/>
		<bind name="handleEventDH" value="'tmpEntity.shortLifeObject.evBeforeRemove'; 'evRemove'; {}; 2"/>
		<style>
			<width value="290px"/>
		</style>
		<bind name="appear" value="'addedToStage'; 0.35; 0; {alpha: 0, top: -50, left: -145, scaleX: 2, scaleY: 2, ubScaleY: 0}; {alpha: 1, top: 0, left: 0, scaleX: 1, scaleY: 1, ubScaleY: 1}; 2"/>
		<bind name="appear" value="'evRemove'; 0.15; 0; {alpha: 1, top: 0}; {alpha: 0, top: -20}; 1"/>
		<bind name="watch" value="'isRibbon'; !!entity.ribbon"/>
		<bind name="watch" value="'isAchievement'; !!entity.achievement"/>
		<bind name="instance" value="'NewRibbonItem'; isRibbon ? {showExtendedRibbons: showExtendedRibbons, entityId: entity.id} : null"/>
		<bind name="instance" value="'NewAchievementItem'; isAchievement ? {showExtendedRibbons: showExtendedRibbons, entityId: entity.id} : null"/>
	</block>
	<block className="NewRibbonItem">
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'count';['entity.incomeRibbon.evTempCountChanged']; entity.incomeRibbon.tempCount"/>
		<bind name="handleEventDH" value="'entity.incomeRibbon.evTempCountChanged'; 'evCountChanged'"/>
		<bind name="watch" value="'hasSubRibbons'; entity.children.list.length &gt; 1"/>
		<style>
			<align value="left|middle"/>
			<flow value="horizontal"/>
		</style>
		<block>
			<bind name="visible" value="hasSubRibbons &amp;&amp; showExtendedRibbons"/>
			<bind name="style" value="'marginLeft'; -(entity.children.list.length - 4)*68 + 'px'"/>
			<bind name="repeat" value="hasSubRibbons &amp;&amp; showExtendedRibbons ? entity.children.list : 0; 'NewSubRibbonItem'; {}"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="!(hasSubRibbons &amp;&amp; showExtendedRibbons)"/>
			<style>
				<margin value="4px"/>
			</style>
			<block>
				<bind name="instance" value="'RibbonIcon'; hasSubRibbons &amp;&amp; showExtendedRibbons ? null : {_iconName: entity.ribbonInfo.iconName}"/>
			</block>
			<bind name="instance" value="'CounterItem'; {_count: count}"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<marginLeft value="4px"/>
			</style>
			<bind name="text" value="'IDS_RIBBON_' + entity.ribbonInfo.ids"/>
			<bind name="visible" value="!(hasSubRibbons &amp;&amp; showExtendedRibbons)"/>
		</block>
	</block>
	<block className="NewSubRibbonItem">
		<bind name="entityDH" value="'entity'; $value"/>
		<bind name="watchDH" value="'count'; ['entity.incomeRibbon.evTempCountChanged']; entity.incomeRibbon.tempCount"/>
		<style>
			<margin value="4px"/>
		</style>
		<block>
			<bind name="style" value="'alpha'; count &gt; 0 ? 1 : 0.5"/>
			<bind name="instance" value="'RibbonIcon'; {_iconName: entity.ribbonInfo.iconName}"/>
		</block>
		<bind name="instance" value="'CounterItem'; {_count: count}"/>
	</block>
	<block className="RibbonIcon">
		<style>
			<width value="60px"/>
			<height value="60px"/>
			<backgroundSize value="cover"/>
		</style>
		<bind name="style" value="'backgroundImage'; 'url:../ribbons/' + _iconName + '.png'"/>
	</block>
	<block className="NewAchievementItem">
		<bind name="entityDH" value="'entity'; entityId"/>
		<bind name="watchDH" value="'count';['entity.incomeRibbon.evTempCountChanged']; entity.incomeRibbon.tempCount"/>
		<style>
			<align value="left|middle"/>
			<flow value="horizontal"/>
		</style>
		<block>
			<style>
				<margin value="4px"/>
			</style>
			<bind name="instance" value="'AchievementIcon'; {_iconName: entity.achievementInfo.name}"/>
			<bind name="instance" value="'CounterItem'; {_count: count}"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<marginLeft value="4px"/>
			</style>
			<bind name="text" value="entity.achievementInfo.nameIDS"/>
		</block>
	</block>
	<block className="AchievementIcon">
		<style>
			<width value="60px"/>
			<height value="60px"/>
			<backgroundSize value="cover"/>
		</style>
		<bind name="style" value="'backgroundImage'; 'url:../achievements/icons/icon_achievement_' + _iconName + '.png'"/>
	</block>
	<css name="$CounterItem">
		<position value="absolute"/>
		<right value="-4px"/>
		<bottom value="-4px"/>
	</css>
	<block className="CounterItem">
		<bind name="changeDispatch" value="_count; 'evCountChanged'; {}; 2"/>
		<styleClass value="$CounterItem"/>
		<block type="text">
			<bind name="visible" value="_count &gt; 0"/>
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="_small ? '$TextHUD16Bold' : '$TextHUDBold'"/>
			<bind name="text" value="'×' + _count"/>
		</block>
		<block>
			<style>
				<left value="50%"/>
				<top value="50%"/>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evCountChanged'; 'CounterFxItem'; {lifetime: 0.3, _count: _count &gt; 0 ? '×' + _count : 0}"/>
		</block>
	</block>
	<block className="CounterFxItem">
		<style>
			<align value="center|middle"/>
		</style>
		<block>
			<style>
				<width value="0px"/>
				<height value="0px"/>
				<align value="center|middle"/>
			</style>
			<bind name="appear" value="'addedToStage'; 0.3; 0; {alpha: 0.75, scaleX: 3, scaleY: 3}; {alpha: 0, scaleX: 1, scaleY: 1}; 2"/>
			<block type="text">
				<bind name="visible" value="_count != 0"/>
				<styleClass value="$TextHUDBold"/>
				<bind name="text" value="_count"/>
			</block>
		</block>
	</block>
	<block className="BattleShipList">
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'gameInfo'"/>
		<bind name="visible" value="gameInfo.gameModeId != GameMode.TUTORIAL"/>
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<align value="center"/>
		</style>
		<block>
			<style>
				<height value="20px"/>
			</style>
			<block>
				<style>
					<left value="-36px"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.avatar; 'BattleShipListRenderer'; 'team.ally.sortedLeftTeam'; {_isAllyTeam: true, _isEnemyTeam: false}"/>
			</block>
			<block>
				<bind name="visible" value="gameInfo.gameModeId != GameMode.PVE"/>
				<style>
					<left value="12px"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.avatar; 'BattleShipListRenderer'; 'team.enemy.sortedRightTeam'; {_isAllyTeam: false, _isEnemyTeam: true}"/>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="BattleShipListRenderer">
		<bind name="name" value="'HeaderIconShip_'+ (_isAllyTeam ? 'Ally_' : 'Enemy_') + $index"/>
		<bind name="dataRefDH" value="'playerEntity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'targetFlags'; 			['playerEntity.target.evChanged']; playerEntity.target.flags"/>
		<bind name="handleEventDH" value="'playerEntity.avatarAnimation.evPlayDeathAnimation'; 'evItemDeath'"/>
		<bind name="handleEventDH" value="'playerEntity.avatarAnimation.evPlayMoveAnimation'; 'evItemMove'"/>
		<bind name="var" value="{posMultiplier: _isAllyTeam ? -1 : 1}"/>
		<bind name="var" value="{startXPosition:  posMultiplier * ($index * (24 + 6))}"/>
		<style>
			<position value="absolute"/>
			<width value="24px"/>
			<height value="12px"/>
		</style>
		<bind name="left" value="(startXPosition)"/>
		<bind name="appear" value="'evItemMove'; 0.15; 0.15; { left : posMultiplier*playerEntity.avatarAnimation.fromIndex * (24 + 6) }; {left : posMultiplier*playerEntity.avatarAnimation.toIndex * (24 + 6)}"/>
		<bind name="dispatch" value="'evItemDeath'; 'evItemDeath_disappear'; []; false; 0"/>
		<bind name="dispatch" value="'evItemDeath_disappear'; 'evItemDeath_move'; []; false; 0.15"/>
		<bind name="dispatch" value="'evItemDeath_move'; 'evItemDeath_appear'; []; false; 0.15"/>
		<bind name="appear" value="'evItemDeath_disappear'; 0.15; 0; { alpha: 1, scaleX: 1, scaleY: 1 }; { alpha : 0, scaleX: 0.1, scaleY: 0.1 }"/>
		<bind name="appear" value="'evItemDeath_move'; 0.15; 0; { left : posMultiplier*playerEntity.avatarAnimation.fromIndex * (24 + 6) }; {left : posMultiplier*playerEntity.avatarAnimation.toIndex * (24 + 6) }"/>
		<bind name="appear" value="'evItemDeath_appear'; 0.15; 0; { alpha: 0, scaleX: 0.1, scaleY: 0.1 }; { alpha : 1, scaleX: 1, scaleY: 1 } "/>
		<block>
			<style>
				<width value="24px"/>
				<height value="12px"/>
				<paddingLeft value="12px"/>
				<paddingTop value="6px"/>
			</style>
			<bind name="instance" value="'ShipMarkerIconSimple'; {
													_entityId: playerEntity.id
												};"/>
		</block>
		<block>
			<style>
				<left value="50%"/>
				<marginLeft value="-50%"/>
				<top value="7px"/>
				<position value="absolute"/>
			</style>
			<block className="target_locked_small" type="native">
				<bind name="visible" value="(targetFlags &amp; (1 &lt;&lt; WeaponType.ARTILLERY | 1 &lt;&lt; WeaponType.TORPEDO)) != 0"/>
			</block>
			<block className="atba_focus_small" type="native">
				<bind name="visible" value="(targetFlags &amp; (1 &lt;&lt; WeaponType.ATBA)) != 0"/>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="KeyIndicator">
		<bind name="var" value="{selectedDevice: 2}"/>
		<bind name="primaryEntityDH" value="'cmdEntity'; CC.commandMappingCommandName; _cmd"/>
		<bind name="watchDH" value="'keyEntityId'; ['cmdEntity.commandKeyList.evChanged']; cmdEntity.commandKeyList.deviceMap[selectedDevice]"/>
		<bind name="entityDH" value="'keyEntity'; keyEntityId"/>
		<bind name="watchDH" value="'device'; []; keyEntity.commandMappingKey.device"/>
		<bind name="watchDH" value="'keyId'; []; keyEntity.commandMappingKey.keyId"/>
		<bind name="watchDH" value="'keyType'; []; keyEntity.commandMappingKey.keyType"/>
		<bind name="primaryEntityDH" value="'inputKeyEntity'; CC.inputKey; keyId"/>
		<bind name="watchDH" value="'keyName'; []; inputKeyEntity.inputKey.name"/>
		<bind name="watchDH" value="'pureName'; []; inputKeyEntity.inputKey.pureName"/>
		<bind name="watchDH" value="'keyState'; ['inputKeyEntity.inputKey.evStateChanged']; inputKeyEntity.inputKey.state"/>
		<bind name="handleEventDH" value="'cmdEntity.commandMappingCommand.evCall'; 'evCommandCall'"/>
		<bind name="handleEventDH" value="'inputKeyEntity.inputKey.evKeyDown'; 'evKeyDown'"/>
		<bind name="handleEventDH" value="'inputKeyEntity.inputKey.evKeyUp'; 'evKeyUp'"/>
		<bind name="var" value="{ doubleFirstTap: false, gotKeyDownEvent: false }"/>
		<bind name="catch" value="'evKeyUp'; { doubleFirstTap: !doubleFirstTap }"/>
		<bind name="catch" value="'resetDoubleTap'; { doubleFirstTap: false }"/>
		<bind name="dispatch" value="'evKeyDown'; 'resetDoubleTap'; null; 2; 0.25"/>
		<bind name="catch" value="'evKeyDown'; { gotKeyDownEvent: true }"/>
		<block>
			<style>
				<position value="absolute"/>
				<top value="50%"/>
				<left value="50%"/>
			</style>
			<bind name="transition" value="keyType == 8; 0.3; {scaleX: 1, scaleY: 1, ubScaleX: 1, ubScaleY: 1}; {scaleX: 0.75, scaleY: 0.75, ubScaleX: 0.75, ubScaleY: 0.75}; {scaleX: 1, scaleY: 1, ubScaleX: 1, ubScaleY: 1}; 2"/>
			<bind name="fxInstance" value="_skipCommandCallFx ? '' : 'evCommandCall'; 'FXCommandCall'; {_pureName: pureName, lifetime: 0.6, _keyType: keyType }"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<left value="16px"/>
				<top value="16px"/>
			</style>
			<bind name="visible" value="keyType == 32"/>
			<block className="lesta.display.Sector" type="native">
				<style>
					<alpha value="0.3"/>
				</style>
				<bind name="color" value="0xFF000000"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="radius" value="20"/>
				<bind name="innerRadius" value="0"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<bind name="visible" value="keyState == 1 &amp;&amp; gotKeyDownEvent"/>
				<style>
					<position value="absolute"/>
					<alpha value="0.3"/>
				</style>
				<bind name="transition" value="keyState == 1; keyState == 1 ? 0.5 : 0; {arc: 0}; {arc: 360}"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="arc" value="0"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="20"/>
				<bind name="innerRadius" value="0"/>
			</block>
			<block className="hold_indicator" type="native">
				<style>
					<position value="absolute"/>
					<left value="-4px"/>
					<top value="-20px"/>
				</style>
			</block>
		</block>
		<block>
			<bind name="transition" value="keyType == 8; 0.3; {scaleX: 1, scaleY: 1, ubScaleX: 1, ubScaleY: 1}; {scaleX: 0.75, scaleY: 0.75, ubScaleX: 0.75, ubScaleY: 0.75}; {scaleX: 1, scaleY: 1, ubScaleX: 1, ubScaleY: 1}; 2"/>
			<block>
				<bind name="transition" value="(keyType == 8) ? (!doubleFirstTap &amp;&amp; (keyState == 1)) : (keyState == 1); 0.05; {scaleX: 1, scaleY: 1, top: 0, left: 0, alpha: 1}; {scaleX: 0.94, scaleY: 0.94, top: 1, left: 1, alpha: 0.9}"/>
				<bind name="instance" value="'KeyImage'; pureName ? {_pureName: pureName} : null"/>
			</block>
			<block>
				<bind name="visible" value="keyType == 8"/>
				<bind name="transition" value="doubleFirstTap &amp;&amp; (keyState == 1); 0.05; {scaleX: 1, scaleY: 1, top: 0, left: 0, alpha: 1}; {scaleX: 0.94, scaleY: 0.94, top: 1, left: 1, alpha: 0.9}"/>
				<bind name="instance" value="'KeyImage'; pureName ? {_pureName: pureName} : null"/>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="KeyImage">
		<style>
			<width value="32px"/>
			<height value="32px"/>
		</style>
		<bind name="style" value="'backgroundSprite'; '[' + _pureName + ']'"/>
	</block>
	<block className="FXCommandCall">
		<style>
			<flow value="horizontal"/>
			<width value="0px"/>
			<height value="0px"/>
			<align value="center|middle"/>
		</style>
		<bind name="appear" value="'addedToStage'; lifetime; 0; {alpha: 0.5, scaleX: 0.9, scaleY: 0.9}; {alpha: 0.1, scaleX: 1.5, scaleY: 1.5}; 1"/>
		<block>
			<bind name="instance" value="'KeyImage'; {_pureName: _pureName}"/>
		</block>
		<block>
			<bind name="visible" value="_keyType == 8"/>
			<bind name="instance" value="'KeyImage'; {_pureName: _pureName}"/>
		</block>
	</block>
	<block className="KeyIndicatorWithLabel">
		<style>
			<flow value="horizontal"/>
			<paddingRight value="5%"/>
		</style>
		<block>
			<bind name="repeat" value="_cmds; 'KeyIndicator'; { _skipCommandCallFx: _skipCommandCallFx }"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="toUpperCase(tr(_keyIndicatorIDS))"/>
		</block>
	</block>
	<block className="LowerLogContainer">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<left value="0%"/>
			<paddingBottom value="476px"/>
			<paddingLeft value="1162px"/>
		</style>
		<bind name="firstEntityDH" value="'feedbackEntity'; CC.feedbackComponent"/>
		<bind name="handleEventDH" value="'feedbackEntity.feedbackComponent.evLowerLog'; 'evLowerLogScope'"/>
		<bind name="dispatch" value="'evLowerLogScope'; 'evOldify'; {}; 1"/>
		<bind name="fxInstance" value="'evLowerLogScope'; 'StateLogMessage'; {lifetime : 3, addToZeroIndex: false}"/>
	</block>
	<block className="DeathLogContainer">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<right value="0%"/>
			<paddingBottom value="332px"/>
			<align value="right"/>
		</style>
		<bind name="firstEntityDH" value="'feedbackEntity'; CC.feedbackComponent"/>
		<bind name="handleEventDH" value="'feedbackEntity.feedbackComponent.evDeathLog'; 'evDeathLogScope'"/>
		<bind name="fxInstance" value="'evDeathLogScope'; 'DeathLogMessage'; {lifetime : 5, addToZeroIndex: true}"/>
	</block>
	<block className="EventLogContainer">
		<style>
			<position value="absolute"/>
			<paddingBottom value="713px"/>
			<bottom value="0%"/>
			<width value="100%"/>
			<align value="center|bottom"/>
		</style>
		<bind name="firstEntityDH" value="'feedbackEntity'; CC.feedbackComponent"/>
		<bind name="handleEventDH" value="'feedbackEntity.feedbackComponent.evEventLog'; 'evEventLogScope'"/>
		<bind name="fxInstance" value="'evEventLogScope'; 'EventLogMessage'; {lifetime : 5}"/>
	</block>
	<css name="$DeathLogMessageShipIcon">
		<paddingLeft value="12px"/>
		<paddingTop value="6px"/>
		<height value="12px"/>
		<width value="24px"/>
		<marginLeft value="2px"/>
		<marginRight value="2px"/>
		<marginTop value="2px"/>
	</css>
	<block className="DeathLogMessage">
		<bind name="watch" value="'eventData'; $args[0]"/>
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
		</style>
		<bind name="var" value="{ fragTypeIcons: 
				[
					'frag_default',
					'frag_detonate',
					'frag_main_caliber',
					'frag_main_caliber',
					'frag_torpedo',
					'frag_bomb',
					'frag_ram',
					'frag_burning',
					'frag_flood',
					'frag_atba',
					'frag_naval_mine'
				]
	}"/>
		<bind name="entityDH" value="'victimEntity'; eventData.info.victim"/>
		<bind name="entityDH" value="'killerEntity'; eventData.info.killer"/>
		<bind name="watch" value="'weapon';eventData.info.weapon"/>
		<bind name="watchDH" value="'killerName'; []; killerEntity.avatar.pureName"/>
		<bind name="watchDH" value="'killerRelation'; []; killerEntity.relation.value &lt;= 1 ? 'ally' :
																killerEntity.relation.value == 2 ? 'enemy' : 'neutral'"/>
		<bind name="watchDH" value="'killerShiptype'; []; killerEntity.avatar.ship.ref.ship.subtype"/>
		<bind name="watchDH" value="'killerShipnameIDS'; []; killerEntity.avatar.ship.ref.ship.nameIDS"/>
		<bind name="watch" value="'killerColorClass'; killerRelation == 'ally' ? '$TextColorHUDAlly' : killerRelation == 'enemy' ? '$TextColorHUDEnemy' : killerRelation == 'own' ? '$TextColorHUDDivision' : '$TextColorHUDNeutral'"/>
		<bind name="watchDH" value="'victimName'; []; victimEntity.avatar.pureName"/>
		<bind name="watchDH" value="'victimRelation'; []; victimEntity.relation.value &lt;= 1 ? 'ally' :
																victimEntity.relation.value == 2 ? 'enemy' : 'neutral'"/>
		<bind name="watchDH" value="'victimShiptype'; []; victimEntity.avatar.ship.ref.ship.subtype"/>
		<bind name="watchDH" value="'victimShipnameIDS'; []; victimEntity.avatar.ship.ref.ship.nameIDS"/>
		<bind name="watch" value="'victimColorClass'; victimRelation == 'ally' ? '$TextColorHUDAlly' : victimRelation == 'enemy' ? '$TextColorHUDEnemy' : victimRelation == 'own' ? '$TextColorHUDDivision' : '$TextColorHUDNeutral'"/>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="killerColorClass"/>
			<bind name="text" value="killerName"/>
		</block>
		<block>
			<styleClass value="$DeathLogMessageShipIcon"/>
			<bind name="instance" value="'ShipMarkerIconSimple'; {
													_entityId: eventData.info.killer,
													_ignoreDead: true
												};"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<styleClass value="$CapsTracking"/>
			<bind name="class" value="killerColorClass"/>
			<bind name="text" value="toUpperCase(tr(killerShipnameIDS))"/>
		</block>
		<block>
			<style>
				<width value="21px"/>
				<height value="21px"/>
				<marginLeft value="2px"/>
				<marginRight value="2px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; fragTypeIcons[weapon]"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="class" value="victimColorClass"/>
			<bind name="text" value="victimName"/>
		</block>
		<block>
			<styleClass value="$DeathLogMessageShipIcon"/>
			<bind name="instance" value="'ShipMarkerIconSimple'; {
														_entityId: eventData.info.victim, 
														_ignoreDead: true
													};"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<styleClass value="$CapsTracking"/>
			<bind name="class" value="victimColorClass"/>
			<bind name="text" value="toUpperCase(tr(victimShipnameIDS))"/>
		</block>
	</block>
	<block className="StateLogMessage">
		<bind name="watch" value="'eventData'; $args[0]"/>
		<bind name="var" value="{isOld: false}"/>
		<bind name="catch" value="'evOldify'; {isOld: true}"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0, top: -10, ubScaleY: 0}; {alpha: 1, top: 0, ubScaleY: -1}; 2"/>
		<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.3; {alpha: 1, top: 0}; {alpha: 0, top: 10}; 1"/>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<styleClass value="$CapsTracking"/>
			<bind name="style" value="'textColor'; 0xFF + eventData.color"/>
			<bind name="transition" value="isOld; 0.15; {alpha: 1}; {alpha: 0.7}"/>
			<bind name="text" value="toUpperCase(tr(eventData.text))"/>
		</block>
	</block>
	<block className="EventLogMessage">
		<bind name="watch" value="'eventData'; $args[0]"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0, top: 10, ubScaleY: 0}; {alpha: 1, top: 0, ubScaleY: 1}; 2"/>
		<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.3; {alpha: 1, top: 0, ubScaleY: 1}; {alpha: 0, top: -10, ubScaleY: 0}; 1"/>
		<block type="text">
			<styleClass value="$TextHUD24Bold"/>
			<styleClass value="$CapsTracking"/>
			<style>
				<textAlign value="center"/>
				<leading value="-6"/>
			</style>
			<bind name="style" value="'textColor'; 0xFF + eventData.color"/>
			<bind name="text" value="toUpperCase(tr(eventData.text))"/>
		</block>
	</block>
	<block className="ScenarioObjectivesContainer">
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<top value="0%"/>
			<paddingTop value="24px"/>
			<align value="center"/>
		</style>
		<block>
			<bind name="collectionRepeatDH" value="CC.objective; 'FakeElement'; 'rows.upper.sorted'; {}"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<bind name="collectionRepeatDH" value="CC.objective; 'FakeElement'; 'rows.lower.sorted'; {}"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block className="TeamScoreElement">
			<bind name="firstEntityDH" value="'scoreEntity'; CC.battleTeamScore"/>
			<bind name="watchDH" value="'allyScore'; ['scoreEntity.battleTeamScore.evAllyScoreChanged']; scoreEntity.battleTeamScore.allyScore"/>
			<bind name="watchDH" value="'enemyScore'; ['scoreEntity.battleTeamScore.evEnemyScoreChanged']; scoreEntity.battleTeamScore.enemyScore"/>
			<bind name="handleEventDH" value="'scoreEntity.battleTeamScore.evAllyScoreChanged'; 'evAllyScoreChanged'; {}; 2"/>
			<bind name="handleEventDH" value="'scoreEntity.battleTeamScore.evEnemyScoreChanged'; 'evEnemyScoreChanged'; {}; 2"/>
			<style>
				<marginTop value="8px"/>
				<align value="center"/>
			</style>
			<bind name="var" value="{barWidth: 64}"/>
			<block>
				<bind name="visible" value="!!scoreEntity"/>
				<block>
					<style>
						<backgroundColor value="0x80000000"/>
						<height value="3px"/>
						<width value="1px"/>
						<marginRight value="8px"/>
					</style>
					<bind name="style" value="'width'; barWidth"/>
					<block>
						<style>
							<position value="absolute"/>
							<height value="3px"/>
							<width value="1px"/>
							<backgroundColor value="0xFF80c0ff"/>
						</style>
						<bind name="style" value="'width'; barWidth * allyScore/scoreEntity.battleTeamScore.totalScore"/>
					</block>
				</block>
				<block>
					<style>
						<backgroundColor value="0x80000000"/>
						<height value="3px"/>
						<width value="1px"/>
						<marginLeft value="8px"/>
					</style>
					<bind name="style" value="'width'; barWidth"/>
					<block>
						<style>
							<position value="absolute"/>
							<height value="3px"/>
							<width value="1px"/>
							<right value="0px"/>
							<backgroundColor value="0xFFe75153"/>
						</style>
						<bind name="style" value="'width'; barWidth * enemyScore/scoreEntity.battleTeamScore.totalScore"/>
					</block>
				</block>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<block>
				<bind name="visible" value="!!scoreEntity"/>
				<style>
					<align value="center|middle"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUD24Bold"/>
					<style>
						<textAlign value="right"/>
						<width value="64px"/>
					</style>
					<bind name="text" value="allyScore"/>
				</block>
				<block type="text">
					<styleClass value="$TextHUDBold"/>
					<style>
						<textAlign value="center"/>
					</style>
					<text value=":"/>
				</block>
				<block type="text">
					<styleClass value="$TextHUD24Bold"/>
					<style>
						<width value="64px"/>
					</style>
					<bind name="text" value="enemyScore"/>
				</block>
				<block>
					<styleClass value="$HUDFullsize"/>
					<style>
						<position value="absolute"/>
					</style>
					<block>
						<style>
							<position value="absolute"/>
							<marginLeft value="-100%"/>
							<align value="center"/>
						</style>
						<bind name="fxInstance" value="'evAllyScoreChanged'; 'ScoreChangeFx'; {lifetime: 1}"/>
					</block>
					<block>
						<style>
							<position value="absolute"/>
							<right value="0px"/>
							<marginLeft value="100%"/>
							<align value="center"/>
						</style>
						<bind name="fxInstance" value="'evEnemyScoreChanged'; 'ScoreChangeFx'; {lifetime: 1}"/>
					</block>
				</block>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
		</block>
	</block>
	<block className="TeamScoreElement">
		<bind name="firstEntityDH" value="'scoreEntity'; CC.battleTeamScore"/>
		<bind name="watchDH" value="'allyScore'; ['scoreEntity.battleTeamScore.evAllyScoreChanged']; scoreEntity.battleTeamScore.allyScore"/>
		<bind name="watchDH" value="'enemyScore'; ['scoreEntity.battleTeamScore.evEnemyScoreChanged']; scoreEntity.battleTeamScore.enemyScore"/>
		<bind name="handleEventDH" value="'scoreEntity.battleTeamScore.evAllyScoreChanged'; 'evAllyScoreChanged'; {}; 2"/>
		<bind name="handleEventDH" value="'scoreEntity.battleTeamScore.evEnemyScoreChanged'; 'evEnemyScoreChanged'; {}; 2"/>
		<style>
			<marginTop value="8px"/>
			<align value="center"/>
		</style>
		<bind name="var" value="{barWidth: 64}"/>
		<block>
			<bind name="visible" value="!!scoreEntity"/>
			<block>
				<style>
					<backgroundColor value="0x80000000"/>
					<height value="3px"/>
					<width value="1px"/>
					<marginRight value="8px"/>
				</style>
				<bind name="style" value="'width'; barWidth"/>
				<block>
					<style>
						<position value="absolute"/>
						<height value="3px"/>
						<width value="1px"/>
						<backgroundColor value="0xFF80c0ff"/>
					</style>
					<bind name="style" value="'width'; barWidth * allyScore/scoreEntity.battleTeamScore.totalScore"/>
				</block>
			</block>
			<block>
				<style>
					<backgroundColor value="0x80000000"/>
					<height value="3px"/>
					<width value="1px"/>
					<marginLeft value="8px"/>
				</style>
				<bind name="style" value="'width'; barWidth"/>
				<block>
					<style>
						<position value="absolute"/>
						<height value="3px"/>
						<width value="1px"/>
						<right value="0px"/>
						<backgroundColor value="0xFFe75153"/>
					</style>
					<bind name="style" value="'width'; barWidth * enemyScore/scoreEntity.battleTeamScore.totalScore"/>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="!!scoreEntity"/>
			<style>
				<align value="center|middle"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD24Bold"/>
				<style>
					<textAlign value="right"/>
					<width value="64px"/>
				</style>
				<bind name="text" value="allyScore"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<style>
					<textAlign value="center"/>
				</style>
				<text value=":"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUD24Bold"/>
				<style>
					<width value="64px"/>
				</style>
				<bind name="text" value="enemyScore"/>
			</block>
			<block>
				<styleClass value="$HUDFullsize"/>
				<style>
					<position value="absolute"/>
				</style>
				<block>
					<style>
						<position value="absolute"/>
						<marginLeft value="-100%"/>
						<align value="center"/>
					</style>
					<bind name="fxInstance" value="'evAllyScoreChanged'; 'ScoreChangeFx'; {lifetime: 1}"/>
				</block>
				<block>
					<style>
						<position value="absolute"/>
						<right value="0px"/>
						<marginLeft value="100%"/>
						<align value="center"/>
					</style>
					<bind name="fxInstance" value="'evEnemyScoreChanged'; 'ScoreChangeFx'; {lifetime: 1}"/>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="ScoreChangeFx">
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0, top: 10}; {alpha: 1, top: 0}; 2"/>
		<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.15; {alpha: 1, top: 0}; {alpha: 0, top: -10}; 2"/>
		<block type="text">
			<styleClass value="$TextHUD24Bold"/>
			<bind name="text" value="$args[0] &gt; 0 ? '+' + $args[0] : $args[0]"/>
		</block>
	</block>
	<block className="FakeElement">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'type'; []; entity.entityType.value"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<style>
			<width value="50px"/>
			<height value="50px"/>
			<align value="center|middle"/>
		</style>
		<block>
			<bind name="childParentScope" value="type;
    		'StabMarker';
    		'StabMarker';
    		'CapturePointMarker';
    		'EpicenterMarker';
    		'StabMarker';
    		'StabMarker';
    		'StabMarker';
    		'StabMarker';
    		'StabMarker';
    		'StabMarker';
    		'PayloadObj';
    		'ResourceObj';
    		'KeyObjectObj'"/>
		</block>
	</block>
	<block className="PayloadObj">
		<block type="text">
			<text value="PayloadObj"/>
		</block>
	</block>
	<block className="ResourceObj">
		<block type="text">
			<text value="ResourceObj"/>
		</block>
	</block>
	<block className="KeyObjectObj">
		<block type="text">
			<text value="KeyObjectObj"/>
		</block>
	</block>
	<block className="StabMarker">
		<style>
			<width value="50px"/>
			<height value="50px"/>
			<backgroundColor value="0xFFFFFFFF"/>
		</style>
	</block>
	<block className="ChatOutput">
		<params>
			<param name="name" value="chat_output"/>
		</params>
		<bind name="controller" value="lesta.dialogs.battle_window_controllers.uss_controllers.ControllerBattleStats"/>
		<bind name="action" value="'addedToStage'; 'battleChat.shown'; { }"/>
		<bind name="firstEntityDH" value="'battleChatEntity'; CC.battleChatAndLog"/>
		<bind name="watchDH" value="'isGloballyMuted';	['battleChatEntity.battleChatAndLog.evGloballyMutedChanged'];	battleChatEntity.battleChatAndLog.isGloballyMuted"/>
		<bind name="var" value="{isChatExpanded: false}"/>
		<bind name="handleEventDH" value="'battleChatEntity.battleChatAndLog.evMessageReceived'; 'newMessageEvent'; {}; 2"/>
		<bind name="dispatch" value="'newMessageEvent';					'delayedHideChatEvent'; {}; 2"/>
		<bind name="dispatchDelayReset" value="'delayedHideChatEvent'; 'hideChatEvent'; {}; 2; 10"/>
		<bind name="dispatch" value="'newMessageEvent';	isChatExpanded ? 'showChatEvent' : 'showChatWithAutoScrollEvent'; {}; 2"/>
		<bind name="catch" value="'showChatWithAutoScrollEvent';		{isChatExpanded: true}"/>
		<bind name="catch" value="'showChatEvent';		{isChatExpanded: true}"/>
		<bind name="catch" value="'hideChatEvent';		{isChatExpanded: false}"/>
		<style>
			<position value="absolute"/>
			<left value="10px"/>
			<bottom value="700px"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fade" value="isChatExpanded; 0.25; {alpha: 0}; {alpha: 1}; {alpha: 0}"/>
			<block>
				<params>
					<param name="name" value="backgroundClip"/>
				</params>
				<style>
					<position value="absolute"/>
					<width value="255px"/>
					<height value="202px"/>
					<backgroundColor value="0xFF000000"/>
					<alpha value="0.3"/>
				</style>
			</block>
			<block>
				<params>
					<param name="name" value="txa_output"/>
				</params>
				<style>
					<position value="absolute"/>
					<width value="255px"/>
					<height value="202px"/>
					<top value="52px"/>
					<scrollbar value="CombatChatScrollBar"/>
					<scrollbarAlign value="right"/>
					<scrollbarController value="lesta.unbound.style.UbScrollingControllerChat"/>
					<scrollArea value="ModernScrollArea"/>
					<scrollbarTrackMode value="scrollToCursor"/>
					<wheelScrollSpeed value="30"/>
					<overflow value="scroll"/>
					<layout value="lesta.unbound.layout.measure.CarouselVariableItemSizeLayout"/>
					<itemWidth value="255px"/>
					<itemHeight value="17px"/>
				</style>
				<bind name="controller" value="lesta.unbound.controls.ControllerAutoScroll"/>
				<bind name="event" value="'showChatWithAutoScrollEvent'; instantScrollToLastItem"/>
				<bind name="generatorDH" value="CC.battleChatAndLogMessage; 'ChatOutputRenderer'; 'sorted'; {}"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<top value="260px"/>
				<left value="259px"/>
			</style>
			<bind name="instance" value="'VoiceChatOutgoingIcon'; {_isInBattle: true, _isSpeaking: selfPlayer.isSpeaking}"/>
		</block>
		<block type="text">
			<params>
				<param name="name" value="chatDisabledLabel"/>
			</params>
			<style>
				<position value="absolute"/>
				<left value="4px"/>
				<top value="258px"/>
			</style>
			<styleClass value="$TextHUD"/>
			<bind name="visible" value="isGloballyMuted"/>
			<text value="IDS_CHAT_SWITCH_ON"/>
		</block>
	</block>
	<block className="VoiceChatOutgoingIcon">
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'VoiceChatState'"/>
		<bind name="transition" value="VoiceChatState.outgoing; 0.15; {alpha: 0}; {alpha: 1}"/>
		<block>
			<bind name="transition" value="_isSpeaking; 0.15; {alpha: 0.6}; {alpha: 1}"/>
			<style>
				<width value="10px"/>
				<height value="10px"/>
				<backgroundColor value="0xFFF1F1F1"/>
			</style>
		</block>
	</block>
	<block className="ChatOutputRenderer">
		<bind name="name" value="'MessageListItem_txa_output_' + $index"/>
		<bind name="dataRefDH" value="'messageEntity'; '$dataRef.ref'"/>
		<bind name="firstEntityDH" value="'battleChatEntity'; CC.battleChatAndLog"/>
		<style>
			<width value="100%"/>
		</style>
		<block type="text">
			<style>
				<width value="100%"/>
				<marginTop value="-1px"/>
				<marginLeft value="4px"/>
				<marginRight value="4px"/>
				<leading value="-3"/>
				<hitTest value="false"/>
			</style>
			<style>
				<styleSheet value="
				.ally {
					color: #80c0ff;
				}
				.enemy {
					color: #e75153;
				}
				.self {
					color: #ffcc66;
				}
			"/>
			</style>
			<styleClass value="$TextHUD"/>
			<bind name="text" value="messageEntity.battleChatAndLogMessage.htmlText"/>
			<bind name="substitute" value="''; 5; battleChatEntity.battleChatAndLog.substitutions"/>
		</block>
	</block>
	<block className="QuickCommands">
		<styleClass value="$HUDFullsize"/>
		<style>
			<position value="absolute"/>
			<align value="center|middle"/>
		</style>
		<bind name="stageSize"/>
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'commandsData'; ['quickCommandsPanelEntity.quickCommandsPanel.evChanged']; quickCommandsPanelEntity.quickCommandsPanel.commandsData"/>
		<bind name="var" value="{_currentMenuSector: -1}"/>
		<bind name="catch" value="'currentMenuSectorChanged'"/>
		<bind name="action" value="'_currentMenuSector' + varChanged; 'quickCommandChanged'; { 'commandId': commandsData[_currentMenuSector].commandId }"/>
		<block>
			<styleClass value="$HUDFullsize"/>
			<style>
				<position value="absolute"/>
				<backgroundColor value="0x00cccccc"/>
			</style>
			<bind name="dispatch" value="'rollOver'; 'currentMenuSectorChanged'; {_currentMenuSector: -1}"/>
		</block>
		<block>
			<bind name="appear" value="'startShow'; 0.1; 0.1; {alpha: 0}; {alpha: 1}"/>
			<styleClass value="$ZeroSize"/>
			<block>
				<styleClass value="$ZeroSize"/>
				<bind name="repeat" value="8; 'QuickCommandSector'; {_stageHeight: stageHeight/uiScale}"/>
			</block>
			<block>
				<styleClass value="$ZeroSize"/>
				<bind name="repeat" value="8; 'QuickCommandItem'; {stageHeight: stageHeight/uiScale}"/>
			</block>
		</block>
	</block>
	<block className="QuickCommandSector">
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'commandsData'; ['quickCommandsPanelEntity.quickCommandsPanel.evChanged']; quickCommandsPanelEntity.quickCommandsPanel.commandsData"/>
		<bind name="watchDH" value="'selected'; ['quickCommandsPanelEntity.quickCommandsPanel.evChanged']; !!quickCommandsPanelEntity.quickCommandsPanel.commandsData[$index].selected"/>
		<bind name="controller" value="lesta.unbound.controls.UbInteractiveController"/>
		<bind name="transition" value="(selected || rollOver) &amp;&amp; commandsData[$index].enabled; 0.05; {alpha: 0.25}; {alpha: 0.4}"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="watch" value="'_circRad'; (_stageHeight * 0.8)"/>
		<bind name="watch" value="'_circInRad'; (_stageHeight * 0.1)"/>
		<bind name="dispatch" value="'rollOver'; 'currentMenuSectorChanged'; {_currentMenuSector: (commandsData[$index].enabled ? $index : -1)}"/>
		<bind name="changeDispatch" value="selected; 'currentMenuSectorChanged'; {_currentMenuSector: (commandsData[$index].enabled ? $index : -1)}"/>
		<block className="lesta.display.Sector" type="native">
			<bind name="cacheAsBitmap" value="true"/>
			<bind name="rotation" value="$index * 45 - 22.25"/>
			<bind name="colors" value="[0xFF000000, 0xFF000000]"/>
			<bind name="alphas" value="[1, 0]"/>
			<bind name="ratios" value="[60, 255]"/>
			<bind name="arc" value="44.5"/>
			<bind name="radius" value="_circRad"/>
			<bind name="innerRadius" value="_circInRad"/>
		</block>
	</block>
	<block className="QuickCommandItem">
		<styleClass value="$ZeroSize"/>
		<style>
			<position value="absolute"/>
			<hitTest value="false"/>
			<align value="center|middle"/>
		</style>
		<bind name="style" value="'alpha'; commandsData[$index].enabled ? 1 : 0.3"/>
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'commandsData'; ['quickCommandsPanelEntity.quickCommandsPanel.evUpdate']; quickCommandsPanelEntity.quickCommandsPanel.commandsData"/>
		<bind name="watch" value="'itemPosition'; [ { qc_left: (stageHeight * 0.27) + 'px' },
								{ qc_top: (stageHeight * 0.18) + 'px', qc_left: (stageHeight * 0.2) + 'px' },
								{ qc_top: (stageHeight * 0.27) + 'px' },
								{ qc_top: (stageHeight * 0.18) + 'px', qc_left: -(stageHeight * 0.2) + 'px' },
								{ qc_left: -(stageHeight * 0.27) + 'px' },
								{ qc_top: -(stageHeight * 0.18) + 'px', qc_left: -(stageHeight * 0.2) + 'px' },
								{ qc_top: -(stageHeight * 0.27) + 'px' },
								{ qc_top: -(stageHeight * 0.18) + 'px', qc_left: (stageHeight * 0.2) + 'px' }, 

								{ qc_top: (stageHeight * 0.10) + 'px', qc_left: (stageHeight * 0.5) + 'px' }, 
								{ qc_top: (stageHeight * 0.10) + 'px', qc_left: -(stageHeight * 0.5) + 'px' },
								{ qc_top: -(stageHeight * 0.10) + 'px', qc_left: -(stageHeight * 0.5) + 'px' },
								{ qc_top: -(stageHeight * 0.10) + 'px', qc_left: (stageHeight * 0.5) + 'px' } ]"/>
		<bind name="style" value="'top'; itemPosition[$index].qc_top"/>
		<bind name="style" value="'left'; itemPosition[$index].qc_left"/>
		<block>
			<bind name="visible" value="commandsData[$index].icon != null"/>
			<bind name="style" value="'backgroundSprite'; commandsData[$index].icon + '_c'"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUD22Bold"/>
			<style>
				<textAlign value="center"/>
				<marginTop value="32px"/>
				<width value="1280:130,1920:200ah"/>
			</style>
			<bind name="text" value="commandsData[$index].text"/>
		</block>
	</block>
	<block className="QuickCommandsSmall">
		<styleClass value="$HUDFullsize"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="appear" value="'addedToStage'; 0.05; 0.1; {alpha: 0}; {alpha: 1}"/>
		<bind name="stageSize"/>
		<bind name="var" value="{_currentCommandId: -1}"/>
		<bind name="catch" value="'currentCommandIdChanged'"/>
		<bind name="action" value="'_currentCommandId' + varChanged; 'quickCommandChanged'; { 'commandId': _currentCommandId }"/>
		<block>
			<styleClass value="$HUDFullsize"/>
			<style>
				<position value="absolute"/>
				<backgroundColor value="0x00cccccc"/>
			</style>
			<bind name="dispatch" value="'rollOver'; 'currentCommandIdChanged'; {_currentCommandId: -1}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<align value="center|middle"/>
			</style>
			<bind name="appear" value="'startShow'; 0.1; 0; {alpha: 0}; {alpha: 1}"/>
			<bind name="firstEntityDH" value="'mouseEntity'; CC.mouse"/>
			<bind name="watchDH" value="'mouseX'; ['mouseEntity.mouse.evActiveChanged']; mouseEntity.mouse.x"/>
			<bind name="watchDH" value="'mouseY'; ['mouseEntity.mouse.evActiveChanged']; mouseEntity.mouse.y"/>
			<bind name="style" value="'left';	mouseX &lt; (stageHeight * 0.17)						? (stageHeight * 0.17) :
								(mouseX &gt; (stageWidth - (stageHeight * 0.17))		? stageWidth - (stageHeight * 0.17)
																								: mouseX)"/>
			<bind name="style" value="'top';		mouseY &lt; (stageHeight * 0.17)						? (stageHeight * 0.17) :
								(mouseY &gt; (stageHeight - (stageHeight * 0.17))		? stageHeight - (stageHeight * 0.17)
																								: mouseY)"/>
			<block>
				<styleClass value="$ZeroSize"/>
				<style>
					<align value="center|middle"/>
				</style>
				<bind name="dispatch" value="'rollOver'; 'currentCommandIdChanged'; {_currentCommandId: -1}"/>
				<block className="lesta.display.Circle" type="native">
					<style>
						<alpha value="0"/>
					</style>
					<bind name="radius" value="stageHeight * 0.07"/>
				</block>
			</block>
			<block>
				<styleClass value="$ZeroSize"/>
				<bind name="repeat" value="8; 'QuickCommandSSector'; {_stageHeight: stageHeight}"/>
			</block>
			<block>
				<styleClass value="$ZeroSize"/>
				<bind name="repeat" value="8; 'QuickCommandSItem'"/>
			</block>
		</block>
	</block>
	<block className="QuickCommandSSector">
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'commandsData'; ['quickCommandsPanelEntity.quickCommandsPanel.evChanged']; quickCommandsPanelEntity.quickCommandsPanel.commandsData"/>
		<bind name="controller" value="lesta.unbound.controls.UbInteractiveController"/>
		<bind name="transition" value="rollOver &amp;&amp; commandsData[$index].enabled; 0.05; {alpha: 0.25}; {alpha: 0.4}"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="watch" value="'_qcs_circRad'; (_stageHeight * 0.23)"/>
		<bind name="watch" value="'_qcs_circInRad'; (_stageHeight * 0.05)"/>
		<bind name="dispatch" value="'rollOver'; 'currentCommandIdChanged'; {_currentCommandId: (commandsData[$index].enabled ? commandsData[$index].commandId : -1)}"/>
		<block className="lesta.display.Sector" type="native">
			<bind name="cacheAsBitmap" value="true"/>
			<bind name="rotation" value="$index * 45 - 22.5"/>
			<bind name="color" value="0xff000000"/>
			<bind name="arc" value="44"/>
			<bind name="radius" value="_qcs_circRad"/>
			<bind name="innerRadius" value="_qcs_circInRad"/>
		</block>
	</block>
	<block className="QuickCommandSItem">
		<bind name="stageSize"/>
		<styleClass value="$ZeroSize"/>
		<style>
			<align value="center|middle"/>
		</style>
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'commandsData'; ['quickCommandsPanelEntity.quickCommandsPanel.evChanged']; quickCommandsPanelEntity.quickCommandsPanel.commandsData"/>
		<bind name="style" value="'alpha'; commandsData[$index].enabled ? 1 : 0.3"/>
		<style>
			<hitTest value="false"/>
		</style>
		<bind name="watch" value="'itemPosition'; [ { qcs_left: (stageHeight * 0.15) + 'px' },
								{ qcs_top: (stageHeight * 0.11) + 'px', qcs_left: (stageHeight * 0.11) + 'px' },
								{ qcs_top: (stageHeight * 0.14) + 'px' },
								{ qcs_top: (stageHeight * 0.11) + 'px', qcs_left: -(stageHeight * 0.11) + 'px' },
								{ qcs_left: -(stageHeight * 0.15) + 'px' },
								{ qcs_top: -(stageHeight * 0.11) + 'px', qcs_left: -(stageHeight * 0.11) + 'px' },
								{ qcs_top: -(stageHeight * 0.155) + 'px' },
								{ qcs_top: -(stageHeight * 0.11) + 'px', qcs_left: (stageHeight * 0.11) + 'px' }, ]"/>
		<bind name="style" value="'top'; itemPosition[$index].qcs_top"/>
		<bind name="style" value="'left'; itemPosition[$index].qcs_left"/>
		<block>
			<bind name="visible" value="commandsData[$index].icon != null"/>
			<bind name="style" value="'backgroundSprite'; commandsData[$index].icon + '_c'"/>
		</block>
	</block>
	<block className="CapturePointProgressContainer">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
			<paddingBottom value="276px"/>
			<align value="center"/>
			<width value="100%"/>
		</style>
		<bind name="collectionDH" value="CC.capturePoint; 'selfCapturePoints'; 'selfInvading'"/>
		<bind name="watch" value="'selfCapturePointsType'; selfCapturePoints[0].capturePoint.type"/>
		<block>
			<bind name="visible" value="selfCapturePoints.length &gt; 0"/>
			<style>
				<align value="center"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<bind name="text" value="selfCapturePointsType &lt; 5 ? 'IDS_PROGRESS_IM_CAPTURE_CONTROL' : selfCapturePointsType == 5 ? 'IDS_PROGRESS_IM_CAPTURE_BASE' : 'IDS_PROGRESS_IM_CAPTURE_EPICENTERCP'"/>
			</block>
			<block>
				<bind name="collectionRepeatDH" value="CC.capturePoint; 'CapturePointProgressBar'; 'selfInvading'; {}"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
		</block>
		<bind name="firstEntityDH" value="'avatar'; CC.playerAvatar"/>
		<bind name="collectionRepeatDH" value="CC.state; 'ShipStateProgressBar'; 'byEntity.' + avatar.id; {}"/>
	</block>
	<block className="CapturePointProgressBar">
		<style>
			<marginRight value="2px"/>
			<marginLeft value="2px"/>
		</style>
		<bind name="appear" value="'addedToStage'; 0.15; 0.3; {alpha: 0, top: 10}; {alpha: 1, top: 0}"/>
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'progress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'timeLeft'; ['entity.capturePoint.evTimeLeftChanged']; entity.capturePoint.timeLeft"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'bothInside'; ['entity.capturePoint.evBothInsideChanged']; entity.capturePoint.bothInside"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<block>
			<style>
				<align value="center|middle"/>
				<marginRight value="32px"/>
			</style>
			<block>
				<style>
					<width value="32px"/>
					<align value="center|middle"/>
					<marginTop value="23px"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUD24Bold"/>
					<style>
						<position value="absolute"/>
						<top value="-17px"/>
					</style>
					<bind name="visible" value="entity.capturePoint.type &lt; 5"/>
					<bind name="class" value="relation == 'ally' ? '$TextColorHUDAlly' : relation == 'enemy' ? '$TextColorHUDEnemy' : '$TextColorHUDNeutral'"/>
					<bind name="text" value="entity.capturePoint.label"/>
				</block>
				<block>
					<bind name="visible" value="entity.capturePoint.type == 5"/>
					<bind name="style" value="'backgroundSprite'; 'capture_flag_' + relation + '_c'"/>
				</block>
				<block>
					<bind name="visible" value="entity.capturePoint.type == 6"/>
					<bind name="style" value="'backgroundSprite'; 'epicenter_' + entity.capturePoint.epicenterIndex + '_c'"/>
				</block>
			</block>
			<bind name="var" value="{barWidth: 140}"/>
			<block>
				<style>
					<align value="center"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUD16Bold"/>
					<style>
						<marginBottom value="-2px"/>
					</style>
					<bind name="alpha" value="progress &gt; 0 ? 1 : 0"/>
					<bind name="text" value="countdownFormat(timeLeft, 0)"/>
				</block>
				<block>
					<block>
						<style>
							<height value="3px"/>
							<width value="1px"/>
							<alpha value="0.3"/>
						</style>
						<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
						<bind name="style" value="'width'; barWidth"/>
					</block>
					<block>
						<style>
							<height value="3px"/>
							<width value="1px"/>
							<position value="absolute"/>
						</style>
						<bind name="style" value="'backgroundColor'; invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
						<bind name="style" value="'width'; barWidth * progress"/>
						<block className="blocker_ship_c" type="native">
							<style>
								<position value="absolute"/>
								<top value="2px"/>
								<right value="-20px"/>
							</style>
							<bind name="fade" value="bothInside; 0.15; {alpha: 0, top: -10}; {alpha: 1, top: 0}"/>
						</block>
					</block>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="ShipStateProgressBar">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="firstEntityDH" value="'avatar'; CC.playerAvatar"/>
		<bind name="watchDH" value="'progress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'healthPercent'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value / entity.health.max"/>
		<bind name="watchDH" value="'status'; ['entity.state.evStatusChanged']; entity.state.status"/>
		<bind name="watchDH" value="'lock'; ['entity.state.evStatusChanged']; entity.state.status &gt; 0"/>
		<bind name="watchDH" value="'stateIndex'; ['']; entity.state.type == 1 ? 0 : (entity.state.type == 2 ? 1 : (entity.state.type == 1003 ? 2 : 3))"/>
		<bind name="childParentScope" value="stateIndex; 'RepairStateProgressBar'; 'GatheringStateProgressBar'; 'HoldResourceStateProgressBar'; 'StubState'"/>
	</block>
	<block className="RepairStateProgressBar">
		<block>
			<style>
				<maxHeight value="500"/>
				<overflow value="scroll"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<styleClass value="$DefaultScrollBar"/>
			<block type="text">
				<styleClass value="$TextDefault"/>
				<style>
					<textColor value="0xffffffff"/>
					<maxWidth value="600"/>
					<marginBottom value="3px"/>
				</style>
				<bind name="text" value="'healthPercent: ' + (healthPercent)"/>
			</block>
		</block>
	</block>
	<block className="GatheringStateProgressBar">
		<block>
			<style>
				<maxHeight value="500"/>
				<overflow value="scroll"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<styleClass value="$DefaultScrollBar"/>
			<block type="text">
				<styleClass value="$TextDefault"/>
				<style>
					<textColor value="0xffffffff"/>
					<maxWidth value="600"/>
					<marginBottom value="3px"/>
				</style>
				<bind name="text" value="'lock: ' + (lock)"/>
			</block>
		</block>
	</block>
	<block className="HoldResourceStateProgressBar">
		<block>
			<style>
				<maxHeight value="500"/>
				<overflow value="scroll"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<styleClass value="$DefaultScrollBar"/>
			<block type="text">
				<styleClass value="$TextDefault"/>
				<style>
					<textColor value="0xffffffff"/>
					<maxWidth value="600"/>
					<marginBottom value="3px"/>
				</style>
				<bind name="text" value="'progress: ' + (progress)"/>
			</block>
		</block>
	</block>
	<block className="StubState"/>
	<block className="SpectatorHints">
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<style>
			<position value="absolute"/>
			<width value="100%"/>
			<bottom value="0%"/>
			<align value="center|middle"/>
		</style>
		<bind name="watchDH" value="'cameraMode'; ['cameraEntity.camera.evModeChanged']; cameraEntity.camera.mode"/>
		<bind name="watchDH" value="'trackingTargetType'; ['cameraEntity.camera.evTrackingTargetChanged']; cameraEntity.camera.trackingTargetType"/>
		<bind name="watchDH" value="'trackingMask'; ['cameraEntity.camera.evTrackingAvailabilityChanged']; cameraEntity.camera.trackingMask"/>
		<bind name="watch" value="'artilleryAllowed'; 	(trackingMask &amp; (1 &lt;&lt; 0)) &gt; 0"/>
		<bind name="watch" value="'torpedoAllowed'; 		(trackingMask &amp; (1 &lt;&lt; 2)) &gt; 0"/>
		<bind name="watch" value="'planeAllowed'; 		(trackingMask &amp; (1 &lt;&lt; 3)) &gt; 0"/>
		<bind name="var" value="{'spectatorHintsElements':[ 	{_cmds: [ { _cmd: 'CMD_SELECTED_ALLIED_VEHICLE'}] , _skipCommandCallFx: true, _keyIndicatorIDS: 'IDS_SPECTATE_OBJECT_AT_CROSSHAIR'},
											{_cmds: [ { _cmd: 'CMD_PREV_ALLIED_VEHICLE'}, { _cmd: 'CMD_NEXT_ALLIED_VEHICLE'}] , _skipCommandCallFx: true, _keyIndicatorIDS: 'IDS_SPECTATE_PREV_NEXT_SHIP'},
											{_cmds: [ { _cmd: 'CMD_TRACK_OBJECT_CAMERA'}] , _skipCommandCallFx: true, _keyIndicatorIDS: 'IDS_SPECTATE_AMMO'},
										]}"/>
		<block>
			<bind name="repeat" value="spectatorHintsElements; 'KeyIndicatorWithLabel'"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="BattleStatus">
		<bind name="controller" value="lesta.dialogs.battle_window_controllers.uss_controllers.ControllerBattleStats"/>
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'gameInfo'"/>
		<bind name="watch" value="'isDynamicDivisionsEnabled'; ((gameInfo.battleType == BattleTypes.COOPERATIVE_BATTLE) || (gameInfo.battleType == BattleTypes.RANDOM_BATTLE))"/>
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'battleModeInfo'; 'battleModeInfo,updateBattleModeInfo'"/>
		<bind name="primaryEntityDH" value="'battleTypeEntity'; CC.battleType; gameInfo.battleType"/>
		<bind name="watchDH" value="'battleType'; []; battleTypeEntity.battleType.type"/>
		<bind name="watchDH" value="'battleTypelabel'; []; battleTypeEntity.battleType.labelIds"/>
		<bind name="firstEntityDH" value="'pveStateEntity'; CC.pveState"/>
		<bind name="watchDH" value="'chosenOperationId'; ['']; pveStateEntity.pveState.chosenOperation"/>
		<bind name="watchDH" value="'activeOperationId'; ['']; pveStateEntity.pveState.activeOperation"/>
		<bind name="watchDH" value="'chosenDifficulty';	['']; pveStateEntity.pveState.chosenDifficulty"/>
		<bind name="primaryEntityDH" value="'operationEntity'; CC.operation; chosenOperationId"/>
		<bind name="watchDH" value="'operationType';	['operationEntity.operation.evStatusChanged']; operationEntity.operation.type"/>
		<bind name="watchDH" value="'operationIsHard'; []; operationEntity.operation.isHard"/>
		<bind name="watch" value="'isChosenOperationOfTheWeek'; ((chosenOperationId == activeOperationId) &amp;&amp; (chosenDifficulty == 'normal'))"/>
		<styleClass value="$HUDFullsizeAbsolute"/>
		<block className="BattleMode">
			<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'rankedBattlesSeason'"/>
			<style>
				<position value="absolute"/>
				<flow value="horizontal"/>
				<paddingTop value="40px"/>
				<paddingLeft value="-12px"/>
			</style>
			<bind name="watch" value="'pveDifficultyPostfix'; operationIsHard ? '_hard' : ''"/>
			<bind name="watch" value="'pveIconLabel'; (operationType == 'event' ? 'PVEBattle_event' : 'PVEBattle') + pveDifficultyPostfix"/>
			<block className="icon_battletypes" type="native">
				<bind name="gotoAndStop!" value="(battleType == BattleTypes.RANKED_BATTLE) &amp;&amp; (rankedBattlesSeason.isJuniorSeason == true)	? 'RankedBattle_junior':
							(battleType == BattleTypes.PVE_BATTLE) 	&amp;&amp; (operationType == 'event')		? pveIconLabel 
																														: battleType"/>
			</block>
			<block>
				<style>
					<marginTop value="-6px"/>
				</style>
				<block type="text">
					<styleClass value="$TextHUD22Bold"/>
					<styleClass value="$CapsTracking"/>
					<style>
						<fontSize value="50"/>
					</style>
					<bind name="text" value="gameInfo.gameModeId == GameMode.PVE	? toUpperCase(tr('IDS_' + toUpperCase(operationEntity.operation.gpName) + '_NAME'))
															: toUpperCase(tr(battleModeInfo.mapName))"/>
				</block>
				<block type="text">
					<styleClass value="$TextHUD22Bold"/>
					<styleClass value="$CapsTracking"/>
					<style>
						<alpha value="0.6"/>
						<marginLeft value="2px"/>
						<marginTop value="-12px"/>
					</style>
					<bind name="text" value="(gameInfo.gameModeId == GameMode.PVE	?	toUpperCase(tr('IDS_PVE_BATTLE_WITH_DOT')) + ' ' +	(isChosenOperationOfTheWeek == true ? toUpperCase(tr('IDS_OPERATION_OF_THE_WEEK_OPERATION_TITLE')) :
																											(!(operationIsHard)								? toUpperCase(tr('IDS_OPERATION_NORMAL_DIFFICULTY_TITLE'))
																																							: toUpperCase(tr('IDS_OPERATION_HARD_DIFFICULTY_TITLE'))))
																:	toUpperCase(tr('IDS_'+ gameInfo.gameMode + '_TITLE')))"/>
				</block>
			</block>
		</block>
		<block className="PlayersList">
			<style>
				<flow value="horizontal"/>
				<position value="absolute"/>
				<paddingTop value="190px"/>
				<left value="-40px"/>
			</style>
			<block>
				<style>
					<width value="450px"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.avatar; 'PlayersListRenderer'; 'team.ally.sortedLeftTeam'; {_selfPlayer: selfPlayer, _isDynamicDivisionsEnabled: isDynamicDivisionsEnabled}"/>
			</block>
			<block>
				<style>
					<marginLeft value="-30px"/>
					<width value="450px"/>
				</style>
				<bind name="collectionRepeatDH" value="CC.avatar; 'PlayersListRenderer'; 'team.enemy.sortedRIghtTeam'; {_selfPlayer: selfPlayer}"/>
			</block>
		</block>
		<block className="ChargePointsContainer">
			<style>
				<position value="absolute"/>
				<bottom value="0%"/>
			</style>
			<bind name="watch" value="'isChargePointsVisible'; (gameInfo.gameModeId == GameMode.AWESOME) ||
											(gameInfo.gameModeId == GameMode.STANDARD_DOMINATION) ||
											(gameInfo.gameModeId == GameMode.FORTS) ||
											(gameInfo.gameModeId == GameMode.ASSAULT_DEFENSE) ||
											(gameInfo.gameModeId == GameMode.EPICENTER)"/>
			<block>
				<bind name="visible" value="(isChargePointsVisible == true)"/>
				<block className="ChargePoints">
					<block>
						<style>
							<marginBottom value="16px"/>
						</style>
						<block>
							<bind name="visible" value="battleModeInfo.shipPenaltyList.length &gt; 0"/>
							<style>
								<marginRight value="32px"/>
							</style>
							<block type="text">
								<styleClass value="$ChargePointsHeader"/>
								<bind name="text" value="toUpperCase(tr('IDS_CP_ALLY_LOSS'))"/>
							</block>
							<block>
								<bind name="repeat" value="battleModeInfo.shipPenaltyList; 'CPAllyLossItem'"/>
								<style>
									<flow value="horizontal"/>
								</style>
							</block>
						</block>
						<block>
							<bind name="visible" value="battleModeInfo.shipRewardList.length &gt; 0"/>
							<block type="text">
								<styleClass value="$ChargePointsHeader"/>
								<bind name="text" value="toUpperCase(tr('IDS_CP_ENEMY_LOSS'))"/>
							</block>
							<block>
								<bind name="repeat" value="battleModeInfo.shipRewardList; 'CPEnemiesDestructionItem'"/>
								<style>
									<flow value="horizontal"/>
								</style>
							</block>
						</block>
						<style>
							<flow value="horizontal"/>
						</style>
					</block>
					<block>
						<bind name="visible" value="battleModeInfo.holdRewards.length &gt; 0"/>
						<block type="text">
							<styleClass value="$ChargePointsHeader"/>
							<bind name="text" value="toUpperCase(tr('IDS_CP_HOLDING_CAPTURED'))"/>
						</block>
						<block>
							<bind name="repeat" value="battleModeInfo.holdRewards; 'CPHoldPointReward'"/>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
					</block>
					<block>
						<bind name="visible" value="battleModeInfo.buildingRewardList.length &gt; 0 || battleModeInfo.buildingPenaltyList.length &gt; 0"/>
						<style>
							<marginRight value="42px"/>
						</style>
						<block type="text">
							<styleClass value="$ChargePointsHeader"/>
							<bind name="text" value="toUpperCase(tr('IDS_CP_SUPPRESSION'))"/>
						</block>
						<block>
							<block>
								<bind name="repeat" value="battleModeInfo.buildingRewardList; 'CPBuildingSuppressionRewardItem'"/>
								<style>
									<flow value="horizontal"/>
								</style>
							</block>
							<block>
								<bind name="repeat" value="battleModeInfo.buildingPenaltyList; 'CPBuildingSuppressionPenaltyItem'"/>
								<style>
									<flow value="horizontal"/>
								</style>
							</block>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
					</block>
				</block>
			</block>
		</block>
	</block>
	<block className="BattleMode">
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'rankedBattlesSeason'"/>
		<style>
			<position value="absolute"/>
			<flow value="horizontal"/>
			<paddingTop value="40px"/>
			<paddingLeft value="-12px"/>
		</style>
		<bind name="watch" value="'pveDifficultyPostfix'; operationIsHard ? '_hard' : ''"/>
		<bind name="watch" value="'pveIconLabel'; (operationType == 'event' ? 'PVEBattle_event' : 'PVEBattle') + pveDifficultyPostfix"/>
		<block className="icon_battletypes" type="native">
			<bind name="gotoAndStop!" value="(battleType == BattleTypes.RANKED_BATTLE) &amp;&amp; (rankedBattlesSeason.isJuniorSeason == true)	? 'RankedBattle_junior':
							(battleType == BattleTypes.PVE_BATTLE) 	&amp;&amp; (operationType == 'event')		? pveIconLabel 
																														: battleType"/>
		</block>
		<block>
			<style>
				<marginTop value="-6px"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD22Bold"/>
				<styleClass value="$CapsTracking"/>
				<style>
					<fontSize value="50"/>
				</style>
				<bind name="text" value="gameInfo.gameModeId == GameMode.PVE	? toUpperCase(tr('IDS_' + toUpperCase(operationEntity.operation.gpName) + '_NAME'))
															: toUpperCase(tr(battleModeInfo.mapName))"/>
			</block>
			<block type="text">
				<styleClass value="$TextHUD22Bold"/>
				<styleClass value="$CapsTracking"/>
				<style>
					<alpha value="0.6"/>
					<marginLeft value="2px"/>
					<marginTop value="-12px"/>
				</style>
				<bind name="text" value="(gameInfo.gameModeId == GameMode.PVE	?	toUpperCase(tr('IDS_PVE_BATTLE_WITH_DOT')) + ' ' +	(isChosenOperationOfTheWeek == true ? toUpperCase(tr('IDS_OPERATION_OF_THE_WEEK_OPERATION_TITLE')) :
																											(!(operationIsHard)								? toUpperCase(tr('IDS_OPERATION_NORMAL_DIFFICULTY_TITLE'))
																																							: toUpperCase(tr('IDS_OPERATION_HARD_DIFFICULTY_TITLE'))))
																:	toUpperCase(tr('IDS_'+ gameInfo.gameMode + '_TITLE')))"/>
			</block>
		</block>
	</block>
	<block className="PlayersList">
		<style>
			<flow value="horizontal"/>
			<position value="absolute"/>
			<paddingTop value="190px"/>
			<left value="-40px"/>
		</style>
		<block>
			<style>
				<width value="450px"/>
			</style>
			<bind name="collectionRepeatDH" value="CC.avatar; 'PlayersListRenderer'; 'team.ally.sortedLeftTeam'; {_selfPlayer: selfPlayer, _isDynamicDivisionsEnabled: isDynamicDivisionsEnabled}"/>
		</block>
		<block>
			<style>
				<marginLeft value="-30px"/>
				<width value="450px"/>
			</style>
			<bind name="collectionRepeatDH" value="CC.avatar; 'PlayersListRenderer'; 'team.enemy.sortedRIghtTeam'; {_selfPlayer: selfPlayer}"/>
		</block>
	</block>
	<block className="PlayersListRenderer">
		<bind name="name" value="'player_' + name"/>
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'gameInfo'"/>
		<bind name="controller" value="lesta.dialogs.controllers.CollectionController; 'playersInvitedToDivision'; name; 'playerInvitationData'"/>
		<bind name="primaryEntityDH" value="'playerVoiceChatEntity'; CC.playerVoiceState; pureName"/>
		<bind name="dataRefDH" value="'playerEntity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'playerId'; 			[]; playerEntity.avatar.id"/>
		<bind name="watchDH" value="'relation'; 			['playerEntity.relation.evChanged']; playerEntity.relation.value"/>
		<bind name="watchDH" value="'isAlive'; 			['playerEntity.health.evKilled']; playerEntity.health.isAlive"/>
		<bind name="watchDH" value="'ttkStatus'; 		['playerEntity.avatar.evTTKStatusChanged']; playerEntity.avatar.ttkStatus"/>
		<bind name="watchDH" value="'tkStatus'; 			['playerEntity.avatar.evTeamkillStatusChanged']; playerEntity.avatar.tkStatus"/>
		<bind name="watchDH" value="'frags'; 			['playerEntity.avatar.evFragsChanged']; playerEntity.avatar.frags"/>
		<bind name="watchDH" value="'division'; 			['playerEntity.avatar.evDivisionChanged']; playerEntity.avatar.division"/>
		<bind name="watchDH" value="'divisionId'; 		['playerEntity.avatar.evDivisionChanged']; playerEntity.avatar.divisionId"/>
		<bind name="watchDH" value="'divisionSign'; 		['playerEntity.avatar.evDivisionChanged']; playerEntity.avatar.divisionSign"/>
		<bind name="watchDH" value="'divisionHidden';	['playerEntity.avatar.evDivisionChanged', 'playerEntity.avatar.evDivisionHiddenChanged']; playerEntity.avatar.divisionHidden"/>
		<bind name="watchDH" value="'isInSameDivision'; 	['playerEntity.avatar.evDivisionChanged']; playerEntity.avatar.isInSameDivision"/>
		<bind name="watchDH" value="'isDivisionCommander'; 	['playerEntity.avatar.evIsDivisionCommanderUpdated']; playerEntity.avatar.isDivisionCommander"/>
		<bind name="watchDH" value="'invitationsEnabled';['playerEntity.avatar.evInvitationsEnabledChanged']; playerEntity.avatar.invitationsEnabled"/>
		<bind name="watchDH" value="'pathTinyIcon'; 		[]; playerEntity.avatar.ship.ref.ship.pathTinyIcon"/>
		<bind name="watchDH" value="'pathOwnTinyIcon'; 	[]; playerEntity.avatar.ship.ref.ship.pathOwnTinyIcon"/>
		<bind name="watchDH" value="'pathTinyDeadIcon'; 	[]; playerEntity.avatar.ship.ref.ship.pathTinyDeadIcon"/>
		<bind name="watchDH" value="'name'; 				[]; playerEntity.avatar.name"/>
		<bind name="watchDH" value="'pureName'; 			[]; playerEntity.avatar.pureName"/>
		<bind name="watchDH" value="'isSpeaking'; 		['playerVoiceChatEntity.playerVoiceState.evIsSpeakingChanged']; playerVoiceChatEntity.playerVoiceState.isSpeaking"/>
		<bind name="watchDH" value="'isMuted'; 			['playerVoiceChatEntity.playerVoiceState.evIsMutedChanged']; playerVoiceChatEntity.playerVoiceState.isMuted"/>
		<bind name="watch" value="'isSelf'; (relation == 0)"/>
		<bind name="watch" value="'isInVoiceChat'; playerVoiceChatEntity != null"/>
		<style>
			<position value="absolute"/>
			<width value="450px"/>
			<height value="64px"/>
			<align value="middle"/>
			<flow value="horizontal"/>
		</style>
		<bind name="handleEventDH" value="'playerEntity.avatarAnimation.evPlayDeathAnimation'; 'evItemDeath'"/>
		<bind name="handleEventDH" value="'playerEntity.avatarAnimation.evPlayMoveAnimation'; 'evItemMove'"/>
		<bind name="var" value="{startYPosition:  $index * 64}"/>
		<bind name="y" value="startYPosition"/>
		<bind name="appear" value="'evItemMove'; 0.15; 0.15; { y : playerEntity.avatarAnimation.fromIndex * 64 }; {y : playerEntity.avatarAnimation.toIndex * 64}"/>
		<bind name="dispatch" value="'evItemDeath'; 'evItemDeath_disappear'; []; false; 0"/>
		<bind name="dispatch" value="'evItemDeath_disappear'; 'evItemDeath_move'; []; false; 0.15"/>
		<bind name="dispatch" value="'evItemDeath_move'; 'evItemDeath_appear'; []; false; 0.15"/>
		<bind name="appear" value="'evItemDeath_disappear'; 0.15; 0; { alpha: 1, scaleY: 1 }; { alpha : 0, scaleY: 0.1 }"/>
		<bind name="appear" value="'evItemDeath_move'; 0.15; 0; { y : playerEntity.avatarAnimation.fromIndex * 64 }; {y : playerEntity.avatarAnimation.toIndex * 64 }"/>
		<bind name="appear" value="'evItemDeath_appear'; 0.15; 0; { alpha: 0, scaleY: 0.1 }; { alpha : 1, scaleY: 1 } "/>
		<block>
			<style>
				<width value="450px"/>
				<height value="62px"/>
				<position value="absolute"/>
				<backgroundSize value="fill"/>
			</style>
			<bind name="alpha" value="isAlive ? 1 : 0.6"/>
			<bind name="style" value="'backgroundImage'; relation &gt; 1 ? 'url:../console/teamlist_bg_enemy.png' : 'url:../console/teamlist_bg_ally.png'"/>
		</block>
		<block>
			<style>
				<width value="290px"/>
				<marginLeft value="90px"/>
			</style>
			<block>
				<style>
					<align value="middle"/>
				</style>
				<block>
					<style>
						<width value="24px"/>
						<height value="12px"/>
					</style>
					<block>
						<style>
							<position value="absolute"/>
							<top value="7px"/>
							<left value="12px"/>
						</style>
						<bind name="instance" value="'ShipMarkerIconSimple'; { _entityId: playerEntity.id } "/>
					</block>
				</block>
				<block type="text">
					<styleClass value="$TextHUD22Bold"/>
					<styleClass value="$CapsTracking"/>
					<style>
						<marginLeft value="6px"/>
					</style>
					<bind name="alpha" value="isAlive ? 1 : 0.6"/>
					<bind name="text" value="playerEntity.avatar.ship.ref.ship.levelRome + ' ' + toUpperCase(tr(playerEntity.avatar.ship.ref.ship.nameIDS))"/>
				</block>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
			<block>
				<style>
					<alpha value="0.6"/>
					<marginTop value="-6px"/>
					<marginLeft value="-2px"/>
				</style>
				<bind name="instance" value="'PlayerListTextLine'; { _width: '290px', _isAlive: isAlive, _isSelf: isSelf, _ttkStatus: ttkStatus, _tkStatus: tkStatus,
											_isInSameDivision: isInSameDivision, _text: name, _relation: relation }"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<left value="290px"/>
				<top value="16px"/>
			</style>
			<bind name="style" value="'left'; relation &gt; 1 ? '50px' : '410px'"/>
			<bind name="alpha" value="frags &gt; 0 ? 1 : 0.3"/>
			<bind name="instance" value="'PlayerListTextLine'; { _width: '30px', _isAlive: isAlive, _isSelf: isSelf, _ttkStatus: ttkStatus, _tkStatus: tkStatus,
										_isInSameDivision: isInSameDivision, _text: frags, _relation: relation }"/>
		</block>
	</block>
	<block className="PlayerListTextLine">
		<block type="text">
			<styleClass value="$TextHUD22Bold"/>
			<style>
				<multiline value="false"/>
			</style>
			<bind name="style" value="'width'; _width"/>
			<bind name="class" value="_isAlive 	? _tkStatus 	? '$TextColorHUDTK'
												: _ttkStatus 						? '$TextColorHUDTK'
												: (_isSelf || _isInSameDivision) 	? '$TextColorHUDDivision'
																					: '$None'
								: _isSelf 	? _tkStatus 	? '$TextColorHUDTK' 
											: _ttkStatus 	? '$TextColorHUDTK'
											: '$TextColorHUDDivision'
								: '$None'"/>
			<bind name="text" value="_text"/>
		</block>
	</block>
	<block className="ListVoiceChatIcons">
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'VoiceChatState'"/>
		<bind name="primaryEntityDH" value="'playerEntity'; CC.avatar; _playerId"/>
		<bind name="watchDH" value="'pureName';			[]; playerEntity.avatar.pureName"/>
		<bind name="watchDH" value="'relation'; 			['playerEntity.relation.evChanged']; playerEntity.relation.value"/>
		<bind name="watch" value="'isSelf'; (relation == 0)"/>
		<bind name="watch" value="'playerCanBeInChat';	((_battleType == BattleTypes.CLAN_BATTLE) &amp;&amp; VoiceChatState.enabled) ||
										((_isInSameDivision &amp;&amp; VoiceChatState.enabled) &amp;&amp;	((_battleType == BattleTypes.RANDOM_BATTLE) ||
																							(_battleType == BattleTypes.COOPERATIVE_BATTLE) ||
																							(_battleType == BattleTypes.PVE_BATTLE)))"/>
		<bind name="watch" value="'selfCanBeInChat';	((_battleType == BattleTypes.CLAN_BATTLE) &amp;&amp; isSelf) ||
									((isSelf &amp;&amp; _selfPlayerDivisionId) &amp;&amp;  ((_battleType == BattleTypes.RANDOM_BATTLE) ||
																			(_battleType == BattleTypes.COOPERATIVE_BATTLE) ||
																			(_battleType == BattleTypes.PVE_BATTLE)))"/>
		<bind name="watch" value="'canBeInChat'; (playerCanBeInChat || selfCanBeInChat)"/>
		<block>
			<bind name="visible" value="canBeInChat"/>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="watch" value="'state';	!(_isInVoiceChat)	? 'disabled' :
								_isVoiceChatMuted	? 'muted' :
								_isSpeaking			? 'speak'
													: null"/>
			<block>
				<bind name="transition" value="state; 0.1; {alpha: 0}; {alpha: 1}; {alpha: 0}; 1"/>
				<block className="icon_voice_chat_small" type="native">
					<bind name="gotoAndStop!" value="state"/>
				</block>
			</block>
		</block>
	</block>
	<block className="ChargePointsContainer">
		<style>
			<position value="absolute"/>
			<bottom value="0%"/>
		</style>
		<bind name="watch" value="'isChargePointsVisible'; (gameInfo.gameModeId == GameMode.AWESOME) ||
											(gameInfo.gameModeId == GameMode.STANDARD_DOMINATION) ||
											(gameInfo.gameModeId == GameMode.FORTS) ||
											(gameInfo.gameModeId == GameMode.ASSAULT_DEFENSE) ||
											(gameInfo.gameModeId == GameMode.EPICENTER)"/>
		<block>
			<bind name="visible" value="(isChargePointsVisible == true)"/>
			<block className="ChargePoints">
				<block>
					<style>
						<marginBottom value="16px"/>
					</style>
					<block>
						<bind name="visible" value="battleModeInfo.shipPenaltyList.length &gt; 0"/>
						<style>
							<marginRight value="32px"/>
						</style>
						<block type="text">
							<styleClass value="$ChargePointsHeader"/>
							<bind name="text" value="toUpperCase(tr('IDS_CP_ALLY_LOSS'))"/>
						</block>
						<block>
							<bind name="repeat" value="battleModeInfo.shipPenaltyList; 'CPAllyLossItem'"/>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
					</block>
					<block>
						<bind name="visible" value="battleModeInfo.shipRewardList.length &gt; 0"/>
						<block type="text">
							<styleClass value="$ChargePointsHeader"/>
							<bind name="text" value="toUpperCase(tr('IDS_CP_ENEMY_LOSS'))"/>
						</block>
						<block>
							<bind name="repeat" value="battleModeInfo.shipRewardList; 'CPEnemiesDestructionItem'"/>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
					</block>
					<style>
						<flow value="horizontal"/>
					</style>
				</block>
				<block>
					<bind name="visible" value="battleModeInfo.holdRewards.length &gt; 0"/>
					<block type="text">
						<styleClass value="$ChargePointsHeader"/>
						<bind name="text" value="toUpperCase(tr('IDS_CP_HOLDING_CAPTURED'))"/>
					</block>
					<block>
						<bind name="repeat" value="battleModeInfo.holdRewards; 'CPHoldPointReward'"/>
						<style>
							<flow value="horizontal"/>
						</style>
					</block>
				</block>
				<block>
					<bind name="visible" value="battleModeInfo.buildingRewardList.length &gt; 0 || battleModeInfo.buildingPenaltyList.length &gt; 0"/>
					<style>
						<marginRight value="42px"/>
					</style>
					<block type="text">
						<styleClass value="$ChargePointsHeader"/>
						<bind name="text" value="toUpperCase(tr('IDS_CP_SUPPRESSION'))"/>
					</block>
					<block>
						<block>
							<bind name="repeat" value="battleModeInfo.buildingRewardList; 'CPBuildingSuppressionRewardItem'"/>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
						<block>
							<bind name="repeat" value="battleModeInfo.buildingPenaltyList; 'CPBuildingSuppressionPenaltyItem'"/>
							<style>
								<flow value="horizontal"/>
							</style>
						</block>
						<style>
							<flow value="horizontal"/>
						</style>
					</block>
				</block>
			</block>
		</block>
	</block>
	<css name="$ChargePointsHeader">
		<mouseChildren value="false"/>
		<mouseEnabled value="false"/>
		<fontFamily value="$WWSDefaultFontBold"/>
		<fontSize value="18"/>
		<letterSpacing value="1.4"/>
		<alpha value="0.6"/>
		<selectable value="false"/>
		<textColor value="0xFFF1F1F1"/>
	</css>
	<block className="ChargePoints">
		<block>
			<style>
				<marginBottom value="16px"/>
			</style>
			<block>
				<bind name="visible" value="battleModeInfo.shipPenaltyList.length &gt; 0"/>
				<style>
					<marginRight value="32px"/>
				</style>
				<block type="text">
					<styleClass value="$ChargePointsHeader"/>
					<bind name="text" value="toUpperCase(tr('IDS_CP_ALLY_LOSS'))"/>
				</block>
				<block>
					<bind name="repeat" value="battleModeInfo.shipPenaltyList; 'CPAllyLossItem'"/>
					<style>
						<flow value="horizontal"/>
					</style>
				</block>
			</block>
			<block>
				<bind name="visible" value="battleModeInfo.shipRewardList.length &gt; 0"/>
				<block type="text">
					<styleClass value="$ChargePointsHeader"/>
					<bind name="text" value="toUpperCase(tr('IDS_CP_ENEMY_LOSS'))"/>
				</block>
				<block>
					<bind name="repeat" value="battleModeInfo.shipRewardList; 'CPEnemiesDestructionItem'"/>
					<style>
						<flow value="horizontal"/>
					</style>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<bind name="visible" value="battleModeInfo.holdRewards.length &gt; 0"/>
			<block type="text">
				<styleClass value="$ChargePointsHeader"/>
				<bind name="text" value="toUpperCase(tr('IDS_CP_HOLDING_CAPTURED'))"/>
			</block>
			<block>
				<bind name="repeat" value="battleModeInfo.holdRewards; 'CPHoldPointReward'"/>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
		</block>
		<block>
			<bind name="visible" value="battleModeInfo.buildingRewardList.length &gt; 0 || battleModeInfo.buildingPenaltyList.length &gt; 0"/>
			<style>
				<marginRight value="42px"/>
			</style>
			<block type="text">
				<styleClass value="$ChargePointsHeader"/>
				<bind name="text" value="toUpperCase(tr('IDS_CP_SUPPRESSION'))"/>
			</block>
			<block>
				<block>
					<bind name="repeat" value="battleModeInfo.buildingRewardList; 'CPBuildingSuppressionRewardItem'"/>
					<style>
						<flow value="horizontal"/>
					</style>
				</block>
				<block>
					<bind name="repeat" value="battleModeInfo.buildingPenaltyList; 'CPBuildingSuppressionPenaltyItem'"/>
					<style>
						<flow value="horizontal"/>
					</style>
				</block>
				<style>
					<flow value="horizontal"/>
				</style>
			</block>
		</block>
	</block>
	<block className="CPHoldPointReward">
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
			<marginTop value="2px"/>
		</style>
		<block>
			<style>
				<width value="32px"/>
				<height value="32px"/>
				<marginRight value="2px"/>
			</style>
			<bind name="style" value="'backgroundSprite'; (pointType == CapturePointType.BASE_WITH_POINTS) ? 'cp_flag' 
			 							: (pointType == CapturePointType.EPICENTER_CP) ? 'cp_epicenter'
			 							: 'cp_letter'"/>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="message"/>
		</block>
	</block>
	<block className="CPEnemiesDestructionItem">
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
			<marginRight value="16px"/>
		</style>
		<block>
			<style>
				<width value="24px"/>
				<height value="10px"/>
				<marginRight value="2px"/>
			</style>
			<block>
				<style>
					<top value="6px"/>
					<left value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; toLowerCase(shipType) + '_enemy_c'"/>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="'+' + number"/>
		</block>
	</block>
	<block className="CPAllyLossItem">
		<style>
			<flow value="horizontal"/>
			<align value="middle"/>
			<marginRight value="16px"/>
		</style>
		<block>
			<style>
				<width value="24px"/>
				<height value="10px"/>
				<marginRight value="2px"/>
			</style>
			<block>
				<style>
					<top value="6px"/>
					<left value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; toLowerCase(shipType) + '_ally_c'"/>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="number"/>
		</block>
	</block>
	<block className="CPBuildingSuppressionRewardItem">
		<style>
			<width value="32px"/>
			<height value="32px"/>
			<backgroundColor value="0xFFe75153"/>
		</style>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="'+' + number"/>
		</block>
	</block>
	<block className="CPBuildingSuppressionPenaltyItem">
		<style>
			<width value="32px"/>
			<height value="32px"/>
			<backgroundColor value="0xFF80c0ff"/>
		</style>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<bind name="text" value="number"/>
		</block>
	</block>
	<block className="CapturePointMarker">
		<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'bothInside'; ['entity.capturePoint.evBothInsideChanged']; entity.capturePoint.bothInside"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<style>
			<width value="0px"/>
			<height value="0px"/>
			<position value="absolute"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-50px"/>
			</style>
			<bind name="visible" value="!(_minimap)"/>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<width value="0px"/>
				<height value="0px"/>
				<align value="center|middle"/>
			</style>
			<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
			<block>
				<style>
					<width value="32px"/>
					<height value="32px"/>
					<backgroundColor value="0xFF000000"/>
					<alpha value="0.15"/>
				</style>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<width value="0px"/>
				<height value="0px"/>
				<align value="center|middle"/>
			</style>
			<block type="text">
				<bind name="visible" value="entity.capturePoint.type != 5"/>
				<styleClass value="$TextHUD24Bold"/>
				<style>
					<paddingTop value="2px"/>
				</style>
				<bind name="class" value="relation == 'ally' ? '$TextColorHUDAlly' : relation == 'enemy' ? '$TextColorHUDEnemy' : '$TextColorHUDNeutral'"/>
				<bind name="text" value="entity.capturePoint.label"/>
			</block>
			<block>
				<bind name="visible" value="entity.capturePoint.type == 5"/>
				<bind name="style" value="'backgroundSprite'; 'capture_flag_' + relation + '_c'"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="isCaptureInProgress || relation == 'neutral'; 0.15; {rotation: 0}; {rotation: 45}"/>
			<block className="mask_rhomb_c" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="isMask" value="true"/>
				<block>
					<style>
						<position value="absolute"/>
						<width value="100px"/>
						<height value="100px"/>
						<top value="-50px"/>
						<left value="-50px"/>
						<backgroundColor value="0xFFFFFFFF"/>
					</style>
					<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
					<bind name="alpha" value="isCaptureInProgress ? 0.5 : (relation == 'neutral') ? 0.15 : 1.0"/>
				</block>
				<block className="lesta.display.Sector" type="native">
					<style>
						<position value="absolute"/>
					</style>
					<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
					<bind name="alpha" value="1"/>
					<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
					<bind name="offset" value="-135"/>
					<bind name="radius" value="23"/>
					<bind name="innerRadius" value="0"/>
				</block>
			</block>
		</block>
		<block>
			<bind name="fade" value="showTextContested &amp;&amp; bothInside; 0.15; {alpha: 0, top: -10}; {alpha: 1, top: 0}"/>
			<block type="text">
				<styleClass value="$TextHUDBold"/>
				<style>
					<position value="absolute"/>
					<marginLeft value="-50%"/>
					<top value="22px"/>
				</style>
				<bind name="text" value="toUpperCase(tr('IDS_CONTESTED'))"/>
			</block>
		</block>
	</block>
	<block className="EpicenterMarker">
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-60px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<bind name="repeat" value="entity.epicenter.points.ref.items; 'EpicenterCircle'"/>
	</block>
	<block className="EpicenterCircle">
		<bind name="dataRefDH" value="'entity'; '$dataRef.ref'"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'captureProgress'; ['entity.progress.evChanged']; entity.progress.value"/>
		<bind name="watchDH" value="'invaderRelation'; ['entity.capturePoint.evInvaderChanged']; entity.capturePoint.invaderRelation == 1 ? 'ally' : 'enemy'"/>
		<bind name="watchDH" value="'isCaptureInProgress'; ['entity.capturePoint.evBothInsideChanged', 'entity.progress.evChanged']; entity.capturePoint.bothInside || (entity.progress.value != 0)"/>
		<bind name="watchDH" value="'circleRadius'; ['']; 10 * (entity.capturePoint.epicenterIndex + 1)"/>
		<bind name="watchDH" value="'circleInnerRadius'; ['']; 10 * entity.capturePoint.epicenterIndex + 2"/>
		<style>
			<position value="absolute"/>
		</style>
		<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
		<block className="EpicenterCircleItem">
			<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
				<bind name="alpha" value="isCaptureInProgress ? 0.3 : (relation == 'neutral') ? 0.1 : (_minimap ? 0.4 : 1)"/>
				<bind name="arc" value="_minimap ? 360*(1-captureProgress) * (invaderRelation == 'ally' ? -1 : 1) : 360"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
				<bind name="alpha" value="_minimap ? 0.3 : 1"/>
				<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
				<bind name="offset" value="-90"/>
				<bind name="radius" value="circleRadius"/>
				<bind name="innerRadius" value="circleInnerRadius"/>
			</block>
			<block className="lesta.display.Sector" type="native">
				<style>
					<position value="absolute"/>
				</style>
				<bind name="cacheAsBitmap" value="true"/>
				<bind name="color" value="0xFFF1F1F1"/>
				<bind name="alpha" value="0.3"/>
				<bind name="arc" value="360"/>
				<bind name="offset" value="0"/>
				<bind name="radius" value="circleRadius+2"/>
				<bind name="innerRadius" value="circleRadius"/>
			</block>
		</block>
	</block>
	<block className="EpicenterCircleItem">
		<bind name="tooltip" value="'TraceTooltip'; {_trace: entity}; TooltipBehaviour.infotip"/>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFF000000"/>
			<bind name="alpha" value="isCaptureInProgress ? 0.3 : (relation == 'neutral') ? 0.1 : (_minimap ? 0.4 : 1)"/>
			<bind name="arc" value="_minimap ? 360*(1-captureProgress) * (invaderRelation == 'ally' ? -1 : 1) : 360"/>
			<bind name="offset" value="-90"/>
			<bind name="radius" value="circleRadius"/>
			<bind name="innerRadius" value="circleInnerRadius"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="color" value="invaderRelation == 'ally' ? 0xFF80c0ff : 0xFFe75153"/>
			<bind name="alpha" value="_minimap ? 0.3 : 1"/>
			<bind name="arc" value="360*captureProgress * (invaderRelation == 'ally' ? 1 : -1)"/>
			<bind name="offset" value="-90"/>
			<bind name="radius" value="circleRadius"/>
			<bind name="innerRadius" value="circleInnerRadius"/>
		</block>
		<block className="lesta.display.Sector" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="cacheAsBitmap" value="true"/>
			<bind name="color" value="0xFFF1F1F1"/>
			<bind name="alpha" value="0.3"/>
			<bind name="arc" value="360"/>
			<bind name="offset" value="0"/>
			<bind name="radius" value="circleRadius+2"/>
			<bind name="innerRadius" value="circleRadius"/>
		</block>
	</block>
	<block className="ShipMarker">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="changeDispatch" value="isAlive; 'evShipDeadDisappear'; {}; 1; false"/>
		<bind name="appear" value="'evShipDeadDisappear'; 0.5; 1.5; {alpha: 1}; {alpha: 0}; 2"/>
		<bind name="name" value="'bssMarker_'+$index"/>
		<bind name="watchDH" value="'nickName'; []; entity.avatar.pureName"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'altVision'; ['cameraEntity.camera.evAltVisionChanged']; cameraEntity.camera.altVision"/>
		<bind name="watchDH" value="'appearingTime'; []; entity.dissolve.timeLeft"/>
		<bind name="watch" value="'isSelf'; entity.relation.value == 0"/>
		<bind name="watch" value="'isExtended'; altVision || isTargetLocked || isInFocus"/>
		<bind name="childParentScope" value="tacticalMap ? 1 : 0; {}; 'ShipMarkerContentDefault'; 'ShipMarkerContentTactical'"/>
	</block>
	<block className="ShipMarkerContentDefault">
		<bind name="visible" value="!isSelf"/>
		<style>
			<marginTop value="-100%"/>
			<marginBottom value="30px"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<top value="-36px"/>
				<left value="13px"/>
			</style>
			<bind name="style" value="'top'; isTargetLocked ? '-36px' : '-20px'"/>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<height value="20px"/>
				<align value="middle"/>
			</style>
			<block>
				<style>
					<left value="12px"/>
					<marginTop value="12px"/>
				</style>
				<bind name="instance" value="'ShipMarkerIconCentered'; !isSelf 	? 	{
																		_entityId: entity.id,
																		_rotate: false,
																		_defaultCamera: true
																	}
																: null;"/>
			</block>
			<block>
				<style>
					<marginLeft value="1px"/>
				</style>
				<bind name="fade" value="isExtended; 0.15; {scaleX: 0, alpha: 0}; {scaleX: 1, alpha: 1}; {scaleX: 0, alpha: 0}; 1"/>
				<block type="text">
					<styleClass value="$TextHUDBold"/>
					<style>
						<marginBottom value="2px"/>
						<letterSpacing value="1.5"/>
					</style>
					<bind name="pureText" value="toUpperCase(tr(entity.avatar.ship.ref.ship.nameIDS))"/>
				</block>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
		<block>
			<style>
				<height value="3px"/>
			</style>
			<bind name="transition" value="isExtended; 0.15; { height: 3 }; { height: 10 }; { height: 3 }; 2"/>
			<bind name="instance" value="'ShipSegmentedHealthBar'; {
												_entityId: entity.id,
												_isExtended: isExtended
												}"/>
		</block>
		<block>
			<style>
				<width value="0px"/>
				<height value="24px"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD16Bold"/>
				<style>
					<marginLeft value="-2px"/>
					<marginTop value="-1px"/>
				</style>
				<bind name="text" value="distance + ' ' + distancePostfix"/>
			</block>
		</block>
		<block type="text">
			<bind name="fade" value="isExtended; 0.15; {ubScaleY: 0, scaleX: 0, alpha: 0}; {ubScaleY: 1, scaleX: 1, alpha: 0.6}; {ubScaleY: 0, scaleX: 0, alpha: 0}; 1"/>
			<styleClass value="$TextHUD16Bold"/>
			<style>
				<position value="absolute"/>
				<left value="-2px"/>
				<bottom value="-16px"/>
				<alpha value="0.6"/>
			</style>
			<bind name="pureText" value="nickName"/>
		</block>
		<block>
			<bind name="fade" value="isATBAFocused; 0.1; {alpha: 0, top: -10}; {alpha: 1, top: 0}; null; 2"/>
			<style>
				<position value="absolute"/>
				<bottom value="14px"/>
				<left value="-32px"/>
			</style>
			<block className="atba_focus" type="native"/>
		</block>
	</block>
	<block className="ShipMarkerContentTactical">
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<top value="-40px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
			<bind name="scaleX" value="0.75"/>
			<bind name="scaleY" value="0.75"/>
		</block>
		<block>
			<bind name="instance" value="'ShipMarkerIconCentered'; !isSelf ? 	{
																	_entityId: entity.id,
																	_rotate: true
																}
															: null;"/>
			<bind name="instance" value="'OwnShipMarkerIcon'; 	isSelf ? 	{
																_entityId: entity.id
															}
														: null;"/>
		</block>
		<block>
			<bind name="fade" value="isATBAFocused; 0.1; {alpha: 0}; {alpha: 1}; null; 2"/>
			<bind name="scaleX" value="0.7"/>
			<bind name="scaleY" value="0.7"/>
			<style>
				<position value="absolute"/>
				<top value="12px"/>
				<left value="-22px"/>
			</style>
			<block className="atba_focus" type="native"/>
		</block>
	</block>
	<block className="ShipMarkerIconCentered">
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'isInSameDivision'; ['entity.avatar.evDivisionChanged']; entity.avatar.isInSameDivision"/>
		<bind name="watchDH" value="'yaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(entity.mapPosition.yaw)"/>
		<bind name="watchDH" value="'lastVisible'; ['entity.visibility.evChanged']; !(entity.visibility.mapVisible) &amp;&amp; !(entity.visibility.visible)"/>
		<bind name="watchDH" value="'alliesVisible'; ['entity.visibility.evChanged']; entity.visibility.mapVisible &amp;&amp; !(entity.visibility.visible)"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'tkStatus'; []; entity.teamKiller.status &amp;&amp; (relation == 'ally')"/>
		<bind name="watchDH" value="'shipSubtype'; []; entity.avatar.ship.ref.ship.subtype"/>
		<bind name="watchDH" value="'targetFlags'; ['entity.target.evChanged']; entity.target ? entity.target.flags : 0"/>
		<bind name="watch" value="'isTargetLocked'; (targetFlags &amp; (1 &lt;&lt; WeaponType.ARTILLERY | 1 &lt;&lt; WeaponType.TORPEDO)) &gt; 0"/>
		<bind name="watch" value="'isAlly'; entity.relation.value == 1"/>
		<bind name="scaleX" value="_minimap ? 0.75 : 1"/>
		<bind name="scaleY" value="_minimap ? 0.75 : 1"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="scaleX" value="_defaultCamera ? 0.9 : 0.6"/>
			<bind name="scaleY" value="_defaultCamera ? 0.9 : 0.6"/>
			<block className="AimTargetLock">
				<block>
					<bind name="style" value="'backgroundSprite'; _defaultCamera ? 'target_locked_dark_c' : 'target_locked_c' "/>
					<bind name="fade" value="isTargetLocked; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:1, scaleY:1, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2; isTargetLocked ? 0.15 : 0.05"/>
				</block>
			</block>
		</block>
		<block>
			<bind name="watch" value="'iconRelation'; isAlive 	? (lastVisible ? '' : (isInSameDivision ? '_division' : tkStatus ? '_tk' : ('_' + relation)))
												: (isAlly ? '_ally' : '_enemy')"/>
			<bind name="watch" value="'iconClass'; toLowerCase(shipSubtype) + (isAlive ? (lastVisible ? '_lastvis' : alliesVisible ? '_invis' : '') : '_dead') + iconRelation + '_c'"/>
			<block>
				<style>
					<width value="24px"/>
					<height value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; iconClass"/>
				<bind name="rotation" value="_rotate ? (yaw + (90 * (isAlly || lastVisible ? -1 : 1))) : 0"/>
			</block>
		</block>
	</block>
	<block className="ShipMarkerIconSimple">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'isAlive'; ['entity.health.evKilled']; entity.health.isAlive"/>
		<bind name="watchDH" value="'isInSameDivision'; ['entity.avatar.evDivisionChanged']; entity.avatar.isInSameDivision"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watchDH" value="'tkStatus'; []; entity.teamKiller.status &amp;&amp; (relation == 'ally')"/>
		<bind name="watchDH" value="'shipSubtype'; []; entity.avatar.ship.ref.ship.subtype"/>
		<bind name="watch" value="'isAlly'; entity.relation.value &lt;= 1"/>
		<block>
			<bind name="watch" value="'iconRelation'; isAlive 	? (isInSameDivision ? '_division' : tkStatus ? '_tk' : ('_' + relation))
												: (isAlly ? '_ally' : '_enemy')"/>
			<bind name="watch" value="'iconClass'; toLowerCase(shipSubtype) + (isAlive || _ignoreDead ? '' : '_dead') + iconRelation + '_c'"/>
			<block>
				<style>
					<width value="24px"/>
					<height value="12px"/>
				</style>
				<bind name="style" value="'backgroundSprite'; iconClass"/>
			</block>
		</block>
	</block>
	<block className="OwnShipMarkerIcon">
		<bind name="firstEntityDH" value="'timerEntity'; CC.timer"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'yaw'; ['timerEntity.timer.evFrequent']; math.radToGrad(entity.mapPosition.yaw)"/>
		<bind name="scaleX" value="_minimap ? 0.5 : 1"/>
		<bind name="scaleY" value="_minimap ? 0.5 : 1"/>
		<block className="ship_own_c" type="native">
			<bind name="rotation" value="(yaw - 90)"/>
		</block>
		<block className="animation_own_ship" type="native">
			<style>
				<position value="absolute"/>
			</style>
			<bind name="rotation" value="(yaw - 90)"/>
			<bind name="visible" value="_minimap != true"/>
		</block>
	</block>
	<block className="AimTargetLock">
		<block>
			<bind name="style" value="'backgroundSprite'; _defaultCamera ? 'target_locked_dark_c' : 'target_locked_c' "/>
			<bind name="fade" value="isTargetLocked; 0.15; {scaleX:2, scaleY:2, alpha:0}; {scaleX:1, scaleY:1, alpha:1}; {scaleX:0, scaleY:0, alpha:0}; 2; isTargetLocked ? 0.15 : 0.05"/>
		</block>
	</block>
	<block className="ShipSegmentedHealthBar">
		<bind name="var" value="{ barWidth: 40, barHeight: 3, barExtHeight: 10 }"/>
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="watch" value="'segmentCount'; math.round(maxHealth/5000)"/>
		<bind name="watch" value="'segmentWidth'; 80/segmentCount &lt; 7 ? 7 : math.round(80/segmentCount)"/>
		<bind name="watch" value="'barExtWidth'; segmentWidth * segmentCount"/>
		<bind name="var" value="{fxDelay: 0.01}"/>
		<bind name="var" value="{fxDelay: fxDelay}"/>
		<bind name="catch" value="'set'+'newHealth'"/>
		<bind name="var" value="{newHealth: -1}"/>
		<bind name="catch" value="'set'+'prevHealth'"/>
		<bind name="var" value="{prevHealth: -1}"/>
		<bind name="dispatch" value="'addedToStage'; 'set'+'prevHealth'; {prevHealth: health}"/>
		<bind name="changeDispatch" value="health; 'set'+'newHealth'; {newHealth: health}; 1"/>
		<bind name="changeDispatch" value="health; 'dispatchSet'+'prevHealth'"/>
		<bind name="watch" value="'isUpChange'; newHealth &gt; prevHealth"/>
		<bind name="dispatch" value="'dispatchSet'+'prevHealth'; 'set'+'prevHealth'; {prevHealth: health}; 0; isUpChange ? 0 : fxDelay"/>
		<style>
			<position value="absolute"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<width value="40px"/>
				<height value="3px"/>
				<backgroundColor value="0x80000000"/>
			</style>
			<bind name="style" value="'width'; (_isExtended ? barExtWidth : barWidth) + 'px'"/>
			<bind name="style" value="'height'; (_isExtended ? barExtHeight : barHeight) + 'px'"/>
		</block>
		<bind name="watch" value="'damageWidth'; ((prevHealth-newHealth)/maxHealth)*(_isExtended ? barExtWidth : barWidth)"/>
		<bind name="watch" value="'damageHeight'; _isExtended ? barExtHeight : barHeight"/>
		<bind name="watch" value="'damagePositionX'; (newHealth/maxHealth)*(_isExtended ? barExtWidth : barWidth)"/>
		<bind name="changeDispatch" value="damageWidth; damageWidth &gt; 0 ? 'evPreHealthChanged' : ''"/>
		<bind name="dispatch" value="'evPreHealthChanged'; 'evHealthChanged'; {}; 2; 0.01"/>
		<bind name="changeDispatch" value="_isExtended; 'evHideDamageFX'; {}; 1"/>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="fxInstance" value="'evHealthChanged'; 'ShipHealthBarFXItem'; {lifetime: 1.2, _damagePositionX: damagePositionX, _damageWidth: math.ceil(damageWidth), _damageHeight: damageHeight}"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="scaleX" value="prevHealth / maxHealth"/>
			<block>
				<style>
					<position value="absolute"/>
					<width value="40px"/>
					<height value="3px"/>
				</style>
				<bind name="style" value="'width'; (_isExtended ? barExtWidth : barWidth) + 'px'"/>
				<bind name="style" value="'height'; (_isExtended ? barExtHeight : barHeight) + 'px'"/>
				<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff :
											relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			</block>
		</block>
		<block>
			<bind name="visible" value="_isExtended"/>
			<bind name="repeat" value="segmentCount - 1; 'ShipHealthBarDivider'; { 	_segmentWidth: 	segmentWidth,
																	_barHeight: 	barExtHeight,
																	_isExtended: _isExtended }"/>
		</block>
	</block>
	<block className="ShipHealthBarDivider">
		<style>
			<position value="absolute"/>
			<height value="10px"/>
			<width value="2px"/>
			<alpha value="0.35"/>
			<backgroundColor value="0xFF000000"/>
		</style>
		<bind name="transition" value="_isExtended; 0.15; { alpha: 0 }; { alpha: 0.35 }; { alpha: 0 }; 2; 0.1"/>
		<bind name="x" value="($index+1) * _segmentWidth - 1"/>
	</block>
	<block className="ShipHealthBarFXItem">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="appear" value="'evHideDamageFX'; 0.1; 0; {alpha: 1}; {alpha: 0}"/>
		<block>
			<style>
				<position value="absolute"/>
				<width value="10px"/>
				<height value="10px"/>
				<backgroundColor value="0xFFF1F1F1"/>
			</style>
			<bind name="style" value="'height'; _damageHeight + 'px'"/>
			<bind name="style" value="'width'; _damageWidth + 'px'"/>
			<bind name="x" value="_damagePositionX"/>
			<bind name="appear" value="'addedToStage'; lifetime-0.9; 0.9; {alpha: 1, scaleY: 1, y: 0 }; {alpha: 0, scaleY: 2, y: -(_damageHeight/2)}; 2"/>
		</block>
	</block>
	<block className="ShipHealthIndicator">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<bind name="var" value="{fxDelay: 0.6}"/>
		<bind name="var" value="{fxDelay: fxDelay}"/>
		<bind name="catch" value="'set'+'newHealth'"/>
		<bind name="var" value="{newHealth: -1}"/>
		<bind name="catch" value="'set'+'prevHealth'"/>
		<bind name="var" value="{prevHealth: -1}"/>
		<bind name="dispatch" value="'addedToStage'; 'set'+'prevHealth'; {prevHealth: health}"/>
		<bind name="changeDispatch" value="health; 'set'+'newHealth'; {newHealth: health}; 1"/>
		<bind name="changeDispatch" value="health; 'dispatchSet'+'prevHealth'"/>
		<bind name="watch" value="'isUpChange'; newHealth &gt; prevHealth"/>
		<bind name="dispatch" value="'dispatchSet'+'prevHealth'; 'set'+'prevHealth'; {prevHealth: health}; 0; isUpChange ? 0 : fxDelay"/>
		<style>
			<width value="1px"/>
			<height value="1px"/>
			<marginTop value="0px"/>
			<align value="center|middle"/>
		</style>
		<bind name="style" value="'width'; _width"/>
		<bind name="style" value="'height'; _height"/>
		<bind name="style" value="'marginTop'; _isExtended ? 0 : '8px'"/>
		<block className="health_bar_track" type="native">
			<style>
				<position value="absolute"/>
				<width value="1px"/>
				<height value="1px"/>
			</style>
			<bind name="style" value="'width'; _width"/>
			<bind name="style" value="'height'; _height"/>
			<bind name="gotoAndStop!" value="relation"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="newHealth == 0 ? 0.1 : newHealth; 0.3; {scaleX: prevHealth / maxHealth}; {scaleX: newHealth / maxHealth}; null; 1; fxDelay - 0.05"/>
			<block className="health_bar_damage" type="native">
				<style>
					<width value="1px"/>
					<height value="1px"/>
					<alpha value="0.8"/>
				</style>
				<bind name="visible" value="newHealth != prevHealth"/>
				<bind name="style" value="'width'; _width"/>
				<bind name="style" value="'height'; _height"/>
			</block>
		</block>
		<block>
			<style>
				<position value="absolute"/>
			</style>
			<bind name="transition" value="newHealth == 0 ? 0.1 : newHealth; 0.15; {scaleX: prevHealth / maxHealth}; {scaleX: newHealth / maxHealth}; null; 1; 0.05"/>
			<block className="health_bar" type="native">
				<style>
					<width value="1px"/>
					<height value="1px"/>
				</style>
				<bind name="style" value="'width'; _width"/>
				<bind name="style" value="'height'; _height"/>
				<bind name="gotoAndStop!" value="relation"/>
			</block>
		</block>
		<block type="text">
			<styleClass value="$TextHUDBold"/>
			<style>
				<marginTop value="-1px"/>
			</style>
			<bind name="style" value="'fontSize'; maxHealth &gt;= 100000 ? 15 : 17"/>
			<bind name="class" value="relation == 'ally' ? '$TextColorHUDAllyInvert' : '$TextColorHUDEnemyInvert'"/>
			<bind name="text" value="format(health) + ' / ' + format(maxHealth)"/>
		</block>
	</block>
	<block className="PlaneMarker">
		<bind name="watchDH" value="'targetFlags'; ['entity.target.evChanged']; entity.target ? entity.target.flags : 0"/>
		<bind name="watch" value="'isAAFocused'; (targetFlags &amp; (1 &lt;&lt; WeaponType.AIRDEFENSE)) &gt; 0"/>
		<bind name="watchDH" value="'planeIsSelected'; ['entity.selection.evChanged']; entity.selection.value"/>
		<style>
			<position value="absolute"/>
			<top value="-30px"/>
		</style>
		<block>
			<style>
				<position value="absolute"/>
				<left value="19px"/>
				<top value="-20px"/>
			</style>
			<bind name="fxInstance" value="'evShowTargetQuickCommand'; 'TargetAnimationQC'; {lifetime: 5}"/>
		</block>
		<block>
			<style>
				<width value="36px"/>
				<height value="44px"/>
				<align value="center|middle"/>
			</style>
			<bind name="style" value="'marginBottom'; planeIsSelected ? '4px' : '-4px'"/>
			<block className="PlaneMarkerIcon">
				<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
				<bind name="watch" value="'planeType'; planeTypes[entity.plane.planeType]"/>
				<bind name="watch" value="'isConsumable'; entity.plane.isConsumable"/>
				<bind name="watchDH" value="'hasBomb'; ['entity.ownSquadron.evBombChanged']; entity.ownSquadron.hasBomb"/>
				<bind name="watchDH" value="'ammo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.ammo"/>
				<bind name="watchDH" value="'maxAmmo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.maxAmmo"/>
				<bind name="watch" value="'planeIconClass'; (isConsumable ? 'catapult_' : '') + planeType + (isInSameDivision 	? '_division' :
																					tkStatus 			? '_tk' :  '_' + relation )"/>
				<bind name="watch" value="'isNotFull'; entity.ownSquadron &amp;&amp; (	(planeType == 'bomber' || planeType == 'torpedobomber') ? !hasBomb :
														 planeType == 'fighter' 								? ammo &lt; maxAmmo : false	)"/>
				<bind name="watch" value="'fighterEmptyStatus'; ammo == 0 ? '_empty' :
										(ammo / maxAmmo) &lt; 0.33 ? '_2of3_empty' : '_1of3_empty'"/>
				<block>
					<bind name="visible" value="!isNotFull"/>
					<bind name="style" value="'backgroundSprite'; planeIconClass  + '_c'"/>
				</block>
				<block>
					<bind name="visible" value="isNotFull"/>
					<bind name="style" value="'backgroundSprite'; planeIconClass  + (planeType == 'fighter' ? fighterEmptyStatus : '_empty') + '_c'"/>
				</block>
				<bind name="scaleX" value="planeIsSelected ? 2 : 1"/>
				<bind name="scaleY" value="planeIsSelected ? 2 : 1"/>
				<bind name="ubScaleX" value="planeIsSelected ? 2 : 1"/>
				<bind name="ubScaleY" value="planeIsSelected ? 2 : 1"/>
			</block>
		</block>
		<block>
			<bind name="instance" value="'PlaneHealthBar'; { _barWidth: 48, _entityId: entity.id }"/>
		</block>
		<block>
			<style>
				<width value="0px"/>
				<height value="24px"/>
			</style>
			<block type="text">
				<styleClass value="$TextHUD16Bold"/>
				<style>
					<marginBottom value="2px"/>
				</style>
				<bind name="text" value="distance + ' ' + distancePostfix"/>
			</block>
		</block>
		<block>
			<bind name="fade" value="isAAFocused; 0.1; {alpha: 0, top: -10}; {alpha: 1, top: 0}; null; 2"/>
			<style>
				<position value="absolute"/>
				<bottom value="14px"/>
				<left value="-32px"/>
			</style>
			<block className="aa_focus" type="native"/>
		</block>
	</block>
	<block className="PlaneMarkerIcon">
		<bind name="var" value="{ planeTypes: ['scout', 'bomber', 'torpedobomber', 'fighter'] }"/>
		<bind name="watch" value="'planeType'; planeTypes[entity.plane.planeType]"/>
		<bind name="watch" value="'isConsumable'; entity.plane.isConsumable"/>
		<bind name="watchDH" value="'hasBomb'; ['entity.ownSquadron.evBombChanged']; entity.ownSquadron.hasBomb"/>
		<bind name="watchDH" value="'ammo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.ammo"/>
		<bind name="watchDH" value="'maxAmmo'; ['entity.ownSquadron.evAmmoChanged']; entity.ownSquadron.maxAmmo"/>
		<bind name="watch" value="'planeIconClass'; (isConsumable ? 'catapult_' : '') + planeType + (isInSameDivision 	? '_division' :
																					tkStatus 			? '_tk' :  '_' + relation )"/>
		<bind name="watch" value="'isNotFull'; entity.ownSquadron &amp;&amp; (	(planeType == 'bomber' || planeType == 'torpedobomber') ? !hasBomb :
														 planeType == 'fighter' 								? ammo &lt; maxAmmo : false	)"/>
		<bind name="watch" value="'fighterEmptyStatus'; ammo == 0 ? '_empty' :
										(ammo / maxAmmo) &lt; 0.33 ? '_2of3_empty' : '_1of3_empty'"/>
		<block>
			<bind name="visible" value="!isNotFull"/>
			<bind name="style" value="'backgroundSprite'; planeIconClass  + '_c'"/>
		</block>
		<block>
			<bind name="visible" value="isNotFull"/>
			<bind name="style" value="'backgroundSprite'; planeIconClass  + (planeType == 'fighter' ? fighterEmptyStatus : '_empty') + '_c'"/>
		</block>
		<bind name="scaleX" value="planeIsSelected ? 2 : 1"/>
		<bind name="scaleY" value="planeIsSelected ? 2 : 1"/>
		<bind name="ubScaleX" value="planeIsSelected ? 2 : 1"/>
		<bind name="ubScaleY" value="planeIsSelected ? 2 : 1"/>
	</block>
	<block className="PlaneHealthBar">
		<bind name="entityDH" value="'entity'; _entityId"/>
		<bind name="watchDH" value="'health'; ['entity.health.evValueChanged', 'entity.health.evKilled']; entity.health.value"/>
		<bind name="watchDH" value="'maxHealth'; []; entity.health.max"/>
		<bind name="watchDH" value="'relation'; ['entity.relation.evChanged']; 	entity.relation.value == 1 ? 'ally' :
																		entity.relation.value == 2 ? 'enemy' :
																		entity.relation.value == 3 ? 'neutral' : 'own'"/>
		<style>
			<backgroundColor value="0x80000000"/>
			<height value="3px"/>
			<width value="40px"/>
			<marginLeft value="2px"/>
			<marginRight value="2px"/>
		</style>
		<bind name="width" value="_barWidth"/>
		<block>
			<style>
				<position value="absolute"/>
				<height value="3px"/>
				<width value="40px"/>
			</style>
			<bind name="width" value="_barWidth"/>
			<bind name="style" value="'backgroundColor'; relation == 'ally' ? 0xFF80c0ff : relation == 'enemy' ? 0xFFe75153 : 0xFFF1F1F1"/>
			<bind name="scaleX" value="health/maxHealth"/>
		</block>
		<block>
			<style>
				<position value="absolute"/>
				<left value="1px"/>
				<height value="3px"/>
				<width value="0px"/>
			</style>
			<bind name="repeat" value="maxHealth-1; 'PlaneHealthBarDivider'; { _sectorWidth: _barWidth / maxHealth }"/>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
	<block className="PlaneHealthBarDivider">
		<style>
			<backgroundColor value="0x80000000"/>
			<width value="2px"/>
			<height value="3px"/>
		</style>
		<bind name="style" value="'marginLeft'; _sectorWidth-2 + 'px'"/>
	</block>
	<block className="TargetAnimationQC">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="var" value="{ quickCommandImage:
		{
			Target_CMD:							'quick_command_target',
			Sender_CMD_QUICK_TACTIC:			'waves_mini_с',
			Sender_CMD_QUICK_AYE_AYE:			'qc_icon_yes_c',
			Sender_CMD_QUICK_NEED_VISION:		'qc_icon_vision_c',
			Sender_CMD_QUICK_NEED_SMOKE:		'qc_icon_smoke_c',
			Sender_CMD_QUICK_NEED_SUPPORT:		'qc_icon_support_c',
			Sender_CMD_QUICK_BACK:				'qc_icon_back_c',
			Sender_CMD_QUICK_NO_WAY:			'qc_icon_no_c',
			Sender_CMD_QUICK_NEED_AIR_DEFENCE:	'qc_icon_aa_c',
			Sender_CMD_QUICK_GOOD_LUCK:			'waves_mini_с',
			Sender_CMD_QUICK_GOOD_GAME:			'waves_mini_с',
			Sender_CMD_QUICK_THANK_YOU:			'waves_mini_с',
			Sender_CMD_QUICK_CARAMBA:			'waves_mini_с'

		}
	}"/>
		<bind name="var" value="{ hideAnimationPlayed: false }"/>
		<bind name="appear" value="hideAnimationPlayed ? 'noEvent' : 'hideQCFX'; 0.15; 0; {alpha: 1}; {alpha: 0}; 1"/>
		<bind name="catch" value="'hideQCFX'; { hideAnimationPlayed: true }"/>
		<block>
			<bind name="style" value="'backgroundSprite'; quickCommandImage[$args[0]]"/>
			<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0, top: -10}; {alpha: 1, top: 0}; 2"/>
			<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.15; {alpha: 1}; {alpha: 0}; 1"/>
		</block>
	</block>
	<block className="AnimationMiniMapQC">
		<style>
			<position value="absolute"/>
		</style>
		<bind name="style" value="'backgroundSprite'; $args[0] == 'Target_CMD' ? 'attention_target' : 'attention_sender'"/>
		<bind name="appear" value="'addedToStage'; 0.15; 0; {alpha: 0}; {alpha: 1}; 2"/>
		<bind name="appear" value="'addedToStage'; 0.15; lifetime-0.15; {alpha: 1}; {alpha: 0}; 1"/>
	</block>
	<block className="MainHUDContainer">
		<bind name="stageSize"/>
		<bind name="scaleX" value="uiScale"/>
		<bind name="scaleY" value="uiScale"/>
		<bind name="ubScaleX" value="1/uiScale"/>
		<bind name="ubScaleY" value="1/uiScale"/>
		<styleClass value="$HUDFullsize"/>
		<style>
			<height value="100%"/>
			<width value="100%"/>
			<paddingLeft value="90px"/>
			<paddingRight value="90px"/>
			<paddingTop value="60px"/>
			<paddingBottom value="60px"/>
		</style>
		<bind name="firstEntityDH" value="'avatar'; CC.playerAvatar"/>
		<bind name="firstEntityDH" value="'cameraEntity'; CC.camera"/>
		<bind name="watchDH" value="'isAlive'; ['avatar.health.evKilled']; avatar.health.isAlive"/>
		<bind name="watchDH" value="'tacticalMap'; ['cameraEntity.camera.evTacticalStateChanged']; cameraEntity.camera.isTactical"/>
		<bind name="mouseEnabled" value="false"/>
		<bind name="mouseChildren" value="false"/>
		<bind name="controller" value="lesta.dialogs.controllers.EntitySingletonController; 'gameInfo'"/>
		<block>
			<styleClass value="$HUDFullsize"/>
			<block>
				<styleClass value="$HUDFullsizeAbsolute"/>
				<bind name="transition" value="!tacticalMap; 0.15; {alpha: 0, top: 50}; {alpha: 1, top: 0}; {alpha: 0, top: 50}; 2; tacticalMap ? 0 : 0.1"/>
				<bind name="instance" value="'AliveView'; isAlive ? {} : null"/>
				<bind name="instance" value="'OwnShipHealth'; {}"/>
				<bind name="instance" value="'CompassContainer'; {}"/>
				<bind name="instance" value="'BattleMinimap'; {}"/>
				<bind name="instance" value="'RibbonsContainer'; {}"/>
				<bind name="instance" value="'LowerLogContainer'; {}"/>
				<bind name="instance" value="'DeathLogContainer'; {}"/>
				<bind name="instance" value="'EventLogContainer'; {}"/>
			</block>
			<bind name="instance" value="'BattleTimerContainer'; {}"/>
			<bind name="instance" value="'BattleShipList'; {}"/>
			<bind name="instance" value="'ScenarioObjectivesContainer'; {}"/>
			<bind name="instance" value="'SpectatorHints'; isAlive ? null : {}"/>
			<block>
				<styleClass value="$HUDFullsizeAbsolute"/>
				<bind name="transition" value="tacticalMap; 0.15; {alpha: 0, top: 50}; {alpha: 1, top: 0}; {alpha: 0, top: 50}; 2; tacticalMap ? 0.1 : 0"/>
				<bind name="instance" value="'BattleStatus'; {}"/>
			</block>
		</block>
		<bind name="firstEntityDH" value="'mouseEntity'; CC.mouse"/>
		<bind name="firstEntityDH" value="'quickCommandsPanelEntity'; CC.quickCommandsPanel"/>
		<bind name="watchDH" value="'showBigPanel'; ['quickCommandsPanelEntity.quickCommandsPanel.evActiveChanged']; quickCommandsPanelEntity.quickCommandsPanel.active &amp;&amp; !quickCommandsPanelEntity.quickCommandsPanel.mouseActive"/>
		<bind name="watchDH" value="'showSmallPanel'; ['quickCommandsPanelEntity.quickCommandsPanel.evActiveChanged']; quickCommandsPanelEntity.quickCommandsPanel.active &amp;&amp; quickCommandsPanelEntity.quickCommandsPanel.mouseActive"/>
		<bind name="instance" value="'QuickCommands'; showBigPanel ? {} : null"/>
		<bind name="instance" value="'QuickCommandsSmall'; showSmallPanel ? {} : null"/>
	</block>
	<block className="AliveView">
		<styleClass value="$HUDFullsize"/>
		<style>
			<align value="center|middle"/>
		</style>
		<bind name="collectionDH" value="CC.userPrefs; 'userPrefsCollection'"/>
		<bind name="entityDH" value="'userPrefsEntity'; userPrefsCollection[0].id"/>
		<bind name="watchDH" value="'userPrefs'; ['userPrefsEntity.userPrefs.evUserPrefsChanged']; userPrefsEntity.userPrefs.userPrefs"/>
		<bind name="firstEntityDH" value="'prefsEntity'; CC.prefsMarker"/>
		<bind name="watchDH" value="'simultaneousReload'; ['prefsEntity.prefsBattle.evUpdate']; prefsEntity.prefsBattle.simultaneousReload"/>
		<bind name="instance" value="'WeaponReloadBarExtended'; simultaneousReload ? {} : null"/>
		<bind name="instance" value="'WeaponReloadBar'; simultaneousReload ? null : {}"/>
		<bind name="instance" value="'ModulesState'; {}"/>
		<bind name="instance" value="'SpeedControl'; {}"/>
		<bind name="instance" value="'AngleControl'; {}"/>
		<bind name="instance" value="'Controls'; {}"/>
		<bind name="instance" value="'HUDCentralDangersContainer'; {}"/>
		<bind name="instance" value="'SituationIndicatorsContainer'; {}"/>
		<bind name="instance" value="'CapturePointProgressContainer'; {}"/>
	</block>
	<block className="DevLayoutGrid">
		<styleClass value="$HUDFullsize"/>
		<style>
			<position value="absolute"/>
		</style>
		<block>
			<styleClass value="$HUDFullsize"/>
			<style>
				<position value="absolute"/>
			</style>
			<block>
				<style>
					<width value="100%"/>
					<height value="240px"/>
					<backgroundColor value="0x10ff00ff"/>
				</style>
			</block>
			<block>
				<style>
					<width value="100%"/>
					<height value="240px"/>
					<backgroundColor value="0x30000000"/>
				</style>
			</block>
			<block>
				<style>
					<width value="100%"/>
					<height value="240px"/>
					<backgroundColor value="0x10ff00ff"/>
				</style>
			</block>
			<block>
				<style>
					<width value="100%"/>
					<height value="240px"/>
					<backgroundColor value="0x30000000"/>
				</style>
			</block>
		</block>
		<block>
			<styleClass value="$HUDFullsize"/>
			<style>
				<position value="absolute"/>
			</style>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x10ff00ff"/>
				</style>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x30000000"/>
				</style>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x10ff00ff"/>
				</style>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x30000000"/>
				</style>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x10ff00ff"/>
				</style>
			</block>
			<block>
				<style>
					<height value="100%"/>
					<width value="290px"/>
					<backgroundColor value="0x30000000"/>
				</style>
			</block>
			<style>
				<flow value="horizontal"/>
			</style>
		</block>
	</block>
</ui>
